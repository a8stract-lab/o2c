target functions:  797

SEC("kprobe/netif_freeze_queues+0x4b")
int BPF_KPROBE(do_mov_general_1)
{
    u64 addr = ctx->bx + 0x84;
    check(addr);
    return 0;
}


SEC("kprobe/netif_freeze_queues+0x5a")
int BPF_KPROBE(do_mov_general_2)
{
    u64 addr = ctx->bx + 0x84;
    check(addr);
    return 0;
}


SEC("kprobe/noop_enqueue+0x9")
int BPF_KPROBE(do_mov_general_3)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/noop_enqueue+0x14")
int BPF_KPROBE(do_mov_general_4)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/noqueue_init+0x8")
int BPF_KPROBE(do_mov_general_5)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/dev_graft_qdisc+0x37")
int BPF_KPROBE(do_mov_general_6)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/dev_graft_qdisc+0x3c")
int BPF_KPROBE(do_mov_general_7)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_block_init+0x6")
int BPF_KPROBE(do_mov_general_8)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_block_init+0xa")
int BPF_KPROBE(do_mov_general_9)
{
    u64 addr = ctx->di + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_dequeue+0xa6")
int BPF_KPROBE(do_mov_general_10)
{
    u64 addr = ctx->ax + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_dequeue+0x143")
int BPF_KPROBE(do_mov_general_11)
{
    u64 addr = ctx->r11 + ctx->si * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_dequeue+0x15b")
int BPF_KPROBE(do_mov_general_12)
{
    u64 addr = ctx->r8 + ctx->dx * 0x1 + 0x1c4;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_dequeue+0x1b7")
int BPF_KPROBE(do_mov_general_13)
{
    u64 addr = ctx->dx + 0x1c4;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_swap+0x31")
int BPF_KPROBE(do_switch_13)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_swap+0x36")
int BPF_KPROBE(do_switch_14)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_swap+0x3a")
int BPF_KPROBE(do_mov_general_14)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_swap+0x42")
int BPF_KPROBE(do_mov_general_15)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_swap+0x4a")
int BPF_KPROBE(do_switch_15)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_swap+0x4f")
int BPF_KPROBE(do_switch_16)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_swap+0x4f")
int BPF_KPROBE(do_mov_general_16)
{
    u64 addr = ctx->r14 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_swap+0x5c")
int BPF_KPROBE(do_switch_17)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_swap+0x61")
int BPF_KPROBE(do_switch_18)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_swap+0x63")
int BPF_KPROBE(do_mov_general_17)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_init+0xa")
int BPF_KPROBE(do_mov_general_18)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_init+0x1a")
int BPF_KPROBE(do_mov_general_19)
{
    u64 addr = ctx->di + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_init+0x26")
int BPF_KPROBE(do_mov_general_20)
{
    u64 addr = ctx->di + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_init+0x2e")
int BPF_KPROBE(do_mov_general_21)
{
    u64 addr = ctx->di + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_init+0x32")
int BPF_KPROBE(do_switch_19)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_init+0x37")
int BPF_KPROBE(do_switch_20)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_init+0x37")
int BPF_KPROBE(do_mov_general_22)
{
    u64 addr = ctx->bx + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_init+0x3b")
int BPF_KPROBE(do_mov_general_23)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/mini_qdisc_pair_init+0x3f")
int BPF_KPROBE(do_mov_general_24)
{
    u64 addr = ctx->bx + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ratecfg_precompute+0x6")
int BPF_KPROBE(do_mov_general_25)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ratecfg_precompute+0xe")
int BPF_KPROBE(do_mov_slab_26)
{
    u64 addr = ctx->di;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/psched_ratecfg_precompute+0x15")
int BPF_KPROBE(do_mov_general_27)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ratecfg_precompute+0x24")
int BPF_KPROBE(do_mov_general_28)
{
    u64 addr = ctx->di + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ratecfg_precompute+0x2c")
int BPF_KPROBE(do_mov_general_29)
{
    u64 addr = ctx->di + 0xe;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ratecfg_precompute+0x3b")
int BPF_KPROBE(do_mov_slab_30)
{
    u64 addr = ctx->di;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/psched_ratecfg_precompute+0x42")
int BPF_KPROBE(do_mov_general_31)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ratecfg_precompute+0x4c")
int BPF_KPROBE(do_mov_general_32)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ratecfg_precompute+0x5b")
int BPF_KPROBE(do_mov_slab_33)
{
    u64 addr = ctx->di + 0x11;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/psched_ratecfg_precompute+0x6a")
int BPF_KPROBE(do_mov_general_34)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ratecfg_precompute+0x86")
int BPF_KPROBE(do_mov_general_35)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_enqueue+0xa0")
int BPF_KPROBE(do_mov_general_36)
{
    u64 addr = ctx->ax + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_enqueue+0xa7")
int BPF_KPROBE(do_mov_general_37)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_enqueue+0x113")
int BPF_KPROBE(do_mov_general_38)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_enqueue+0x117")
int BPF_KPROBE(do_mov_general_39)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_enqueue+0x12b")
int BPF_KPROBE(do_mov_general_40)
{
    u64 addr = ctx->ax + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/__netdev_watchdog_up+0x33")
int BPF_KPROBE(do_switch_25)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__netdev_watchdog_up+0x38")
int BPF_KPROBE(do_switch_26)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__netdev_watchdog_up+0x60")
int BPF_KPROBE(do_mov_general_41)
{
    u64 addr = ctx->di + 0x4f0;
    check(addr);
    return 0;
}


SEC("kprobe/netif_carrier_on+0x2d")
int BPF_KPROBE(do_switch_28)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netif_carrier_on+0x32")
int BPF_KPROBE(do_switch_29)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netif_carrier_off+0x23")
int BPF_KPROBE(do_switch_31)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netif_carrier_off+0x28")
int BPF_KPROBE(do_switch_32)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netif_carrier_event+0x21")
int BPF_KPROBE(do_switch_33)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netif_carrier_event+0x26")
int BPF_KPROBE(do_switch_34)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pfifo_fast_init+0x72")
int BPF_KPROBE(do_switch_35)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pfifo_fast_init+0x77")
int BPF_KPROBE(do_switch_36)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pfifo_fast_init+0x77")
int BPF_KPROBE(do_mov_general_42)
{
    u64 addr = ctx->bx + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_init+0x8b")
int BPF_KPROBE(do_mov_general_43)
{
    u64 addr = ctx->bx + 0x80;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_init+0x9d")
int BPF_KPROBE(do_mov_general_44)
{
    u64 addr = ctx->bx - 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_init+0xa1")
int BPF_KPROBE(do_mov_general_45)
{
    u64 addr = ctx->bx - 0x7c;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_init+0xa8")
int BPF_KPROBE(do_mov_general_46)
{
    u64 addr = ctx->bx - 0x80;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_init+0xaf")
int BPF_KPROBE(do_mov_general_47)
{
    u64 addr = ctx->bx - 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_init+0xb9")
int BPF_KPROBE(do_mov_general_48)
{
    u64 addr = ctx->bx - 0xbc;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_init+0xc3")
int BPF_KPROBE(do_mov_general_49)
{
    u64 addr = ctx->bx - 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_init+0xf1")
int BPF_KPROBE(do_mov_general_50)
{
    u64 addr = ctx->r15 + ctx->ax * 0x1 + 0x208;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ppscfg_precompute+0x6")
int BPF_KPROBE(do_mov_general_51)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ppscfg_precompute+0x9")
int BPF_KPROBE(do_mov_general_52)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ppscfg_precompute+0x1f")
int BPF_KPROBE(do_mov_general_53)
{
    u64 addr = ctx->di + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ppscfg_precompute+0x31")
int BPF_KPROBE(do_mov_general_54)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ppscfg_precompute+0x49")
int BPF_KPROBE(do_mov_general_55)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/psched_ppscfg_precompute+0x52")
int BPF_KPROBE(do_mov_general_56)
{
    u64 addr = ctx->di + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x5a")
int BPF_KPROBE(do_switch_37)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x5a")
int BPF_KPROBE(do_hotbpf_37)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x5f")
int BPF_KPROBE(do_switch_38)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x9d")
int BPF_KPROBE(do_switch_39)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0xa2")
int BPF_KPROBE(do_switch_40)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0xa2")
int BPF_KPROBE(do_mov_general_57)
{
    u64 addr = ctx->bx + ctx->r14 * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x11b")
int BPF_KPROBE(do_mov_general_58)
{
    u64 addr = ctx->bx + ctx->ax * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x175")
int BPF_KPROBE(do_mov_general_59)
{
    u64 addr = ctx->r15 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x1a0")
int BPF_KPROBE(do_mov_general_60)
{
    u64 addr = ctx->r15 + 0x80;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x1b2")
int BPF_KPROBE(do_mov_general_61)
{
    u64 addr = ctx->r15 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x1ba")
int BPF_KPROBE(do_mov_general_62)
{
    u64 addr = ctx->r15 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x1c1")
int BPF_KPROBE(do_mov_general_63)
{
    u64 addr = ctx->r15 + 0x84;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x1cc")
int BPF_KPROBE(do_mov_general_64)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x1cf")
int BPF_KPROBE(do_mov_general_65)
{
    u64 addr = ctx->ax + ctx->r12 * 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x201")
int BPF_KPROBE(do_mov_general_66)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x282")
int BPF_KPROBE(do_mov_general_67)
{
    u64 addr = ctx->dx + ctx->cx * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x293")
int BPF_KPROBE(do_mov_general_68)
{
    u64 addr = ctx->r15 + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_change_tx_queue_len+0x2a4")
int BPF_KPROBE(do_mov_general_69)
{
    u64 addr = ctx->r15 + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_reset+0x68")
int BPF_KPROBE(do_mov_general_70)
{
    u64 addr = ctx->bx + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_reset+0xca")
int BPF_KPROBE(do_mov_general_71)
{
    u64 addr = ctx->cx + ctx->dx * 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_reset+0x107")
int BPF_KPROBE(do_mov_general_72)
{
    u64 addr = ctx->dx + ctx->cx * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_reset+0x117")
int BPF_KPROBE(do_mov_general_73)
{
    u64 addr = ctx->bx + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_fast_reset+0x126")
int BPF_KPROBE(do_mov_general_74)
{
    u64 addr = ctx->bx + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/dev_watchdog+0xeb")
int BPF_KPROBE(do_switch_57)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_watchdog+0xf0")
int BPF_KPROBE(do_switch_58)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_watchdog+0x166")
int BPF_KPROBE(do_switch_63)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_watchdog+0x16b")
int BPF_KPROBE(do_switch_64)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_watchdog+0x1d7")
int BPF_KPROBE(do_switch_65)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_watchdog+0x1dc")
int BPF_KPROBE(do_switch_66)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_reset+0x4d")
int BPF_KPROBE(do_mov_general_75)
{
    u64 addr = ctx->bx + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_reset+0x5a")
int BPF_KPROBE(do_mov_general_76)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_reset+0x61")
int BPF_KPROBE(do_mov_general_77)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_reset+0x69")
int BPF_KPROBE(do_mov_general_78)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_reset+0x6d")
int BPF_KPROBE(do_mov_general_79)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_reset+0xac")
int BPF_KPROBE(do_mov_general_80)
{
    u64 addr = ctx->bx + 0x100;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_reset+0xb9")
int BPF_KPROBE(do_mov_general_81)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_reset+0xc0")
int BPF_KPROBE(do_mov_general_82)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_reset+0xc8")
int BPF_KPROBE(do_mov_general_83)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_reset+0xcc")
int BPF_KPROBE(do_mov_general_84)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_reset+0xe0")
int BPF_KPROBE(do_mov_general_85)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_reset+0xea")
int BPF_KPROBE(do_mov_general_86)
{
    u64 addr = ctx->bx + 0xc4;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_destroy+0x25")
int BPF_KPROBE(do_switch_81)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_destroy+0x2a")
int BPF_KPROBE(do_switch_82)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_destroy+0x49")
int BPF_KPROBE(do_switch_85)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_destroy+0x4e")
int BPF_KPROBE(do_switch_86)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netif_tx_unlock+0x35")
int BPF_KPROBE(do_switch_97)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netif_tx_unlock+0x3a")
int BPF_KPROBE(do_switch_98)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x9c")
int BPF_KPROBE(do_switch_101)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0xa1")
int BPF_KPROBE(do_switch_102)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x127")
int BPF_KPROBE(do_mov_general_87)
{
    u64 addr = ctx->bx + 0x84;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x153")
int BPF_KPROBE(do_mov_general_88)
{
    u64 addr = ctx->bx + 0x84;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x178")
int BPF_KPROBE(do_switch_107)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x17d")
int BPF_KPROBE(do_switch_108)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x1b0")
int BPF_KPROBE(do_switch_110)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x1b5")
int BPF_KPROBE(do_switch_111)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x211")
int BPF_KPROBE(do_mov_general_89)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x214")
int BPF_KPROBE(do_mov_general_90)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x218")
int BPF_KPROBE(do_mov_general_91)
{
    u64 addr = ctx->r12 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x220")
int BPF_KPROBE(do_mov_general_92)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x22e")
int BPF_KPROBE(do_mov_general_93)
{
    u64 addr = ctx->r12 + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x2f4")
int BPF_KPROBE(do_mov_general_94)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x2f7")
int BPF_KPROBE(do_mov_general_95)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x2fb")
int BPF_KPROBE(do_mov_general_96)
{
    u64 addr = ctx->r12 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x303")
int BPF_KPROBE(do_mov_general_97)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x311")
int BPF_KPROBE(do_mov_general_98)
{
    u64 addr = ctx->r12 + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x343")
int BPF_KPROBE(do_switch_114)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x348")
int BPF_KPROBE(do_switch_115)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x37a")
int BPF_KPROBE(do_switch_118)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_direct_xmit+0x37f")
int BPF_KPROBE(do_switch_119)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__qdisc_run+0xd6")
int BPF_KPROBE(do_mov_general_99)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0xf2")
int BPF_KPROBE(do_mov_general_100)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x1fd")
int BPF_KPROBE(do_mov_general_101)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x20a")
int BPF_KPROBE(do_mov_general_102)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x24f")
int BPF_KPROBE(do_mov_general_103)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x252")
int BPF_KPROBE(do_mov_general_104)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x256")
int BPF_KPROBE(do_mov_general_105)
{
    u64 addr = ctx->r12 + 0xf8;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x25e")
int BPF_KPROBE(do_mov_general_106)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x26c")
int BPF_KPROBE(do_mov_general_107)
{
    u64 addr = ctx->r12 + 0x100;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x3a1")
int BPF_KPROBE(do_mov_general_108)
{
    u64 addr = ctx->r12 + 0x100;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x3b1")
int BPF_KPROBE(do_mov_general_109)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x3b9")
int BPF_KPROBE(do_mov_general_110)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x3c1")
int BPF_KPROBE(do_mov_general_111)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x3c5")
int BPF_KPROBE(do_mov_general_112)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x46a")
int BPF_KPROBE(do_mov_general_113)
{
    u64 addr = ctx->r12 + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x47a")
int BPF_KPROBE(do_mov_general_114)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x482")
int BPF_KPROBE(do_mov_general_115)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x48a")
int BPF_KPROBE(do_mov_general_116)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x48e")
int BPF_KPROBE(do_mov_general_117)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_run+0x59d")
int BPF_KPROBE(do_switch_137)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__qdisc_run+0x5a2")
int BPF_KPROBE(do_switch_138)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x38")
int BPF_KPROBE(do_switch_139)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x3d")
int BPF_KPROBE(do_switch_140)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x57")
int BPF_KPROBE(do_mov_general_118)
{
    u64 addr = ctx->r15 + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x62")
int BPF_KPROBE(do_mov_general_119)
{
    u64 addr = ctx->r15 + 0x80;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x69")
int BPF_KPROBE(do_mov_general_120)
{
    u64 addr = ctx->r15 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x77")
int BPF_KPROBE(do_mov_general_121)
{
    u64 addr = ctx->r15 + 0xf0;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x7e")
int BPF_KPROBE(do_mov_general_122)
{
    u64 addr = ctx->r15 + 0xf8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x85")
int BPF_KPROBE(do_mov_general_123)
{
    u64 addr = ctx->r15 + 0x100;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x90")
int BPF_KPROBE(do_switch_141)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x95")
int BPF_KPROBE(do_switch_142)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x98")
int BPF_KPROBE(do_mov_general_124)
{
    u64 addr = ctx->r15 + 0xac;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0xa7")
int BPF_KPROBE(do_mov_general_125)
{
    u64 addr = ctx->r15 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0xaf")
int BPF_KPROBE(do_mov_slab_126)
{
    u64 addr = ctx->r15 + 0x140;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_alloc+0xba")
int BPF_KPROBE(do_mov_slab_127)
{
    u64 addr = ctx->r15;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_alloc+0xc1")
int BPF_KPROBE(do_mov_general_128)
{
    u64 addr = ctx->r15 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0xc5")
int BPF_KPROBE(do_mov_general_129)
{
    u64 addr = ctx->r15 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0xc9")
int BPF_KPROBE(do_mov_general_130)
{
    u64 addr = ctx->r15 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0xdc")
int BPF_KPROBE(do_mov_general_131)
{
    u64 addr = ctx->r15 + 0x64;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x101")
int BPF_KPROBE(do_switch_143)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x106")
int BPF_KPROBE(do_switch_144)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x138")
int BPF_KPROBE(do_mov_general_132)
{
    u64 addr = ctx->r15 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x146")
int BPF_KPROBE(do_switch_146)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x14b")
int BPF_KPROBE(do_switch_147)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x14b")
int BPF_KPROBE(do_mov_general_133)
{
    u64 addr = ctx->r15 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x17b")
int BPF_KPROBE(do_mov_general_134)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_alloc+0x19d")
int BPF_KPROBE(do_mov_general_135)
{
    u64 addr = ctx->r15 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_create_dflt+0x25")
int BPF_KPROBE(do_switch_151)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_create_dflt+0x2a")
int BPF_KPROBE(do_switch_152)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_create_dflt+0x4f")
int BPF_KPROBE(do_mov_general_136)
{
    u64 addr = ctx->ax + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_create_dflt+0xf3")
int BPF_KPROBE(do_mov_general_137)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_create_dflt+0x112")
int BPF_KPROBE(do_switch_157)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_create_dflt+0x117")
int BPF_KPROBE(do_switch_158)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_activate+0x15b")
int BPF_KPROBE(do_mov_general_138)
{
    u64 addr = ctx->r14 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/dev_activate+0x1a7")
int BPF_KPROBE(do_mov_general_139)
{
    u64 addr = ctx->r12 + 0x410;
    check(addr);
    return 0;
}


SEC("kprobe/dev_activate+0x252")
int BPF_KPROBE(do_mov_general_140)
{
    u64 addr = ctx->r12 + 0x410;
    check(addr);
    return 0;
}


SEC("kprobe/dev_deactivate_many+0x59")
int BPF_KPROBE(do_mov_general_141)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dev_deactivate_many+0x8f")
int BPF_KPROBE(do_mov_general_142)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dev_deactivate_many+0xc0")
int BPF_KPROBE(do_switch_170)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_deactivate_many+0xc5")
int BPF_KPROBE(do_switch_171)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_deactivate_many+0xff")
int BPF_KPROBE(do_switch_172)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_deactivate_many+0x104")
int BPF_KPROBE(do_switch_173)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_deactivate_many+0x13b")
int BPF_KPROBE(do_switch_176)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_deactivate_many+0x140")
int BPF_KPROBE(do_switch_177)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_deactivate_many+0x1d7")
int BPF_KPROBE(do_switch_181)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_deactivate_many+0x1dc")
int BPF_KPROBE(do_switch_182)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_deactivate+0x24")
int BPF_KPROBE(do_mov_general_143)
{
    u64 addr = ctx->di + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/dev_deactivate+0x28")
int BPF_KPROBE(do_mov_general_144)
{
    u64 addr = ctx->di + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/dev_deactivate+0x44")
int BPF_KPROBE(do_mov_general_145)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dev_deactivate+0x48")
int BPF_KPROBE(do_mov_general_146)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/dev_qdisc_change_tx_queue_len+0xc0")
int BPF_KPROBE(do_mov_general_147)
{
    u64 addr = ctx->r13 + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/dev_qdisc_change_tx_queue_len+0xc4")
int BPF_KPROBE(do_mov_general_148)
{
    u64 addr = ctx->r13 + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/dev_qdisc_change_tx_queue_len+0xdd")
int BPF_KPROBE(do_mov_general_149)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dev_qdisc_change_tx_queue_len+0xe1")
int BPF_KPROBE(do_mov_general_150)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/dev_init_scheduler+0xf")
int BPF_KPROBE(do_mov_general_151)
{
    u64 addr = ctx->di + 0x410;
    check(addr);
    return 0;
}


SEC("kprobe/dev_init_scheduler+0x31")
int BPF_KPROBE(do_mov_general_152)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dev_init_scheduler+0x3c")
int BPF_KPROBE(do_mov_general_153)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/dev_init_scheduler+0x58")
int BPF_KPROBE(do_mov_general_154)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dev_init_scheduler+0x60")
int BPF_KPROBE(do_mov_general_155)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/dev_init_scheduler+0x7d")
int BPF_KPROBE(do_switch_193)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_init_scheduler+0x82")
int BPF_KPROBE(do_switch_194)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dev_shutdown+0x36")
int BPF_KPROBE(do_mov_general_156)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dev_shutdown+0x3e")
int BPF_KPROBE(do_mov_general_157)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/dev_shutdown+0x6e")
int BPF_KPROBE(do_mov_general_158)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dev_shutdown+0x76")
int BPF_KPROBE(do_mov_general_159)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/dev_shutdown+0x90")
int BPF_KPROBE(do_mov_general_160)
{
    u64 addr = ctx->r12 + 0x410;
    check(addr);
    return 0;
}


SEC("kprobe/mq_dump_class+0x2e")
int BPF_KPROBE(do_mov_general_161)
{
    u64 addr = ctx->cx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/mq_dump_class+0x43")
int BPF_KPROBE(do_mov_general_162)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/mq_walk+0x23")
int BPF_KPROBE(do_mov_general_163)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/mq_walk+0x3f")
int BPF_KPROBE(do_mov_general_164)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/mq_walk+0x66")
int BPF_KPROBE(do_mov_general_165)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/mq_dump+0x3c")
int BPF_KPROBE(do_mov_general_166)
{
    u64 addr = ctx->di + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/mq_dump+0x4d")
int BPF_KPROBE(do_switch_199)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_dump+0x52")
int BPF_KPROBE(do_switch_200)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_dump+0x52")
int BPF_KPROBE(do_mov_general_167)
{
    u64 addr = ctx->r12 + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/mq_dump+0x5e")
int BPF_KPROBE(do_mov_general_168)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/mq_dump+0x66")
int BPF_KPROBE(do_mov_general_169)
{
    u64 addr = ctx->r13 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/mq_dump+0xba")
int BPF_KPROBE(do_switch_202)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_dump+0xbf")
int BPF_KPROBE(do_switch_203)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_dump+0xcd")
int BPF_KPROBE(do_switch_204)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_dump+0xd2")
int BPF_KPROBE(do_switch_205)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_attach+0x8d")
int BPF_KPROBE(do_mov_general_170)
{
    u64 addr = ctx->r13 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/mq_graft+0x73")
int BPF_KPROBE(do_mov_general_171)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/mq_dump_class_stats+0x51")
int BPF_KPROBE(do_switch_219)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_dump_class_stats+0x56")
int BPF_KPROBE(do_switch_220)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_dump_class_stats+0xba")
int BPF_KPROBE(do_switch_222)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_dump_class_stats+0xbf")
int BPF_KPROBE(do_switch_223)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_init+0x42")
int BPF_KPROBE(do_switch_226)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_init+0x42")
int BPF_KPROBE(do_hotbpf_226)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/mq_init+0x47")
int BPF_KPROBE(do_switch_227)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mq_init+0x47")
int BPF_KPROBE(do_mov_general_172)
{
    u64 addr = ctx->r15 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/mq_init+0x69")
int BPF_KPROBE(do_mov_general_173)
{
    u64 addr = ctx->dx + ctx->r13 * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0x40")
int BPF_KPROBE(do_mov_general_174)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0x48")
int BPF_KPROBE(do_mov_general_175)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0x51")
int BPF_KPROBE(do_mov_general_176)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0x5a")
int BPF_KPROBE(do_mov_general_177)
{
    u64 addr = ctx->ax + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0x63")
int BPF_KPROBE(do_mov_general_178)
{
    u64 addr = ctx->ax + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0x67")
int BPF_KPROBE(do_mov_general_179)
{
    u64 addr = ctx->ax + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0x73")
int BPF_KPROBE(do_mov_general_180)
{
    u64 addr = ctx->ax + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0x93")
int BPF_KPROBE(do_mov_general_181)
{
    u64 addr = ctx->ax + 0x26;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0xaa")
int BPF_KPROBE(do_mov_general_182)
{
    u64 addr = ctx->ax + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0xb1")
int BPF_KPROBE(do_mov_general_183)
{
    u64 addr = ctx->ax + 0x2c;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0xd3")
int BPF_KPROBE(do_mov_general_184)
{
    u64 addr = ctx->r12 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0xdc")
int BPF_KPROBE(do_mov_general_185)
{
    u64 addr = ctx->r12 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0xe5")
int BPF_KPROBE(do_mov_general_186)
{
    u64 addr = ctx->r12 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0xee")
int BPF_KPROBE(do_switch_234)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_frag_prepare_frag+0xf3")
int BPF_KPROBE(do_switch_235)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x6b")
int BPF_KPROBE(do_switch_237)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x70")
int BPF_KPROBE(do_switch_238)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0xa2")
int BPF_KPROBE(do_mov_general_187)
{
    u64 addr = ctx->r12 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0xbe")
int BPF_KPROBE(do_mov_general_188)
{
    u64 addr = ctx->r12 + 0x84;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0xec")
int BPF_KPROBE(do_mov_general_189)
{
    u64 addr = ctx->r12 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0xf5")
int BPF_KPROBE(do_mov_general_190)
{
    u64 addr = ctx->r12 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0xfe")
int BPF_KPROBE(do_mov_general_191)
{
    u64 addr = ctx->r12 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x106")
int BPF_KPROBE(do_mov_general_192)
{
    u64 addr = ctx->r12 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x10f")
int BPF_KPROBE(do_mov_general_193)
{
    u64 addr = ctx->r12 + 0xac;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x132")
int BPF_KPROBE(do_mov_general_194)
{
    u64 addr = ctx->r12 + 0x82;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x13d")
int BPF_KPROBE(do_switch_240)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x142")
int BPF_KPROBE(do_switch_241)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x176")
int BPF_KPROBE(do_mov_general_195)
{
    u64 addr = ctx->r12 + 0xba;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x191")
int BPF_KPROBE(do_mov_general_196)
{
    u64 addr = ctx->r12 + 0x9a;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x19a")
int BPF_KPROBE(do_mov_general_197)
{
    u64 addr = ctx->r12 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x1bf")
int BPF_KPROBE(do_switch_244)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x1c4")
int BPF_KPROBE(do_switch_245)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_frag_xmit+0x1dd")
int BPF_KPROBE(do_mov_general_198)
{
    u64 addr = ctx->r12 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/sch_fragment+0xe7")
int BPF_KPROBE(do_switch_247)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0xec")
int BPF_KPROBE(do_switch_248)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0xfc")
int BPF_KPROBE(do_mov_general_199)
{
    u64 addr = ctx->r12 + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/sch_fragment+0x125")
int BPF_KPROBE(do_mov_general_200)
{
    u64 addr = ctx->r12 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/sch_fragment+0x1a6")
int BPF_KPROBE(do_switch_251)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x1ab")
int BPF_KPROBE(do_switch_252)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x1bb")
int BPF_KPROBE(do_mov_general_201)
{
    u64 addr = ctx->r12 + 0x3e;
    check(addr);
    return 0;
}


SEC("kprobe/sch_fragment+0x1dd")
int BPF_KPROBE(do_mov_general_202)
{
    u64 addr = ctx->r12 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/sch_fragment+0x1fb")
int BPF_KPROBE(do_switch_254)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x200")
int BPF_KPROBE(do_switch_255)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x2d1")
int BPF_KPROBE(do_switch_256)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x2d6")
int BPF_KPROBE(do_switch_257)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x314")
int BPF_KPROBE(do_switch_258)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x319")
int BPF_KPROBE(do_switch_259)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x34d")
int BPF_KPROBE(do_switch_260)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x352")
int BPF_KPROBE(do_switch_261)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x387")
int BPF_KPROBE(do_switch_262)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x38c")
int BPF_KPROBE(do_switch_263)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x442")
int BPF_KPROBE(do_switch_264)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sch_fragment+0x447")
int BPF_KPROBE(do_switch_265)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_class_hash_insert+0x7")
int BPF_KPROBE(do_mov_slab_203)
{
    u64 addr = ctx->si + 0x8;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_class_hash_insert+0x13")
int BPF_KPROBE(do_mov_slab_204)
{
    u64 addr = ctx->si + 0x10;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_class_hash_insert+0x3a")
int BPF_KPROBE(do_mov_general_205)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_insert+0x43")
int BPF_KPROBE(do_mov_general_206)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_insert+0x47")
int BPF_KPROBE(do_mov_slab_207)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_class_hash_insert+0x4b")
int BPF_KPROBE(do_mov_general_208)
{
    u64 addr = ctx->si + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_remove+0xe")
int BPF_KPROBE(do_mov_slab_209)
{
    u64 addr = ctx->dx;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_class_hash_remove+0x19")
int BPF_KPROBE(do_mov_general_210)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_remove+0x28")
int BPF_KPROBE(do_mov_general_211)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_remove+0x30")
int BPF_KPROBE(do_mov_general_212)
{
    u64 addr = ctx->si + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/register_qdisc+0xbc")
int BPF_KPROBE(do_mov_general_213)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/register_qdisc+0xc4")
int BPF_KPROBE(do_mov_general_214)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/register_qdisc+0xd8")
int BPF_KPROBE(do_mov_general_215)
{
    u64 addr = ctx->r12 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/register_qdisc+0xe4")
int BPF_KPROBE(do_mov_general_216)
{
    u64 addr = ctx->r12 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/register_qdisc+0xf8")
int BPF_KPROBE(do_mov_general_217)
{
    u64 addr = ctx->r12 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/__qdisc_calculate_pkt_len+0x43")
int BPF_KPROBE(do_mov_general_218)
{
    u64 addr = ctx->di + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_offload_graft_helper+0x96")
int BPF_KPROBE(do_mov_general_219)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_watchdog_init_clockid+0x1d")
int BPF_KPROBE(do_switch_280)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_watchdog_init_clockid+0x22")
int BPF_KPROBE(do_switch_281)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_watchdog_init_clockid+0x22")
int BPF_KPROBE(do_mov_general_220)
{
    u64 addr = ctx->bx + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_watchdog_init_clockid+0x26")
int BPF_KPROBE(do_mov_general_221)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_watchdog_init+0x20")
int BPF_KPROBE(do_switch_282)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_watchdog_init+0x25")
int BPF_KPROBE(do_switch_283)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_watchdog_init+0x25")
int BPF_KPROBE(do_mov_general_222)
{
    u64 addr = ctx->bx + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_watchdog_init+0x29")
int BPF_KPROBE(do_mov_general_223)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_watchdog+0x1e")
int BPF_KPROBE(do_switch_285)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_watchdog+0x23")
int BPF_KPROBE(do_switch_286)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_watchdog_cancel+0xd")
int BPF_KPROBE(do_switch_288)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_watchdog_cancel+0x12")
int BPF_KPROBE(do_switch_289)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_tclass_qdisc+0x2a")
int BPF_KPROBE(do_mov_general_224)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_tclass_qdisc+0xa6")
int BPF_KPROBE(do_mov_general_225)
{
    u64 addr = ctx->cx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_tclass_qdisc+0xb9")
int BPF_KPROBE(do_mov_general_226)
{
    u64 addr = ctx->cx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_tclass_qdisc+0xc3")
int BPF_KPROBE(do_mov_general_227)
{
    u64 addr = ctx->cx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_tclass_qdisc+0xcb")
int BPF_KPROBE(do_mov_general_228)
{
    u64 addr = ctx->cx + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_tclass_qdisc+0xd3")
int BPF_KPROBE(do_mov_general_229)
{
    u64 addr = ctx->cx + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_tclass_qdisc+0xdb")
int BPF_KPROBE(do_mov_general_230)
{
    u64 addr = ctx->cx + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_lookup_ops+0x53")
int BPF_KPROBE(do_switch_305)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_lookup_ops+0x58")
int BPF_KPROBE(do_switch_306)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/unregister_qdisc+0x71")
int BPF_KPROBE(do_mov_general_231)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/unregister_qdisc+0x74")
int BPF_KPROBE(do_mov_general_232)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_hash_add+0x53")
int BPF_KPROBE(do_mov_general_233)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_hash_add+0x57")
int BPF_KPROBE(do_mov_general_234)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_hash_add+0x5b")
int BPF_KPROBE(do_mov_general_235)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_hash_add+0x63")
int BPF_KPROBE(do_mov_general_236)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_hash_del+0x35")
int BPF_KPROBE(do_mov_slab_237)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_hash_del+0x3d")
int BPF_KPROBE(do_mov_general_238)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_hash_del+0x41")
int BPF_KPROBE(do_mov_general_239)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_put_rtab+0x54")
int BPF_KPROBE(do_mov_general_240)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_put_stab+0x1c")
int BPF_KPROBE(do_mov_general_241)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_put_stab+0x20")
int BPF_KPROBE(do_mov_general_242)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_put_stab+0x30")
int BPF_KPROBE(do_mov_general_243)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_put_stab+0x38")
int BPF_KPROBE(do_mov_general_244)
{
    u64 addr = ctx->di + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_watchdog_schedule_range_ns+0x39")
int BPF_KPROBE(do_mov_general_245)
{
    u64 addr = ctx->di - 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_watchdog_schedule_range_ns+0x40")
int BPF_KPROBE(do_switch_321)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_watchdog_schedule_range_ns+0x45")
int BPF_KPROBE(do_switch_322)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_tclass+0x6b")
int BPF_KPROBE(do_switch_327)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_tclass+0x70")
int BPF_KPROBE(do_switch_328)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_tclass+0xd6")
int BPF_KPROBE(do_mov_general_246)
{
    u64 addr = ctx->bx + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x9f")
int BPF_KPROBE(do_mov_general_247)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x13b")
int BPF_KPROBE(do_switch_334)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x13b")
int BPF_KPROBE(do_hotbpf_334)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/qdisc_get_stab+0x140")
int BPF_KPROBE(do_switch_335)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x14c")
int BPF_KPROBE(do_mov_general_248)
{
    u64 addr = ctx->ax + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x15b")
int BPF_KPROBE(do_mov_general_249)
{
    u64 addr = ctx->r12 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x164")
int BPF_KPROBE(do_mov_general_250)
{
    u64 addr = ctx->r12 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x16d")
int BPF_KPROBE(do_mov_general_251)
{
    u64 addr = ctx->r12 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x190")
int BPF_KPROBE(do_mov_general_252)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x1a0")
int BPF_KPROBE(do_mov_general_253)
{
    u64 addr = ctx->r12 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x1a5")
int BPF_KPROBE(do_mov_general_254)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x228")
int BPF_KPROBE(do_mov_general_255)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x24c")
int BPF_KPROBE(do_mov_general_256)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_stab+0x270")
int BPF_KPROBE(do_mov_general_257)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0xa8")
int BPF_KPROBE(do_mov_general_258)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0xd1")
int BPF_KPROBE(do_switch_344)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0xd1")
int BPF_KPROBE(do_hotbpf_344)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/qdisc_get_rtab+0xd6")
int BPF_KPROBE(do_switch_345)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0xef")
int BPF_KPROBE(do_mov_general_259)
{
    u64 addr = ctx->r12 + 0x418;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0x103")
int BPF_KPROBE(do_mov_general_260)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0x10a")
int BPF_KPROBE(do_mov_general_261)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0x113")
int BPF_KPROBE(do_mov_general_262)
{
    u64 addr = ctx->r12 + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0x11f")
int BPF_KPROBE(do_mov_general_263)
{
    u64 addr = ctx->r12 + 0x404;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0x13d")
int BPF_KPROBE(do_mov_general_264)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0x154")
int BPF_KPROBE(do_mov_general_265)
{
    u64 addr = ctx->r12 + 0x410;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0x1d8")
int BPF_KPROBE(do_mov_general_266)
{
    u64 addr = ctx->bx + 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_get_rtab+0x23e")
int BPF_KPROBE(do_mov_general_267)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_init+0x1c")
int BPF_KPROBE(do_switch_347)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_class_hash_init+0x21")
int BPF_KPROBE(do_switch_348)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_class_hash_init+0x26")
int BPF_KPROBE(do_mov_general_268)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_init+0x2d")
int BPF_KPROBE(do_mov_slab_269)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_class_hash_init+0x34")
int BPF_KPROBE(do_mov_slab_270)
{
    u64 addr = ctx->ax + 0x8;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_class_hash_init+0x3c")
int BPF_KPROBE(do_mov_general_271)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_init+0x44")
int BPF_KPROBE(do_mov_slab_272)
{
    u64 addr = ctx->ax + 0x18;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_class_hash_init+0x4c")
int BPF_KPROBE(do_mov_slab_273)
{
    u64 addr = ctx->bx;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_class_hash_init+0x59")
int BPF_KPROBE(do_mov_slab_274)
{
    u64 addr = ctx->bx + 0x8;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_class_hash_init+0x65")
int BPF_KPROBE(do_mov_general_275)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0xa4")
int BPF_KPROBE(do_mov_general_276)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0xbd")
int BPF_KPROBE(do_mov_general_277)
{
    u64 addr = ctx->bx + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0xc1")
int BPF_KPROBE(do_mov_slab_278)
{
    u64 addr = ctx->bx + 0x14;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0xc8")
int BPF_KPROBE(do_mov_general_279)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0xcf")
int BPF_KPROBE(do_mov_slab_280)
{
    u64 addr = ctx->bx + 0x20;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x232")
int BPF_KPROBE(do_mov_general_281)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x261")
int BPF_KPROBE(do_switch_359)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x266")
int BPF_KPROBE(do_switch_360)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x2b6")
int BPF_KPROBE(do_switch_362)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x2bb")
int BPF_KPROBE(do_switch_363)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x2ce")
int BPF_KPROBE(do_switch_364)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x2d3")
int BPF_KPROBE(do_switch_365)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x2ef")
int BPF_KPROBE(do_switch_366)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x2f4")
int BPF_KPROBE(do_switch_367)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x303")
int BPF_KPROBE(do_switch_368)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x308")
int BPF_KPROBE(do_switch_369)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_qdisc+0x327")
int BPF_KPROBE(do_mov_slab_282)
{
    u64 addr = ctx->bx;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_dump_qdisc_root+0x17e")
int BPF_KPROBE(do_mov_general_283)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_notify.isra.0+0x43")
int BPF_KPROBE(do_switch_377)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_notify.isra.0+0x48")
int BPF_KPROBE(do_switch_378)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_notify.isra.0+0x8b")
int BPF_KPROBE(do_switch_379)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_notify.isra.0+0x90")
int BPF_KPROBE(do_switch_380)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_qdisc+0x16a")
int BPF_KPROBE(do_mov_general_284)
{
    u64 addr = ctx->r12 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_qdisc+0x16f")
int BPF_KPROBE(do_mov_general_285)
{
    u64 addr = ctx->r12 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_qdisc+0x1f2")
int BPF_KPROBE(do_mov_general_286)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_grow+0x57")
int BPF_KPROBE(do_switch_400)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_class_hash_grow+0x5c")
int BPF_KPROBE(do_switch_401)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_class_hash_grow+0xeb")
int BPF_KPROBE(do_mov_general_287)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_grow+0xf4")
int BPF_KPROBE(do_mov_general_288)
{
    u64 addr = ctx->r10 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_grow+0xf8")
int BPF_KPROBE(do_mov_slab_289)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_class_hash_grow+0xfb")
int BPF_KPROBE(do_mov_general_290)
{
    u64 addr = ctx->dx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_grow+0x10d")
int BPF_KPROBE(do_mov_slab_291)
{
    u64 addr = ctx->r14;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/qdisc_class_hash_grow+0x110")
int BPF_KPROBE(do_mov_general_292)
{
    u64 addr = ctx->r14 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_class_hash_grow+0x114")
int BPF_KPROBE(do_mov_general_293)
{
    u64 addr = ctx->r14 + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/tc_fill_tclass+0xb7")
int BPF_KPROBE(do_mov_general_294)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tc_fill_tclass+0xd7")
int BPF_KPROBE(do_mov_general_295)
{
    u64 addr = ctx->bx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_fill_tclass+0xde")
int BPF_KPROBE(do_mov_slab_296)
{
    u64 addr = ctx->bx + 0x20;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_fill_tclass+0xe5")
int BPF_KPROBE(do_mov_general_297)
{
    u64 addr = ctx->bx + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/tc_fill_tclass+0xe8")
int BPF_KPROBE(do_mov_general_298)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tc_fill_tclass+0x172")
int BPF_KPROBE(do_switch_416)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_tclass+0x177")
int BPF_KPROBE(do_switch_417)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_tclass+0x19f")
int BPF_KPROBE(do_switch_419)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_tclass+0x1a4")
int BPF_KPROBE(do_switch_420)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_fill_tclass+0x1bf")
int BPF_KPROBE(do_mov_slab_299)
{
    u64 addr = ctx->bx;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tclass_notify.constprop.0+0x40")
int BPF_KPROBE(do_switch_424)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tclass_notify.constprop.0+0x45")
int BPF_KPROBE(do_switch_425)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tclass_notify.constprop.0+0x84")
int BPF_KPROBE(do_switch_427)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tclass_notify.constprop.0+0x89")
int BPF_KPROBE(do_switch_428)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_graft+0x2cb")
int BPF_KPROBE(do_mov_general_300)
{
    u64 addr = ctx->r9 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_graft+0x2f6")
int BPF_KPROBE(do_mov_general_301)
{
    u64 addr = ctx->r13 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_graft+0x2fe")
int BPF_KPROBE(do_mov_general_302)
{
    u64 addr = ctx->r13 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_graft+0x384")
int BPF_KPROBE(do_mov_general_303)
{
    u64 addr = ctx->r15 + 0x410;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_graft+0x53a")
int BPF_KPROBE(do_mov_general_304)
{
    u64 addr = ctx->r8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_graft+0x565")
int BPF_KPROBE(do_mov_general_305)
{
    u64 addr = ctx->r8;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_create+0x8c")
int BPF_KPROBE(do_mov_general_306)
{
    u64 addr = ctx->r12 + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_create+0xb2")
int BPF_KPROBE(do_mov_general_307)
{
    u64 addr = ctx->r12 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_create+0x21e")
int BPF_KPROBE(do_mov_general_308)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_create+0x230")
int BPF_KPROBE(do_mov_general_309)
{
    u64 addr = ctx->r12 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_create+0x2d7")
int BPF_KPROBE(do_mov_general_310)
{
    u64 addr = ctx->r12 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_create+0x3bf")
int BPF_KPROBE(do_switch_468)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_create+0x3c4")
int BPF_KPROBE(do_switch_469)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_create+0x3e1")
int BPF_KPROBE(do_switch_472)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_create+0x3e6")
int BPF_KPROBE(do_switch_473)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_create+0x43a")
int BPF_KPROBE(do_mov_general_311)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_tclass+0x85")
int BPF_KPROBE(do_switch_477)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_ctl_tclass+0x8a")
int BPF_KPROBE(do_switch_478)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_ctl_tclass+0x413")
int BPF_KPROBE(do_switch_486)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_ctl_tclass+0x418")
int BPF_KPROBE(do_switch_487)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_ctl_tclass+0x4b1")
int BPF_KPROBE(do_switch_490)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_ctl_tclass+0x4b6")
int BPF_KPROBE(do_switch_491)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_ctl_tclass+0x541")
int BPF_KPROBE(do_mov_general_312)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_tclass+0x565")
int BPF_KPROBE(do_mov_general_313)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_qdisc+0x76")
int BPF_KPROBE(do_switch_499)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_get_qdisc+0x7b")
int BPF_KPROBE(do_switch_500)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_get_qdisc+0xf6")
int BPF_KPROBE(do_mov_general_314)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_qdisc+0x298")
int BPF_KPROBE(do_mov_general_315)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_qdisc+0x310")
int BPF_KPROBE(do_mov_general_316)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_qdisc+0x332")
int BPF_KPROBE(do_mov_general_317)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_qdisc+0x354")
int BPF_KPROBE(do_mov_general_318)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_qdisc+0x380")
int BPF_KPROBE(do_mov_general_319)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_qdisc+0x3a2")
int BPF_KPROBE(do_mov_general_320)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_qdisc+0x3c8")
int BPF_KPROBE(do_mov_general_321)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0xa2")
int BPF_KPROBE(do_switch_519)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0xa7")
int BPF_KPROBE(do_switch_520)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x1bf")
int BPF_KPROBE(do_mov_general_322)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x39b")
int BPF_KPROBE(do_mov_general_323)
{
    u64 addr = ctx->r10 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x3e8")
int BPF_KPROBE(do_switch_532)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x3ed")
int BPF_KPROBE(do_switch_533)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x47b")
int BPF_KPROBE(do_switch_536)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x480")
int BPF_KPROBE(do_switch_537)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x4d7")
int BPF_KPROBE(do_mov_general_324)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x52f")
int BPF_KPROBE(do_mov_general_325)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x56b")
int BPF_KPROBE(do_mov_general_326)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x60f")
int BPF_KPROBE(do_mov_general_327)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x6c4")
int BPF_KPROBE(do_mov_general_328)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x6e6")
int BPF_KPROBE(do_mov_general_329)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x72c")
int BPF_KPROBE(do_mov_general_330)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x752")
int BPF_KPROBE(do_mov_general_331)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x777")
int BPF_KPROBE(do_mov_general_332)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x77b")
int BPF_KPROBE(do_mov_general_333)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x788")
int BPF_KPROBE(do_mov_general_334)
{
    u64 addr = ctx->r8 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x790")
int BPF_KPROBE(do_mov_general_335)
{
    u64 addr = ctx->r8 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x7b6")
int BPF_KPROBE(do_mov_general_336)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x7f4")
int BPF_KPROBE(do_mov_general_337)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x82e")
int BPF_KPROBE(do_mov_general_338)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x854")
int BPF_KPROBE(do_mov_general_339)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x87a")
int BPF_KPROBE(do_mov_general_340)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tc_modify_qdisc+0x8a5")
int BPF_KPROBE(do_mov_general_341)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/qdisc_set_default+0x5a")
int BPF_KPROBE(do_switch_570)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_set_default+0x5f")
int BPF_KPROBE(do_switch_571)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_set_default+0x71")
int BPF_KPROBE(do_switch_572)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_set_default+0x76")
int BPF_KPROBE(do_switch_573)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_set_default+0xab")
int BPF_KPROBE(do_switch_576)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_set_default+0xb0")
int BPF_KPROBE(do_switch_577)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_set_default+0xe9")
int BPF_KPROBE(do_switch_580)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qdisc_set_default+0xee")
int BPF_KPROBE(do_switch_581)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/blackhole_enqueue+0x9")
int BPF_KPROBE(do_mov_general_342)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/blackhole_enqueue+0x14")
int BPF_KPROBE(do_mov_general_343)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_head_change_dflt+0x9")
int BPF_KPROBE(do_mov_slab_344)
{
    u64 addr = ctx->si;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_cls_offload_cnt_update+0x40")
int BPF_KPROBE(do_mov_general_345)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_cls_offload_cnt_update+0x5c")
int BPF_KPROBE(do_mov_general_346)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_cls_offload_cnt_update+0x6a")
int BPF_KPROBE(do_mov_general_347)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_cls_offload_cnt_update+0x89")
int BPF_KPROBE(do_mov_general_348)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/register_tcf_proto_ops+0x70")
int BPF_KPROBE(do_mov_general_350)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/unregister_tcf_proto_ops+0xd")
int BPF_KPROBE(do_switch_596)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/unregister_tcf_proto_ops+0x12")
int BPF_KPROBE(do_switch_597)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/unregister_tcf_proto_ops+0x19")
int BPF_KPROBE(do_switch_598)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/unregister_tcf_proto_ops+0x1e")
int BPF_KPROBE(do_switch_599)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/unregister_tcf_proto_ops+0x91")
int BPF_KPROBE(do_mov_general_352)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/unregister_tcf_proto_ops+0x95")
int BPF_KPROBE(do_mov_general_353)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/unregister_tcf_proto_ops+0xa2")
int BPF_KPROBE(do_mov_general_354)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/unregister_tcf_proto_ops+0xa5")
int BPF_KPROBE(do_mov_general_355)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_queue_work+0x10")
int BPF_KPROBE(do_mov_slab_356)
{
    u64 addr = ctx->di;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_queue_work+0x17")
int BPF_KPROBE(do_mov_slab_357)
{
    u64 addr = ctx->di + 0x8;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_queue_work+0x1b")
int BPF_KPROBE(do_mov_slab_358)
{
    u64 addr = ctx->di + 0x18;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_queue_work+0x25")
int BPF_KPROBE(do_mov_general_359)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_queue_work+0x30")
int BPF_KPROBE(do_switch_604)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_queue_work+0x35")
int BPF_KPROBE(do_switch_605)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__tcf_get_next_chain+0x58")
int BPF_KPROBE(do_mov_general_360)
{
    u64 addr = ctx->r12 + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_net_init+0x35")
int BPF_KPROBE(do_mov_general_361)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_net_init+0x3b")
int BPF_KPROBE(do_mov_general_362)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_net_init+0x41")
int BPF_KPROBE(do_mov_general_363)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_net_init+0x49")
int BPF_KPROBE(do_mov_general_364)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain0_head_change_cb_del+0x7b")
int BPF_KPROBE(do_mov_general_365)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain0_head_change_cb_del+0x7f")
int BPF_KPROBE(do_mov_slab_366)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_chain0_head_change_cb_del+0x8c")
int BPF_KPROBE(do_mov_slab_367)
{
    u64 addr = ctx->r12;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_chain0_head_change_cb_del+0x94")
int BPF_KPROBE(do_mov_general_368)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_owner_del+0x37")
int BPF_KPROBE(do_mov_general_369)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_owner_del+0x3e")
int BPF_KPROBE(do_mov_slab_370)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_block_owner_del+0x4b")
int BPF_KPROBE(do_mov_slab_371)
{
    u64 addr = ctx->di;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_block_owner_del+0x52")
int BPF_KPROBE(do_mov_general_372)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_exts_destroy+0x29")
int BPF_KPROBE(do_mov_general_373)
{
    u64 addr = ctx->bx + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_exts_validate_ex+0xf4")
int BPF_KPROBE(do_switch_622)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_exts_validate_ex+0xf9")
int BPF_KPROBE(do_switch_623)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_exts_validate_ex+0x107")
int BPF_KPROBE(do_mov_general_374)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_exts_validate_ex+0x10d")
int BPF_KPROBE(do_mov_general_375)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_exts_validate_ex+0x11a")
int BPF_KPROBE(do_mov_general_376)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_exts_validate_ex+0x121")
int BPF_KPROBE(do_mov_general_377)
{
    u64 addr = ctx->bx + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_exts_validate_ex+0x18f")
int BPF_KPROBE(do_mov_general_378)
{
    u64 addr = ctx->bx + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/tc_cleanup_offload_action+0x21")
int BPF_KPROBE(do_switch_629)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_cleanup_offload_action+0x26")
int BPF_KPROBE(do_switch_630)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__tcf_proto_lookup_ops+0x53")
int BPF_KPROBE(do_switch_634)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__tcf_proto_lookup_ops+0x58")
int BPF_KPROBE(do_switch_635)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_proto_lookup_ops+0x3a")
int BPF_KPROBE(do_switch_641)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_proto_lookup_ops+0x3f")
int BPF_KPROBE(do_switch_642)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_proto_lookup_ops+0x53")
int BPF_KPROBE(do_switch_644)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_proto_lookup_ops+0x58")
int BPF_KPROBE(do_switch_645)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_proto_lookup_ops+0x81")
int BPF_KPROBE(do_mov_general_379)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_proto_lookup_ops+0xa1")
int BPF_KPROBE(do_switch_648)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_proto_lookup_ops+0xa6")
int BPF_KPROBE(do_switch_649)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_proto_is_unlocked+0x47")
int BPF_KPROBE(do_switch_653)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_proto_is_unlocked+0x4c")
int BPF_KPROBE(do_switch_654)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_classify+0x111")
int BPF_KPROBE(do_switch_656)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_classify+0x116")
int BPF_KPROBE(do_switch_657)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_classify+0x219")
int BPF_KPROBE(do_switch_658)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_classify+0x21e")
int BPF_KPROBE(do_switch_659)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_qevent_handle+0x8a")
int BPF_KPROBE(do_mov_general_380)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_handle+0x8e")
int BPF_KPROBE(do_mov_general_381)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_handle+0x94")
int BPF_KPROBE(do_mov_general_382)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_handle+0xa6")
int BPF_KPROBE(do_mov_general_383)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_handle+0xaa")
int BPF_KPROBE(do_mov_general_384)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_handle+0xb0")
int BPF_KPROBE(do_mov_general_385)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_handle+0xd1")
int BPF_KPROBE(do_switch_661)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_qevent_handle+0xd6")
int BPF_KPROBE(do_switch_662)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_qevent_handle+0xd6")
int BPF_KPROBE(do_mov_general_386)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_proto_signal_destroying.isra.0+0x4f")
int BPF_KPROBE(do_mov_general_387)
{
    u64 addr = ctx->bx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_proto_signal_destroying.isra.0+0x53")
int BPF_KPROBE(do_mov_general_388)
{
    u64 addr = ctx->bx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_proto_signal_destroying.isra.0+0x57")
int BPF_KPROBE(do_mov_general_389)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_proto_signal_destroying.isra.0+0x5f")
int BPF_KPROBE(do_mov_general_390)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_create+0x25")
int BPF_KPROBE(do_switch_669)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_chain_create+0x25")
int BPF_KPROBE(do_hotbpf_669)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/tcf_chain_create+0x2a")
int BPF_KPROBE(do_switch_670)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_chain_create+0x3e")
int BPF_KPROBE(do_mov_general_391)
{
    u64 addr = ctx->r12 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_create+0x43")
int BPF_KPROBE(do_mov_general_392)
{
    u64 addr = ctx->r12 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_create+0x48")
int BPF_KPROBE(do_mov_general_393)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_create+0x5c")
int BPF_KPROBE(do_mov_general_394)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_create+0x65")
int BPF_KPROBE(do_mov_slab_395)
{
    u64 addr = ctx->r12 + 0x38;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_chain_create+0x6a")
int BPF_KPROBE(do_mov_general_396)
{
    u64 addr = ctx->r12 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_create+0x6f")
int BPF_KPROBE(do_mov_slab_397)
{
    u64 addr = ctx->r12 + 0x44;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_chain_create+0x7d")
int BPF_KPROBE(do_mov_general_398)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_netif_keep_dst+0x14")
int BPF_KPROBE(do_mov_general_399)
{
    u64 addr = ctx->di + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_validate_change+0x3e")
int BPF_KPROBE(do_mov_general_400)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_validate_change+0x65")
int BPF_KPROBE(do_mov_general_401)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x52")
int BPF_KPROBE(do_switch_674)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x57")
int BPF_KPROBE(do_switch_675)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0xa4")
int BPF_KPROBE(do_mov_general_402)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0xb8")
int BPF_KPROBE(do_mov_general_403)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x159")
int BPF_KPROBE(do_switch_681)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x15e")
int BPF_KPROBE(do_switch_682)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x17a")
int BPF_KPROBE(do_switch_683)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x17f")
int BPF_KPROBE(do_switch_684)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x188")
int BPF_KPROBE(do_switch_686)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x18d")
int BPF_KPROBE(do_switch_687)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x1b3")
int BPF_KPROBE(do_switch_688)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x1b8")
int BPF_KPROBE(do_switch_689)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x1f5")
int BPF_KPROBE(do_switch_692)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x1fa")
int BPF_KPROBE(do_switch_693)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x210")
int BPF_KPROBE(do_switch_694)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_replace+0x215")
int BPF_KPROBE(do_switch_695)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_exts_dump+0xee")
int BPF_KPROBE(do_mov_general_404)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_exts_change+0x12")
int BPF_KPROBE(do_mov_general_405)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_exts_change+0x19")
int BPF_KPROBE(do_mov_general_406)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_exts_change+0x21")
int BPF_KPROBE(do_mov_general_407)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_exts_change+0x29")
int BPF_KPROBE(do_mov_general_408)
{
    u64 addr = ctx->di + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_tp_find+0x46")
int BPF_KPROBE(do_mov_stk_409)
{
    u64 addr = bpf_get_slab_start(ctx->r9);
    u64 *pv = bpf_map_lookup_elem(&buddy_objs, &addr);
    if (pv) {}
    else {
        if (ML_enable) {
            u64 val = 1;
            bpf_map_update_elem(&ml_record, &addr, &val, BPF_ANY);
        } else { /* error happens */ }
    }
    return 0;
}


SEC("kprobe/tcf_chain_tp_find+0x4c")
int BPF_KPROBE(do_mov_stk_410)
{
    u64 addr = bpf_get_slab_start(ctx->r9 + 0x8);
    u64 *pv = bpf_map_lookup_elem(&buddy_objs, &addr);
    if (pv) {}
    else {
        if (ML_enable) {
            u64 val = 1;
            bpf_map_update_elem(&ml_record, &addr, &val, BPF_ANY);
        } else { /* error happens */ }
    }
    return 0;
}


SEC("kprobe/tcf_chain_tp_find+0x67")
int BPF_KPROBE(do_mov_general_411)
{
    u64 addr = ctx->r9;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_tp_find+0x6c")
int BPF_KPROBE(do_mov_general_412)
{
    u64 addr = ctx->r9 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/__tcf_block_find+0x6d")
int BPF_KPROBE(do_mov_general_413)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/__tcf_block_find+0x98")
int BPF_KPROBE(do_mov_general_414)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0x44")
int BPF_KPROBE(do_switch_730)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0x49")
int BPF_KPROBE(do_switch_731)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0xb4")
int BPF_KPROBE(do_switch_733)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0xb9")
int BPF_KPROBE(do_switch_734)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0xd5")
int BPF_KPROBE(do_switch_735)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0xda")
int BPF_KPROBE(do_switch_736)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0xe7")
int BPF_KPROBE(do_switch_738)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0xec")
int BPF_KPROBE(do_switch_739)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0x107")
int BPF_KPROBE(do_switch_740)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0x10c")
int BPF_KPROBE(do_switch_741)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0x11f")
int BPF_KPROBE(do_switch_743)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_call+0x124")
int BPF_KPROBE(do_switch_744)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_chain_fill_node+0x95")
int BPF_KPROBE(do_mov_general_415)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tc_chain_fill_node+0x9c")
int BPF_KPROBE(do_mov_general_416)
{
    u64 addr = ctx->ax + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tc_chain_fill_node+0xbd")
int BPF_KPROBE(do_mov_general_417)
{
    u64 addr = ctx->r14 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_chain_fill_node+0xc8")
int BPF_KPROBE(do_mov_slab_418)
{
    u64 addr = ctx->r14 + 0x1c;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_chain_fill_node+0x158")
int BPF_KPROBE(do_mov_slab_419)
{
    u64 addr = ctx->r14;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_chain_fill_node+0x1a9")
int BPF_KPROBE(do_mov_general_420)
{
    u64 addr = ctx->r14 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_chain_notify+0x50")
int BPF_KPROBE(do_switch_752)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_chain_notify+0x55")
int BPF_KPROBE(do_switch_753)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_chain_notify+0xa9")
int BPF_KPROBE(do_switch_755)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_chain_notify+0xae")
int BPF_KPROBE(do_switch_756)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_chain_notify+0xc6")
int BPF_KPROBE(do_switch_757)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_chain_notify+0xcb")
int BPF_KPROBE(do_switch_758)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__tcf_chain_get+0xa4")
int BPF_KPROBE(do_mov_general_421)
{
    u64 addr = ctx->r12 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x3a")
int BPF_KPROBE(do_mov_general_422)
{
    u64 addr = ctx->bx + 0x4c;
    check(addr);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x59")
int BPF_KPROBE(do_mov_general_423)
{
    u64 addr = ctx->bx + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x7b")
int BPF_KPROBE(do_mov_general_424)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x7f")
int BPF_KPROBE(do_mov_slab_425)
{
    u64 addr = ctx->dx;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x8f")
int BPF_KPROBE(do_mov_slab_426)
{
    u64 addr = ctx->bx + 0x30;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/__tcf_chain_put+0xd5")
int BPF_KPROBE(do_switch_770)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0xda")
int BPF_KPROBE(do_switch_771)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x128")
int BPF_KPROBE(do_mov_general_427)
{
    u64 addr = ctx->bx + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x12c")
int BPF_KPROBE(do_mov_general_428)
{
    u64 addr = ctx->bx + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x134")
int BPF_KPROBE(do_mov_general_429)
{
    u64 addr = ctx->ax + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x169")
int BPF_KPROBE(do_switch_775)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x16e")
int BPF_KPROBE(do_switch_776)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x1bb")
int BPF_KPROBE(do_switch_778)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x1c0")
int BPF_KPROBE(do_switch_779)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__tcf_chain_put+0x1c4")
int BPF_KPROBE(do_mov_general_430)
{
    u64 addr = ctx->bx + 0x4d;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_proto_destroy+0x3d")
int BPF_KPROBE(do_switch_786)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_proto_destroy+0x42")
int BPF_KPROBE(do_switch_787)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_proto_destroy+0x7e")
int BPF_KPROBE(do_mov_slab_431)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_proto_destroy+0x86")
int BPF_KPROBE(do_mov_general_432)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_proto_destroy+0x8a")
int BPF_KPROBE(do_mov_general_433)
{
    u64 addr = ctx->bx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_flush+0x44")
int BPF_KPROBE(do_mov_general_434)
{
    u64 addr = ctx->r12 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_flush+0x57")
int BPF_KPROBE(do_mov_general_435)
{
    u64 addr = ctx->r12 + 0x4d;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_flush+0x8a")
int BPF_KPROBE(do_mov_general_436)
{
    u64 addr = ctx->r12 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_flush+0xa4")
int BPF_KPROBE(do_mov_general_437)
{
    u64 addr = ctx->r12 + 0x4d;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_tp_delete_empty+0x9e")
int BPF_KPROBE(do_mov_general_438)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_tp_delete_empty+0xc4")
int BPF_KPROBE(do_mov_general_439)
{
    u64 addr = ctx->r15 + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_playback_offloads+0xda")
int BPF_KPROBE(do_mov_general_440)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_unbind+0x83")
int BPF_KPROBE(do_mov_general_441)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_unbind+0x87")
int BPF_KPROBE(do_mov_general_442)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_unbind+0x94")
int BPF_KPROBE(do_mov_general_443)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_unbind+0x99")
int BPF_KPROBE(do_mov_general_444)
{
    u64 addr = ctx->r12 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_unbind+0x9e")
int BPF_KPROBE(do_switch_821)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_unbind+0xa3")
int BPF_KPROBE(do_switch_822)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_block_indr_cleanup+0xbf")
int BPF_KPROBE(do_switch_824)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_block_indr_cleanup+0xc4")
int BPF_KPROBE(do_switch_825)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_block_indr_cleanup+0xd5")
int BPF_KPROBE(do_mov_general_445)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tc_block_indr_cleanup+0xd9")
int BPF_KPROBE(do_mov_general_446)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tc_block_indr_cleanup+0xee")
int BPF_KPROBE(do_mov_general_447)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_block_indr_cleanup+0xf5")
int BPF_KPROBE(do_mov_general_448)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tc_block_indr_cleanup+0xfd")
int BPF_KPROBE(do_mov_general_449)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tc_block_indr_cleanup+0x101")
int BPF_KPROBE(do_mov_general_450)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_block_indr_cleanup+0x10b")
int BPF_KPROBE(do_mov_general_451)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tc_block_indr_cleanup+0x10f")
int BPF_KPROBE(do_mov_general_452)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tc_block_indr_cleanup+0x113")
int BPF_KPROBE(do_mov_general_453)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_setup+0xee")
int BPF_KPROBE(do_switch_831)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_setup+0xf3")
int BPF_KPROBE(do_switch_832)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_setup+0x120")
int BPF_KPROBE(do_mov_general_454)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_setup+0x124")
int BPF_KPROBE(do_mov_general_455)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_setup+0x135")
int BPF_KPROBE(do_mov_general_456)
{
    u64 addr = ctx->r14 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_setup+0x141")
int BPF_KPROBE(do_mov_general_457)
{
    u64 addr = ctx->r14 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_setup+0x1aa")
int BPF_KPROBE(do_mov_general_458)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_setup+0x1ae")
int BPF_KPROBE(do_mov_general_459)
{
    u64 addr = ctx->r12 + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_setup+0x1b3")
int BPF_KPROBE(do_mov_general_460)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_setup+0x1b6")
int BPF_KPROBE(do_mov_general_461)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_offload_cmd.isra.0+0xd4")
int BPF_KPROBE(do_mov_general_462)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_offload_cmd.isra.0+0x101")
int BPF_KPROBE(do_switch_838)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_offload_cmd.isra.0+0x106")
int BPF_KPROBE(do_switch_839)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_offload_unbind+0x29")
int BPF_KPROBE(do_switch_842)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_offload_unbind+0x2e")
int BPF_KPROBE(do_switch_843)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_offload_unbind+0x6a")
int BPF_KPROBE(do_mov_general_463)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x6a")
int BPF_KPROBE(do_switch_862)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x6a")
int BPF_KPROBE(do_hotbpf_862)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/tcf_block_get_ext+0x6f")
int BPF_KPROBE(do_switch_863)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x78")
int BPF_KPROBE(do_mov_general_464)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x7c")
int BPF_KPROBE(do_mov_general_465)
{
    u64 addr = ctx->ax + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x87")
int BPF_KPROBE(do_mov_general_466)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x8b")
int BPF_KPROBE(do_mov_slab_467)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x95")
int BPF_KPROBE(do_mov_general_468)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0xa1")
int BPF_KPROBE(do_mov_general_469)
{
    u64 addr = ctx->r13 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0xbf")
int BPF_KPROBE(do_switch_864)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0xbf")
int BPF_KPROBE(do_hotbpf_864)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/tcf_block_get_ext+0xc4")
int BPF_KPROBE(do_switch_865)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0xd7")
int BPF_KPROBE(do_mov_general_470)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0xdf")
int BPF_KPROBE(do_mov_general_471)
{
    u64 addr = ctx->ax + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x146")
int BPF_KPROBE(do_mov_general_472)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x14a")
int BPF_KPROBE(do_mov_general_473)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x14d")
int BPF_KPROBE(do_mov_general_474)
{
    u64 addr = ctx->r15 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x151")
int BPF_KPROBE(do_mov_general_475)
{
    u64 addr = ctx->r13 + 0xb0;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x180")
int BPF_KPROBE(do_switch_874)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x185")
int BPF_KPROBE(do_switch_875)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x214")
int BPF_KPROBE(do_switch_880)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x214")
int BPF_KPROBE(do_hotbpf_880)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/tcf_block_get_ext+0x219")
int BPF_KPROBE(do_switch_881)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x270")
int BPF_KPROBE(do_mov_general_476)
{
    u64 addr = ctx->r13 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x274")
int BPF_KPROBE(do_mov_general_477)
{
    u64 addr = ctx->r13 + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x278")
int BPF_KPROBE(do_mov_general_478)
{
    u64 addr = ctx->r13 + 0x80;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x283")
int BPF_KPROBE(do_mov_slab_479)
{
    u64 addr = ctx->r13 + 0x20;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x287")
int BPF_KPROBE(do_mov_general_480)
{
    u64 addr = ctx->r13 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x292")
int BPF_KPROBE(do_mov_general_481)
{
    u64 addr = ctx->r13 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x299")
int BPF_KPROBE(do_mov_general_482)
{
    u64 addr = ctx->r13 + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x2a7")
int BPF_KPROBE(do_mov_general_483)
{
    u64 addr = ctx->r13 + 0xb0;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x2ae")
int BPF_KPROBE(do_mov_general_484)
{
    u64 addr = ctx->r13 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x2b2")
int BPF_KPROBE(do_mov_slab_485)
{
    u64 addr = ctx->r13 + 0xb8;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x2b9")
int BPF_KPROBE(do_mov_general_486)
{
    u64 addr = ctx->r13 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x2c6")
int BPF_KPROBE(do_mov_general_487)
{
    u64 addr = ctx->r13 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x3a7")
int BPF_KPROBE(do_mov_general_488)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x3ab")
int BPF_KPROBE(do_mov_slab_489)
{
    u64 addr = ctx->r15;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x3ae")
int BPF_KPROBE(do_mov_general_490)
{
    u64 addr = ctx->r15 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x3b2")
int BPF_KPROBE(do_mov_general_491)
{
    u64 addr = ctx->r13 + 0xb0;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x3e5")
int BPF_KPROBE(do_mov_slab_492)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x40b")
int BPF_KPROBE(do_mov_general_493)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x452")
int BPF_KPROBE(do_mov_general_494)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_block_get_ext+0x47a")
int BPF_KPROBE(do_mov_general_495)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_init+0x1f")
int BPF_KPROBE(do_mov_general_496)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_init+0x26")
int BPF_KPROBE(do_mov_general_497)
{
    u64 addr = ctx->di + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_init+0x2e")
int BPF_KPROBE(do_mov_general_498)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_init+0x36")
int BPF_KPROBE(do_mov_general_499)
{
    u64 addr = ctx->di + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_qevent_init+0x61")
int BPF_KPROBE(do_mov_general_500)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_chain+0xbe")
int BPF_KPROBE(do_switch_908)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_chain+0xc3")
int BPF_KPROBE(do_switch_909)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_chain+0x29e")
int BPF_KPROBE(do_mov_general_501)
{
    u64 addr = ctx->r12 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_chain+0x348")
int BPF_KPROBE(do_mov_general_502)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_fill_node+0xa3")
int BPF_KPROBE(do_mov_general_503)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_fill_node+0xc0")
int BPF_KPROBE(do_mov_general_504)
{
    u64 addr = ctx->r14 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_fill_node+0xcc")
int BPF_KPROBE(do_mov_general_505)
{
    u64 addr = ctx->r14 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_fill_node+0xde")
int BPF_KPROBE(do_mov_slab_506)
{
    u64 addr = ctx->r14 + 0x20;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_fill_node+0x19b")
int BPF_KPROBE(do_mov_slab_507)
{
    u64 addr = ctx->r14;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tcf_fill_node+0x1fd")
int BPF_KPROBE(do_mov_general_508)
{
    u64 addr = ctx->ax + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_fill_node+0x213")
int BPF_KPROBE(do_mov_general_509)
{
    u64 addr = ctx->r14 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tfilter_notify+0x56")
int BPF_KPROBE(do_switch_938)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tfilter_notify+0x5b")
int BPF_KPROBE(do_switch_939)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tfilter_notify+0xbf")
int BPF_KPROBE(do_switch_941)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tfilter_notify+0xc4")
int BPF_KPROBE(do_switch_942)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tfilter_notify+0xdc")
int BPF_KPROBE(do_switch_943)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tfilter_notify+0xe1")
int BPF_KPROBE(do_switch_944)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_chain_dump+0x12e")
int BPF_KPROBE(do_mov_general_510)
{
    u64 addr = ctx->r15 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_dump+0x13a")
int BPF_KPROBE(do_mov_general_511)
{
    u64 addr = ctx->r15 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_dump+0x16d")
int BPF_KPROBE(do_mov_general_512)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_dump+0x1b8")
int BPF_KPROBE(do_mov_general_513)
{
    u64 addr = ctx->r15 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_dump+0x1c0")
int BPF_KPROBE(do_mov_general_514)
{
    u64 addr = ctx->r15 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_dump+0x1c8")
int BPF_KPROBE(do_mov_general_515)
{
    u64 addr = ctx->r15 + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_dump+0x1d0")
int BPF_KPROBE(do_mov_general_516)
{
    u64 addr = ctx->r15 + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_dump+0x1d8")
int BPF_KPROBE(do_mov_general_517)
{
    u64 addr = ctx->r15 + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_chain_dump+0x22c")
int BPF_KPROBE(do_mov_general_518)
{
    u64 addr = ctx->r15 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_tfilter+0xfa")
int BPF_KPROBE(do_switch_959)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_tfilter+0xff")
int BPF_KPROBE(do_switch_960)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_tfilter+0x2a0")
int BPF_KPROBE(do_mov_general_519)
{
    u64 addr = ctx->bx + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_tfilter+0x357")
int BPF_KPROBE(do_mov_general_520)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x1cc")
int BPF_KPROBE(do_mov_general_521)
{
    u64 addr = ctx->r14 + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x1de")
int BPF_KPROBE(do_mov_general_522)
{
    u64 addr = ctx->r14 + 0x4c;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x225")
int BPF_KPROBE(do_mov_general_523)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x303")
int BPF_KPROBE(do_mov_general_524)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x333")
int BPF_KPROBE(do_mov_general_525)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x430")
int BPF_KPROBE(do_mov_general_526)
{
    u64 addr = ctx->r14 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x434")
int BPF_KPROBE(do_mov_general_527)
{
    u64 addr = ctx->r14 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x49e")
int BPF_KPROBE(do_mov_general_528)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x52c")
int BPF_KPROBE(do_mov_general_529)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x553")
int BPF_KPROBE(do_mov_general_530)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x582")
int BPF_KPROBE(do_mov_general_531)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x59d")
int BPF_KPROBE(do_switch_1003)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x5a2")
int BPF_KPROBE(do_switch_1004)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x5e1")
int BPF_KPROBE(do_mov_general_532)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x5ff")
int BPF_KPROBE(do_mov_general_533)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x63c")
int BPF_KPROBE(do_mov_general_534)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_chain+0x65f")
int BPF_KPROBE(do_mov_general_535)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_setup_cb_destroy+0x52")
int BPF_KPROBE(do_switch_1011)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_destroy+0x57")
int BPF_KPROBE(do_switch_1012)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_destroy+0xeb")
int BPF_KPROBE(do_mov_general_536)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_setup_cb_destroy+0xff")
int BPF_KPROBE(do_mov_slab_537)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_setup_cb_destroy+0x124")
int BPF_KPROBE(do_switch_1017)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_destroy+0x129")
int BPF_KPROBE(do_switch_1018)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_destroy+0x145")
int BPF_KPROBE(do_switch_1019)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_destroy+0x14a")
int BPF_KPROBE(do_switch_1020)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_destroy+0x153")
int BPF_KPROBE(do_switch_1022)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_destroy+0x158")
int BPF_KPROBE(do_switch_1023)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x2a2")
int BPF_KPROBE(do_switch_1034)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x2a7")
int BPF_KPROBE(do_switch_1035)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x349")
int BPF_KPROBE(do_switch_1038)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x34e")
int BPF_KPROBE(do_switch_1039)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x438")
int BPF_KPROBE(do_mov_general_538)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x4b6")
int BPF_KPROBE(do_mov_general_539)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x502")
int BPF_KPROBE(do_mov_general_540)
{
    u64 addr = ctx->r13 + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x52e")
int BPF_KPROBE(do_mov_slab_541)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x5a9")
int BPF_KPROBE(do_mov_general_542)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x615")
int BPF_KPROBE(do_mov_general_543)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x63c")
int BPF_KPROBE(do_mov_general_544)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x663")
int BPF_KPROBE(do_mov_general_545)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x68a")
int BPF_KPROBE(do_mov_general_546)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x6a8")
int BPF_KPROBE(do_mov_general_547)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x6d7")
int BPF_KPROBE(do_mov_general_548)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x719")
int BPF_KPROBE(do_mov_general_549)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x75d")
int BPF_KPROBE(do_mov_general_550)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_del_tfilter+0x7af")
int BPF_KPROBE(do_mov_general_551)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x52")
int BPF_KPROBE(do_switch_1076)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x57")
int BPF_KPROBE(do_switch_1077)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x108")
int BPF_KPROBE(do_switch_1080)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x10d")
int BPF_KPROBE(do_switch_1081)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x129")
int BPF_KPROBE(do_switch_1082)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x12e")
int BPF_KPROBE(do_switch_1083)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x137")
int BPF_KPROBE(do_switch_1085)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x13c")
int BPF_KPROBE(do_switch_1086)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x161")
int BPF_KPROBE(do_switch_1087)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x166")
int BPF_KPROBE(do_switch_1088)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x1a3")
int BPF_KPROBE(do_switch_1091)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x1a8")
int BPF_KPROBE(do_switch_1092)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x1be")
int BPF_KPROBE(do_switch_1093)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_setup_cb_add+0x1c3")
int BPF_KPROBE(do_switch_1094)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_exts_terse_dump+0x7a")
int BPF_KPROBE(do_mov_general_552)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_tfilter+0x376")
int BPF_KPROBE(do_mov_general_553)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_tfilter+0x41d")
int BPF_KPROBE(do_mov_general_554)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_tfilter+0x444")
int BPF_KPROBE(do_mov_general_555)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_tfilter+0x46b")
int BPF_KPROBE(do_mov_general_556)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_tfilter+0x48f")
int BPF_KPROBE(do_mov_general_557)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_tfilter+0x4c4")
int BPF_KPROBE(do_mov_general_558)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_tfilter+0x4e1")
int BPF_KPROBE(do_mov_general_559)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_tfilter+0x512")
int BPF_KPROBE(do_mov_general_560)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_tfilter+0x53c")
int BPF_KPROBE(do_mov_general_561)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_tfilter+0x563")
int BPF_KPROBE(do_mov_general_562)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_get_tfilter+0x580")
int BPF_KPROBE(do_mov_general_563)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x1ed")
int BPF_KPROBE(do_mov_general_564)
{
    u64 addr = ctx->di + 0x34;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x43a")
int BPF_KPROBE(do_mov_general_565)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x4ca")
int BPF_KPROBE(do_mov_general_566)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x625")
int BPF_KPROBE(do_switch_1157)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x625")
int BPF_KPROBE(do_hotbpf_1157)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/tc_new_tfilter+0x62a")
int BPF_KPROBE(do_switch_1158)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x652")
int BPF_KPROBE(do_mov_general_567)
{
    u64 addr = ctx->r9 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x674")
int BPF_KPROBE(do_mov_general_568)
{
    u64 addr = ctx->r9 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x67c")
int BPF_KPROBE(do_mov_general_569)
{
    u64 addr = ctx->r9 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x687")
int BPF_KPROBE(do_mov_slab_570)
{
    u64 addr = ctx->r9 + 0x10;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x68b")
int BPF_KPROBE(do_mov_general_571)
{
    u64 addr = ctx->r9 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x696")
int BPF_KPROBE(do_mov_slab_572)
{
    u64 addr = ctx->r9 + 0x40;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x69e")
int BPF_KPROBE(do_mov_general_573)
{
    u64 addr = ctx->r9 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x7fd")
int BPF_KPROBE(do_mov_general_574)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x824")
int BPF_KPROBE(do_mov_general_575)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x874")
int BPF_KPROBE(do_mov_general_576)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x89d")
int BPF_KPROBE(do_mov_general_577)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x8ec")
int BPF_KPROBE(do_mov_general_578)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0x91f")
int BPF_KPROBE(do_mov_general_579)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0xa76")
int BPF_KPROBE(do_mov_general_580)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0xaa1")
int BPF_KPROBE(do_mov_general_581)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0xace")
int BPF_KPROBE(do_mov_general_582)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0xaf0")
int BPF_KPROBE(do_switch_1187)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0xaf5")
int BPF_KPROBE(do_switch_1188)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0xb27")
int BPF_KPROBE(do_mov_general_583)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_new_tfilter+0xb51")
int BPF_KPROBE(do_mov_slab_584)
{
    u64 addr = ctx->r9;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_new_tfilter+0xb9f")
int BPF_KPROBE(do_mov_slab_585)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/tc_new_tfilter+0xbe5")
int BPF_KPROBE(do_mov_general_586)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_set_ctrlact+0xd")
int BPF_KPROBE(do_mov_general_587)
{
    u64 addr = ctx->di + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_set_ctrlact+0x13")
int BPF_KPROBE(do_mov_general_588)
{
    u64 addr = ctx->di + 0xb8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_pernet_del_id_list+0x4c")
int BPF_KPROBE(do_mov_general_589)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_pernet_del_id_list+0x50")
int BPF_KPROBE(do_mov_general_590)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_pernet_del_id_list+0x5d")
int BPF_KPROBE(do_mov_general_591)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_pernet_del_id_list+0x64")
int BPF_KPROBE(do_mov_general_592)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tc_lookup_action_n+0x50")
int BPF_KPROBE(do_switch_1212)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_lookup_action_n+0x55")
int BPF_KPROBE(do_switch_1213)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_lookup_action+0x58")
int BPF_KPROBE(do_switch_1217)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_lookup_action+0x5d")
int BPF_KPROBE(do_switch_1218)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_check_ctrlact+0x5f")
int BPF_KPROBE(do_mov_general_593)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_check_ctrlact+0x7e")
int BPF_KPROBE(do_mov_general_594)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_check_ctrlact+0x98")
int BPF_KPROBE(do_mov_general_595)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_check_ctrlact+0xba")
int BPF_KPROBE(do_mov_general_596)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_unregister_action+0x68")
int BPF_KPROBE(do_mov_general_597)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_unregister_action+0x6c")
int BPF_KPROBE(do_mov_general_598)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_unregister_action+0x79")
int BPF_KPROBE(do_mov_general_599)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_unregister_action+0x80")
int BPF_KPROBE(do_mov_general_600)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_unregister_action+0x8c")
int BPF_KPROBE(do_switch_1227)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_unregister_action+0x91")
int BPF_KPROBE(do_switch_1228)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_exec+0xd6")
int BPF_KPROBE(do_mov_general_601)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_exec+0xee")
int BPF_KPROBE(do_switch_1231)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_exec+0xf3")
int BPF_KPROBE(do_switch_1232)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_exec+0x102")
int BPF_KPROBE(do_mov_general_602)
{
    u64 addr = ctx->di + 0x82;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_exec+0x119")
int BPF_KPROBE(do_switch_1233)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_exec+0x11e")
int BPF_KPROBE(do_switch_1234)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_offload_cmd.constprop.0+0x30")
int BPF_KPROBE(do_mov_general_603)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_offload_cmd.constprop.0+0x50")
int BPF_KPROBE(do_switch_1237)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_offload_cmd.constprop.0+0x55")
int BPF_KPROBE(do_switch_1238)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_offload_cmd.constprop.0+0x59")
int BPF_KPROBE(do_mov_general_604)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_offload_add_ex+0x87")
int BPF_KPROBE(do_switch_1239)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_offload_add_ex+0x8c")
int BPF_KPROBE(do_switch_1240)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_offload_add_ex+0x98")
int BPF_KPROBE(do_mov_general_605)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_offload_add_ex+0x9b")
int BPF_KPROBE(do_mov_general_606)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_offload_add_ex+0xa5")
int BPF_KPROBE(do_mov_general_607)
{
    u64 addr = ctx->r13 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_offload_add_ex+0x1db")
int BPF_KPROBE(do_mov_general_608)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_offload_add_ex+0x1e5")
int BPF_KPROBE(do_mov_general_609)
{
    u64 addr = ctx->bx + 0xc8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_check_alloc+0x7a")
int BPF_KPROBE(do_mov_general_610)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_check_alloc+0xa4")
int BPF_KPROBE(do_mov_general_611)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_check_alloc+0x10e")
int BPF_KPROBE(do_mov_general_612)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_check_alloc+0x121")
int BPF_KPROBE(do_mov_general_613)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_register_action+0x40")
int BPF_KPROBE(do_switch_1258)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_register_action+0x45")
int BPF_KPROBE(do_switch_1259)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_register_action+0xa0")
int BPF_KPROBE(do_switch_1262)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_register_action+0xa5")
int BPF_KPROBE(do_switch_1263)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_register_action+0xc8")
int BPF_KPROBE(do_switch_1264)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_register_action+0xc8")
int BPF_KPROBE(do_hotbpf_1264)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/tcf_register_action+0xcd")
int BPF_KPROBE(do_switch_1265)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_register_action+0xdd")
int BPF_KPROBE(do_mov_general_614)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_register_action+0xef")
int BPF_KPROBE(do_mov_general_615)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_register_action+0xf6")
int BPF_KPROBE(do_mov_general_616)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_register_action+0xfa")
int BPF_KPROBE(do_mov_general_617)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_register_action+0x18a")
int BPF_KPROBE(do_mov_general_618)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_register_action+0x191")
int BPF_KPROBE(do_mov_general_619)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_register_action+0x195")
int BPF_KPROBE(do_mov_general_620)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x37")
int BPF_KPROBE(do_switch_1273)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x37")
int BPF_KPROBE(do_hotbpf_1273)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/tcf_idr_create+0x3c")
int BPF_KPROBE(do_switch_1274)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x4f")
int BPF_KPROBE(do_mov_general_621)
{
    u64 addr = ctx->r12 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x5f")
int BPF_KPROBE(do_mov_general_622)
{
    u64 addr = ctx->r12 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x80")
int BPF_KPROBE(do_switch_1275)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x85")
int BPF_KPROBE(do_switch_1276)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0xc6")
int BPF_KPROBE(do_mov_general_623)
{
    u64 addr = ctx->r12 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0xce")
int BPF_KPROBE(do_switch_1278)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0xd3")
int BPF_KPROBE(do_switch_1279)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x10f")
int BPF_KPROBE(do_mov_general_624)
{
    u64 addr = ctx->r12 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x117")
int BPF_KPROBE(do_switch_1281)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x11c")
int BPF_KPROBE(do_switch_1282)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x11c")
int BPF_KPROBE(do_mov_general_625)
{
    u64 addr = ctx->r12 + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x135")
int BPF_KPROBE(do_switch_1283)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x13a")
int BPF_KPROBE(do_switch_1284)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x13f")
int BPF_KPROBE(do_switch_1285)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x144")
int BPF_KPROBE(do_switch_1286)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x147")
int BPF_KPROBE(do_mov_general_626)
{
    u64 addr = ctx->r12 + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x153")
int BPF_KPROBE(do_mov_general_627)
{
    u64 addr = ctx->r12 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x15c")
int BPF_KPROBE(do_mov_general_628)
{
    u64 addr = ctx->r12 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x168")
int BPF_KPROBE(do_mov_general_629)
{
    u64 addr = ctx->r12 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x174")
int BPF_KPROBE(do_mov_general_630)
{
    u64 addr = ctx->r12 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x17c")
int BPF_KPROBE(do_mov_general_631)
{
    u64 addr = ctx->r12 + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x1aa")
int BPF_KPROBE(do_switch_1287)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x1af")
int BPF_KPROBE(do_switch_1288)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x1c1")
int BPF_KPROBE(do_mov_general_632)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x1c6")
int BPF_KPROBE(do_switch_1289)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x1cb")
int BPF_KPROBE(do_switch_1290)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x1cf")
int BPF_KPROBE(do_mov_general_633)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x1d3")
int BPF_KPROBE(do_mov_general_634)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x221")
int BPF_KPROBE(do_mov_general_635)
{
    u64 addr = ctx->r12 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_create+0x235")
int BPF_KPROBE(do_mov_general_636)
{
    u64 addr = ctx->r12 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_idr_search+0x5a")
int BPF_KPROBE(do_mov_general_637)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_update_hw_stats+0xa8")
int BPF_KPROBE(do_switch_1308)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_update_hw_stats+0xad")
int BPF_KPROBE(do_switch_1309)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_update_hw_stats+0xeb")
int BPF_KPROBE(do_mov_general_638)
{
    u64 addr = ctx->bx + 0xc6;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_update_hw_stats+0xf2")
int BPF_KPROBE(do_mov_general_639)
{
    u64 addr = ctx->bx + 0xc5;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_offload_del_ex+0x110")
int BPF_KPROBE(do_mov_general_640)
{
    u64 addr = ctx->bx + 0xc8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_cleanup+0x33")
int BPF_KPROBE(do_switch_1320)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_cleanup+0x38")
int BPF_KPROBE(do_switch_1321)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_release+0x2b")
int BPF_KPROBE(do_switch_1333)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idr_release+0x30")
int BPF_KPROBE(do_switch_1334)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_put_many+0x41")
int BPF_KPROBE(do_switch_1336)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_put_many+0x46")
int BPF_KPROBE(do_switch_1337)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idrinfo_destroy+0x3f")
int BPF_KPROBE(do_switch_1339)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_idrinfo_destroy+0x44")
int BPF_KPROBE(do_switch_1340)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_destroy+0x3a")
int BPF_KPROBE(do_switch_1348)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_destroy+0x3f")
int BPF_KPROBE(do_switch_1349)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_destroy+0x55")
int BPF_KPROBE(do_mov_general_641)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_action_load_ops+0x96")
int BPF_KPROBE(do_mov_general_642)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_action_load_ops+0xfd")
int BPF_KPROBE(do_switch_1358)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_action_load_ops+0x102")
int BPF_KPROBE(do_switch_1359)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_action_load_ops+0x113")
int BPF_KPROBE(do_switch_1361)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_action_load_ops+0x118")
int BPF_KPROBE(do_switch_1362)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_action_load_ops+0x139")
int BPF_KPROBE(do_switch_1364)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_action_load_ops+0x13e")
int BPF_KPROBE(do_switch_1365)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_action_load_ops+0x161")
int BPF_KPROBE(do_mov_general_643)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_action_load_ops+0x17e")
int BPF_KPROBE(do_mov_general_644)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_init_1+0x6d")
int BPF_KPROBE(do_mov_general_645)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_init_1+0xe2")
int BPF_KPROBE(do_switch_1372)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_init_1+0xe2")
int BPF_KPROBE(do_hotbpf_1372)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/tcf_action_init_1+0xe7")
int BPF_KPROBE(do_switch_1373)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_init_1+0x119")
int BPF_KPROBE(do_mov_general_646)
{
    u64 addr = ctx->r10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_init_1+0x12f")
int BPF_KPROBE(do_mov_general_647)
{
    u64 addr = ctx->r10 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_init_1+0x1fa")
int BPF_KPROBE(do_mov_general_648)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_init_1+0x22f")
int BPF_KPROBE(do_mov_general_649)
{
    u64 addr = ctx->ax + 0xc4;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_init_1+0x2b3")
int BPF_KPROBE(do_mov_general_650)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_init+0xbc")
int BPF_KPROBE(do_mov_general_651)
{
    u64 addr = ctx->r15 + ctx->r13 * 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_init+0x109")
int BPF_KPROBE(do_switch_1386)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_init+0x10e")
int BPF_KPROBE(do_switch_1387)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_init+0x21c")
int BPF_KPROBE(do_mov_general_652)
{
    u64 addr = ctx->ax + ctx->r15 * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_init+0x29e")
int BPF_KPROBE(do_mov_general_653)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_init+0x2c9")
int BPF_KPROBE(do_mov_general_654)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0x89")
int BPF_KPROBE(do_switch_1396)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0x8e")
int BPF_KPROBE(do_switch_1397)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0xa7")
int BPF_KPROBE(do_switch_1398)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0xac")
int BPF_KPROBE(do_switch_1399)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0xc0")
int BPF_KPROBE(do_switch_1400)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0xc5")
int BPF_KPROBE(do_switch_1401)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0xd3")
int BPF_KPROBE(do_switch_1402)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0xd8")
int BPF_KPROBE(do_switch_1403)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0xed")
int BPF_KPROBE(do_switch_1404)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0xf2")
int BPF_KPROBE(do_switch_1405)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0xf9")
int BPF_KPROBE(do_switch_1406)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0xfe")
int BPF_KPROBE(do_switch_1407)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0x122")
int BPF_KPROBE(do_switch_1408)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_copy_stats+0x127")
int BPF_KPROBE(do_switch_1409)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_dump_1+0xfa")
int BPF_KPROBE(do_mov_general_655)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_generic_walker+0xdb")
int BPF_KPROBE(do_mov_general_656)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_generic_walker+0x1bd")
int BPF_KPROBE(do_mov_general_657)
{
    u64 addr = ctx->ax + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_generic_walker+0x1df")
int BPF_KPROBE(do_mov_general_658)
{
    u64 addr = ctx->cx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_generic_walker+0x328")
int BPF_KPROBE(do_switch_1444)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_generic_walker+0x32d")
int BPF_KPROBE(do_switch_1445)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_generic_walker+0x3c9")
int BPF_KPROBE(do_mov_general_659)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_generic_walker+0x3fe")
int BPF_KPROBE(do_mov_general_660)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_action+0xab")
int BPF_KPROBE(do_mov_general_661)
{
    u64 addr = ctx->bx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_action+0xc9")
int BPF_KPROBE(do_mov_general_662)
{
    u64 addr = ctx->bx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_action+0x144")
int BPF_KPROBE(do_mov_general_663)
{
    u64 addr = ctx->r14 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_action+0x159")
int BPF_KPROBE(do_mov_general_664)
{
    u64 addr = ctx->bx + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_action+0x1e6")
int BPF_KPROBE(do_mov_general_665)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_action+0x1f1")
int BPF_KPROBE(do_mov_general_666)
{
    u64 addr = ctx->si + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_action+0x1f4")
int BPF_KPROBE(do_mov_general_667)
{
    u64 addr = ctx->bx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_action+0x20d")
int BPF_KPROBE(do_mov_general_668)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_action+0x228")
int BPF_KPROBE(do_switch_1464)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_action+0x22d")
int BPF_KPROBE(do_switch_1465)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_action+0x257")
int BPF_KPROBE(do_switch_1466)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_action+0x25c")
int BPF_KPROBE(do_switch_1467)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_action+0x28e")
int BPF_KPROBE(do_switch_1469)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_action+0x293")
int BPF_KPROBE(do_switch_1470)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tc_dump_action+0x2d5")
int BPF_KPROBE(do_mov_general_669)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tc_dump_action+0x2fb")
int BPF_KPROBE(do_mov_general_670)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_flush+0x4c")
int BPF_KPROBE(do_switch_1473)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_flush+0x51")
int BPF_KPROBE(do_switch_1474)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_flush+0xe5")
int BPF_KPROBE(do_mov_general_671)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_flush+0xfb")
int BPF_KPROBE(do_switch_1478)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_flush+0x100")
int BPF_KPROBE(do_switch_1479)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_flush+0x17c")
int BPF_KPROBE(do_mov_general_672)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_flush+0x21c")
int BPF_KPROBE(do_mov_general_673)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_flush+0x246")
int BPF_KPROBE(do_mov_general_674)
{
    u64 addr = ctx->r11;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_flush+0x24d")
int BPF_KPROBE(do_switch_1484)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_flush+0x252")
int BPF_KPROBE(do_switch_1485)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_flush+0x270")
int BPF_KPROBE(do_switch_1486)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_flush+0x275")
int BPF_KPROBE(do_switch_1487)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_flush+0x29e")
int BPF_KPROBE(do_mov_general_675)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_flush+0x2c4")
int BPF_KPROBE(do_mov_general_676)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_flush+0x2e1")
int BPF_KPROBE(do_mov_general_677)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_dump+0x56")
int BPF_KPROBE(do_mov_general_678)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tca_get_fill.constprop.0+0x6c")
int BPF_KPROBE(do_mov_general_679)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tca_get_fill.constprop.0+0xc7")
int BPF_KPROBE(do_mov_general_680)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/tca_get_fill.constprop.0+0xde")
int BPF_KPROBE(do_mov_general_681)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_gd+0x145")
int BPF_KPROBE(do_switch_1507)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x14a")
int BPF_KPROBE(do_switch_1508)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x166")
int BPF_KPROBE(do_mov_stk_1)
{
    u64 addr = ctx->bp + ctx->r12 * 0x1 - 0x238;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/tca_action_gd+0x1eb")
int BPF_KPROBE(do_mov_general_682)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_gd+0x243")
int BPF_KPROBE(do_mov_general_683)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_gd+0x255")
int BPF_KPROBE(do_switch_1514)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x25a")
int BPF_KPROBE(do_switch_1515)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x288")
int BPF_KPROBE(do_switch_1516)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x28d")
int BPF_KPROBE(do_switch_1517)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x2e0")
int BPF_KPROBE(do_switch_1519)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x2e5")
int BPF_KPROBE(do_switch_1520)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x313")
int BPF_KPROBE(do_mov_general_684)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_gd+0x394")
int BPF_KPROBE(do_mov_general_685)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_gd+0x3b8")
int BPF_KPROBE(do_switch_1526)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x3bd")
int BPF_KPROBE(do_switch_1527)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x40f")
int BPF_KPROBE(do_switch_1529)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x414")
int BPF_KPROBE(do_switch_1530)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x43b")
int BPF_KPROBE(do_mov_general_686)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_gd+0x481")
int BPF_KPROBE(do_switch_1534)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x486")
int BPF_KPROBE(do_switch_1535)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x4cd")
int BPF_KPROBE(do_switch_1539)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x4d2")
int BPF_KPROBE(do_switch_1540)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tca_action_gd+0x52a")
int BPF_KPROBE(do_mov_general_687)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_gd+0x568")
int BPF_KPROBE(do_mov_general_688)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tca_action_gd+0x585")
int BPF_KPROBE(do_mov_general_689)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_add+0xfc")
int BPF_KPROBE(do_switch_1551)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_add+0x101")
int BPF_KPROBE(do_switch_1552)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_add+0x15e")
int BPF_KPROBE(do_switch_1554)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_add+0x163")
int BPF_KPROBE(do_switch_1555)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_add+0x16c")
int BPF_KPROBE(do_mov_general_690)
{
    u64 addr = ctx->r13 + ctx->dx * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_action_add+0x1b7")
int BPF_KPROBE(do_mov_general_691)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_action+0x124")
int BPF_KPROBE(do_mov_general_692)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tc_ctl_action+0x14a")
int BPF_KPROBE(do_mov_general_693)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_reoffload_del_notify.isra.0+0x6e")
int BPF_KPROBE(do_switch_1569)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_reoffload_del_notify.isra.0+0x73")
int BPF_KPROBE(do_switch_1570)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_reoffload_del_notify.isra.0+0xdb")
int BPF_KPROBE(do_switch_1574)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_reoffload_del_notify.isra.0+0xe0")
int BPF_KPROBE(do_switch_1575)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_reoffload_del_notify.isra.0+0xf0")
int BPF_KPROBE(do_switch_1576)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_reoffload_del_notify.isra.0+0xf5")
int BPF_KPROBE(do_switch_1577)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_reoffload_cb+0x3e")
int BPF_KPROBE(do_switch_1579)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_reoffload_cb+0x43")
int BPF_KPROBE(do_switch_1580)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_reoffload_cb+0x19a")
int BPF_KPROBE(do_switch_1590)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_action_reoffload_cb+0x19f")
int BPF_KPROBE(do_switch_1591)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pfifo_enqueue+0x20")
int BPF_KPROBE(do_mov_general_694)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_enqueue+0x27")
int BPF_KPROBE(do_mov_general_695)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_enqueue+0x30")
int BPF_KPROBE(do_mov_general_696)
{
    u64 addr = ctx->si + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_enqueue+0x3b")
int BPF_KPROBE(do_mov_general_697)
{
    u64 addr = ctx->si + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_enqueue+0x4d")
int BPF_KPROBE(do_mov_general_698)
{
    u64 addr = ctx->si + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_enqueue+0x54")
int BPF_KPROBE(do_mov_general_699)
{
    u64 addr = ctx->si + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_enqueue+0x60")
int BPF_KPROBE(do_mov_general_700)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_enqueue+0x68")
int BPF_KPROBE(do_mov_general_701)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/bfifo_enqueue+0x25")
int BPF_KPROBE(do_mov_general_702)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/bfifo_enqueue+0x2c")
int BPF_KPROBE(do_mov_general_703)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/bfifo_enqueue+0x35")
int BPF_KPROBE(do_mov_general_704)
{
    u64 addr = ctx->si + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/bfifo_enqueue+0x46")
int BPF_KPROBE(do_mov_general_705)
{
    u64 addr = ctx->si + 0xc4;
    check(addr);
    return 0;
}


SEC("kprobe/bfifo_enqueue+0x50")
int BPF_KPROBE(do_mov_general_706)
{
    u64 addr = ctx->si + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/bfifo_enqueue+0x57")
int BPF_KPROBE(do_mov_general_707)
{
    u64 addr = ctx->si + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/bfifo_enqueue+0x63")
int BPF_KPROBE(do_mov_general_708)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/bfifo_enqueue+0x6b")
int BPF_KPROBE(do_mov_general_709)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/fifo_set_limit+0x4c")
int BPF_KPROBE(do_switch_1598)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fifo_set_limit+0x4c")
int BPF_KPROBE(do_hotbpf_1598)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/fifo_set_limit+0x51")
int BPF_KPROBE(do_switch_1599)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fifo_set_limit+0x59")
int BPF_KPROBE(do_mov_general_710)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fifo_set_limit+0x67")
int BPF_KPROBE(do_mov_general_711)
{
    u64 addr = ctx->ax + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/fifo_init+0x42")
int BPF_KPROBE(do_mov_general_712)
{
    u64 addr = ctx->di + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/fifo_init+0x58")
int BPF_KPROBE(do_mov_general_713)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fifo_init+0xd9")
int BPF_KPROBE(do_mov_general_714)
{
    u64 addr = ctx->ax + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0x22")
int BPF_KPROBE(do_mov_general_715)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0x29")
int BPF_KPROBE(do_mov_general_716)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0x32")
int BPF_KPROBE(do_mov_general_717)
{
    u64 addr = ctx->si + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0x3c")
int BPF_KPROBE(do_mov_general_718)
{
    u64 addr = ctx->di + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0x4e")
int BPF_KPROBE(do_mov_general_719)
{
    u64 addr = ctx->si + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0x55")
int BPF_KPROBE(do_mov_general_720)
{
    u64 addr = ctx->si + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0x7b")
int BPF_KPROBE(do_mov_general_721)
{
    u64 addr = ctx->di + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0x81")
int BPF_KPROBE(do_mov_general_722)
{
    u64 addr = ctx->di + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0x8d")
int BPF_KPROBE(do_mov_general_723)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0xa0")
int BPF_KPROBE(do_mov_general_724)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0xa3")
int BPF_KPROBE(do_mov_general_725)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0xb9")
int BPF_KPROBE(do_mov_general_726)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0xc0")
int BPF_KPROBE(do_mov_general_727)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0xc3")
int BPF_KPROBE(do_mov_general_728)
{
    u64 addr = ctx->di + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0xdf")
int BPF_KPROBE(do_mov_general_729)
{
    u64 addr = ctx->di + 0xc4;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0xf3")
int BPF_KPROBE(do_mov_general_730)
{
    u64 addr = ctx->di + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0xfa")
int BPF_KPROBE(do_mov_general_731)
{
    u64 addr = ctx->di + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/pfifo_tail_enqueue+0x103")
int BPF_KPROBE(do_mov_general_732)
{
    u64 addr = ctx->di + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/fifo_hd_init+0x23")
int BPF_KPROBE(do_mov_general_733)
{
    u64 addr = ctx->di + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/fifo_hd_init+0x71")
int BPF_KPROBE(do_mov_general_734)
{
    u64 addr = ctx->ax + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/fifo_hd_init+0x8a")
int BPF_KPROBE(do_mov_general_735)
{
    u64 addr = ctx->ax + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_deactivate_class+0x3c")
int BPF_KPROBE(do_mov_general_736)
{
    u64 addr = ctx->si + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_deactivate_class+0x40")
int BPF_KPROBE(do_mov_general_737)
{
    u64 addr = ctx->di + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_deactivate_class+0x58")
int BPF_KPROBE(do_mov_general_738)
{
    u64 addr = ctx->r8 + 0x3a8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_deactivate_class+0x61")
int BPF_KPROBE(do_mov_general_739)
{
    u64 addr = ctx->r8 + 0x3a8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_sync_defmap+0x3c")
int BPF_KPROBE(do_mov_general_740)
{
    u64 addr = ctx->dx + ctx->cx * 0x8 + 0x138;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_sync_defmap+0xd6")
int BPF_KPROBE(do_mov_general_741)
{
    u64 addr = ctx->dx + ctx->r8 * 0x8 + 0x138;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_lss+0x1f")
int BPF_KPROBE(do_mov_general_742)
{
    u64 addr = ctx->di + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_lss+0x2b")
int BPF_KPROBE(do_mov_general_743)
{
    u64 addr = ctx->di + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_lss+0x3d")
int BPF_KPROBE(do_mov_general_744)
{
    u64 addr = ctx->di + 0x22;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_lss+0x4a")
int BPF_KPROBE(do_mov_general_745)
{
    u64 addr = ctx->di + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_lss+0x5a")
int BPF_KPROBE(do_mov_general_746)
{
    u64 addr = ctx->di + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_lss+0x68")
int BPF_KPROBE(do_mov_general_747)
{
    u64 addr = ctx->di + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_lss+0x6f")
int BPF_KPROBE(do_mov_general_748)
{
    u64 addr = ctx->di + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_lss+0x80")
int BPF_KPROBE(do_mov_general_749)
{
    u64 addr = ctx->di + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump_stats+0x1a")
int BPF_KPROBE(do_mov_general_750)
{
    u64 addr = ctx->ax + 0x2f8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump_stats+0x28")
int BPF_KPROBE(do_switch_1611)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_dump_stats+0x2d")
int BPF_KPROBE(do_switch_1612)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_reset+0x18")
int BPF_KPROBE(do_mov_general_751)
{
    u64 addr = ctx->di - 0x80;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0x1f")
int BPF_KPROBE(do_mov_general_752)
{
    u64 addr = ctx->di - 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0x26")
int BPF_KPROBE(do_mov_general_753)
{
    u64 addr = ctx->di - 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0x2e")
int BPF_KPROBE(do_mov_general_754)
{
    u64 addr = ctx->di - 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0x3b")
int BPF_KPROBE(do_mov_general_755)
{
    u64 addr = ctx->r13 + 0x478;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0x52")
int BPF_KPROBE(do_mov_general_756)
{
    u64 addr = ctx->r13 + 0x3a8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0x65")
int BPF_KPROBE(do_mov_general_757)
{
    u64 addr = ctx->r13 + 0x3e8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0x70")
int BPF_KPROBE(do_mov_general_758)
{
    u64 addr = ctx->r13 + 0x410;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0xc1")
int BPF_KPROBE(do_mov_general_759)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0xc9")
int BPF_KPROBE(do_mov_general_760)
{
    u64 addr = ctx->bx + 0xb8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0xd4")
int BPF_KPROBE(do_mov_general_761)
{
    u64 addr = ctx->bx + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0xdf")
int BPF_KPROBE(do_mov_general_762)
{
    u64 addr = ctx->bx + 0xc8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_reset+0xea")
int BPF_KPROBE(do_mov_general_763)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0x53")
int BPF_KPROBE(do_mov_general_764)
{
    u64 addr = ctx->si + 0x11c;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0x64")
int BPF_KPROBE(do_mov_general_765)
{
    u64 addr = ctx->si + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0x6e")
int BPF_KPROBE(do_switch_1616)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0x73")
int BPF_KPROBE(do_switch_1617)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0x81")
int BPF_KPROBE(do_mov_general_766)
{
    u64 addr = ctx->bx + 0xf4;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0x9a")
int BPF_KPROBE(do_mov_general_767)
{
    u64 addr = ctx->bx + 0x11c;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0xb1")
int BPF_KPROBE(do_switch_1618)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0xb6")
int BPF_KPROBE(do_switch_1619)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0xc4")
int BPF_KPROBE(do_switch_1620)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0xc9")
int BPF_KPROBE(do_switch_1621)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0xdc")
int BPF_KPROBE(do_switch_1622)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0xe1")
int BPF_KPROBE(do_switch_1623)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0xf4")
int BPF_KPROBE(do_switch_1624)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_dump_class_stats+0xf9")
int BPF_KPROBE(do_switch_1625)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_walk+0x56")
int BPF_KPROBE(do_mov_general_768)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_walk+0x83")
int BPF_KPROBE(do_mov_general_769)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_opt_parse+0x65")
int BPF_KPROBE(do_mov_general_770)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_opt_parse+0x8b")
int BPF_KPROBE(do_mov_general_771)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_fopt.isra.0+0x36")
int BPF_KPROBE(do_mov_general_772)
{
    u64 addr = ctx->r12 + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_fopt.isra.0+0x73")
int BPF_KPROBE(do_mov_general_773)
{
    u64 addr = ctx->r12 + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_fopt.isra.0+0x87")
int BPF_KPROBE(do_mov_general_774)
{
    u64 addr = ctx->r12 + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_wrr.isra.0+0x10")
int BPF_KPROBE(do_mov_general_775)
{
    u64 addr = ctx->di + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_wrr.isra.0+0x1b")
int BPF_KPROBE(do_mov_general_776)
{
    u64 addr = ctx->di + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_wrr.isra.0+0x6b")
int BPF_KPROBE(do_mov_general_777)
{
    u64 addr = ctx->di + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_wrr.isra.0+0x6e")
int BPF_KPROBE(do_mov_general_778)
{
    u64 addr = ctx->di + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_set_wrr.isra.0+0x79")
int BPF_KPROBE(do_mov_general_779)
{
    u64 addr = ctx->di + 0x21;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_destroy+0x1e")
int BPF_KPROBE(do_mov_general_780)
{
    u64 addr = ctx->di + 0x3f0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_destroy+0x57")
int BPF_KPROBE(do_mov_general_781)
{
    u64 addr = ctx->r12 + 0x128;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_destroy+0xd5")
int BPF_KPROBE(do_switch_1638)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_destroy+0xda")
int BPF_KPROBE(do_switch_1639)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_graft+0x6c")
int BPF_KPROBE(do_mov_general_782)
{
    u64 addr = ctx->r14 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_graft+0x9e")
int BPF_KPROBE(do_switch_1644)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_graft+0xa3")
int BPF_KPROBE(do_switch_1645)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_graft+0xef")
int BPF_KPROBE(do_mov_general_783)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_delete+0xb1")
int BPF_KPROBE(do_switch_1657)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_delete+0xb6")
int BPF_KPROBE(do_switch_1658)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_delete+0x16b")
int BPF_KPROBE(do_mov_general_784)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_delete+0x183")
int BPF_KPROBE(do_mov_general_785)
{
    u64 addr = ctx->di + 0xaa;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_delete+0x1e6")
int BPF_KPROBE(do_mov_general_786)
{
    u64 addr = ctx->r13 + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_delete+0x217")
int BPF_KPROBE(do_mov_general_787)
{
    u64 addr = ctx->bx + ctx->ax * 0x4 + 0x18c;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_delete+0x29b")
int BPF_KPROBE(do_switch_1671)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_delete+0x2a0")
int BPF_KPROBE(do_switch_1672)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_delete+0x2dd")
int BPF_KPROBE(do_mov_general_788)
{
    u64 addr = ctx->di + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_delete+0x2f5")
int BPF_KPROBE(do_mov_general_789)
{
    u64 addr = ctx->bx + 0x3f0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_delete+0x305")
int BPF_KPROBE(do_mov_general_790)
{
    u64 addr = ctx->bx + 0x3f8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_delete+0x310")
int BPF_KPROBE(do_mov_general_791)
{
    u64 addr = ctx->bx + 0x400;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_delete+0x320")
int BPF_KPROBE(do_mov_general_792)
{
    u64 addr = ctx->bx + 0x400;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_delete+0x333")
int BPF_KPROBE(do_mov_general_793)
{
    u64 addr = ctx->ax + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_delete+0x347")
int BPF_KPROBE(do_mov_general_794)
{
    u64 addr = ctx->di + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x80")
int BPF_KPROBE(do_mov_general_795)
{
    u64 addr = ctx->bx + 0x228;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x104")
int BPF_KPROBE(do_mov_general_796)
{
    u64 addr = ctx->bx + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x112")
int BPF_KPROBE(do_mov_general_797)
{
    u64 addr = ctx->bx + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x118")
int BPF_KPROBE(do_mov_general_798)
{
    u64 addr = ctx->bx + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x124")
int BPF_KPROBE(do_mov_general_799)
{
    u64 addr = ctx->bx + 0x280;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x146")
int BPF_KPROBE(do_mov_general_800)
{
    u64 addr = ctx->bx + 0x288;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x14d")
int BPF_KPROBE(do_mov_general_801)
{
    u64 addr = ctx->bx + 0x200;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x16f")
int BPF_KPROBE(do_mov_general_802)
{
    u64 addr = ctx->bx + 0x230;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x176")
int BPF_KPROBE(do_mov_general_803)
{
    u64 addr = ctx->bx + 0x238;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x183")
int BPF_KPROBE(do_mov_general_804)
{
    u64 addr = ctx->bx + 0x202;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x18a")
int BPF_KPROBE(do_mov_general_805)
{
    u64 addr = ctx->bx + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x190")
int BPF_KPROBE(do_mov_general_806)
{
    u64 addr = ctx->bx + 0x240;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x197")
int BPF_KPROBE(do_mov_general_807)
{
    u64 addr = ctx->bx + 0x218;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x1a2")
int BPF_KPROBE(do_mov_general_808)
{
    u64 addr = ctx->bx + 0x478;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x1b1")
int BPF_KPROBE(do_mov_general_809)
{
    u64 addr = ctx->bx + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x1c6")
int BPF_KPROBE(do_mov_general_810)
{
    u64 addr = ctx->bx + 0x410;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x1fc")
int BPF_KPROBE(do_mov_general_811)
{
    u64 addr = ctx->bx + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x20a")
int BPF_KPROBE(do_mov_general_812)
{
    u64 addr = ctx->ax + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x244")
int BPF_KPROBE(do_mov_general_813)
{
    u64 addr = ctx->dx + 0x1bc;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x25d")
int BPF_KPROBE(do_mov_general_814)
{
    u64 addr = ctx->bx + 0x280;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x281")
int BPF_KPROBE(do_mov_general_815)
{
    u64 addr = ctx->r15 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_init+0x29b")
int BPF_KPROBE(do_mov_general_816)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x44")
int BPF_KPROBE(do_mov_general_817)
{
    u64 addr = ctx->r14 + 0x3f8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x9d")
int BPF_KPROBE(do_mov_general_818)
{
    u64 addr = ctx->ax + 0xb8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0xb3")
int BPF_KPROBE(do_mov_general_819)
{
    u64 addr = ctx->ax + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0xbf")
int BPF_KPROBE(do_mov_general_820)
{
    u64 addr = ctx->ax + 0xb0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x159")
int BPF_KPROBE(do_mov_general_821)
{
    u64 addr = ctx->ax + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x1e6")
int BPF_KPROBE(do_mov_general_822)
{
    u64 addr = ctx->ax + 0xb8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x225")
int BPF_KPROBE(do_mov_general_823)
{
    u64 addr = ctx->r14 + 0x410;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x230")
int BPF_KPROBE(do_mov_general_824)
{
    u64 addr = ctx->ax + 0x470;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x2eb")
int BPF_KPROBE(do_mov_general_825)
{
    u64 addr = ctx->r12 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x2f0")
int BPF_KPROBE(do_mov_general_826)
{
    u64 addr = ctx->r13 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x391")
int BPF_KPROBE(do_mov_general_827)
{
    u64 addr = ctx->r15 + 0xa9;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x3b6")
int BPF_KPROBE(do_mov_general_828)
{
    u64 addr = ctx->r13 + 0xc8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x3c2")
int BPF_KPROBE(do_mov_general_829)
{
    u64 addr = ctx->r13 + 0xa9;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x3ef")
int BPF_KPROBE(do_mov_general_830)
{
    u64 addr = ctx->ax + ctx->dx * 0x8 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x423")
int BPF_KPROBE(do_mov_general_831)
{
    u64 addr = ctx->di + ctx->ax * 0x8 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x434")
int BPF_KPROBE(do_mov_general_832)
{
    u64 addr = ctx->r13 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x438")
int BPF_KPROBE(do_mov_general_833)
{
    u64 addr = ctx->r8 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x457")
int BPF_KPROBE(do_mov_general_834)
{
    u64 addr = ctx->ax + ctx->si * 0x8 + 0x3a8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x47f")
int BPF_KPROBE(do_mov_general_835)
{
    u64 addr = ctx->ax + 0x478;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x489")
int BPF_KPROBE(do_mov_general_836)
{
    u64 addr = ctx->ax + 0x298;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x4a6")
int BPF_KPROBE(do_mov_general_837)
{
    u64 addr = ctx->r13 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x501")
int BPF_KPROBE(do_mov_general_838)
{
    u64 addr = ctx->r13 + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x517")
int BPF_KPROBE(do_mov_general_839)
{
    u64 addr = ctx->r13 + 0xa9;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x52e")
int BPF_KPROBE(do_mov_general_840)
{
    u64 addr = ctx->r13 + 0xb8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x546")
int BPF_KPROBE(do_mov_general_841)
{
    u64 addr = ctx->di + 0x470;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x59d")
int BPF_KPROBE(do_mov_general_842)
{
    u64 addr = ctx->di + 0x470;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x5ba")
int BPF_KPROBE(do_mov_general_843)
{
    u64 addr = ctx->r14 + 0x3f8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x5c1")
int BPF_KPROBE(do_mov_general_844)
{
    u64 addr = ctx->r14 + 0x400;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x5e0")
int BPF_KPROBE(do_mov_general_845)
{
    u64 addr = ctx->r14 + 0x408;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x5f6")
int BPF_KPROBE(do_mov_general_846)
{
    u64 addr = ctx->r14 + ctx->cx * 0x8 + 0x3a8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x656")
int BPF_KPROBE(do_mov_general_847)
{
    u64 addr = ctx->ax + ctx->dx * 0x8 + 0x3a8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x69b")
int BPF_KPROBE(do_mov_general_848)
{
    u64 addr = ctx->si + ctx->ax * 0x8 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x6ac")
int BPF_KPROBE(do_mov_general_849)
{
    u64 addr = ctx->r13 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x6b0")
int BPF_KPROBE(do_mov_general_850)
{
    u64 addr = ctx->di + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x727")
int BPF_KPROBE(do_mov_general_851)
{
    u64 addr = ctx->r13 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dequeue+0x7ac")
int BPF_KPROBE(do_mov_general_852)
{
    u64 addr = ctx->r14 + 0x478;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump+0x64")
int BPF_KPROBE(do_mov_general_853)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump_class+0x27")
int BPF_KPROBE(do_mov_general_854)
{
    u64 addr = ctx->cx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump_class+0x38")
int BPF_KPROBE(do_mov_general_855)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump_class+0x45")
int BPF_KPROBE(do_mov_general_856)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_dump_class+0x8a")
int BPF_KPROBE(do_mov_general_857)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0xd0")
int BPF_KPROBE(do_mov_general_858)
{
    u64 addr = ctx->r12 + 0x3f0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0xee")
int BPF_KPROBE(do_mov_general_859)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0xf1")
int BPF_KPROBE(do_mov_general_860)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0x12f")
int BPF_KPROBE(do_mov_general_861)
{
    u64 addr = ctx->r12 + 0x3f0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0x1a0")
int BPF_KPROBE(do_mov_general_862)
{
    u64 addr = ctx->r12 + 0x3f0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0x288")
int BPF_KPROBE(do_mov_general_863)
{
    u64 addr = ctx->r12 + 0x3f0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0x2e4")
int BPF_KPROBE(do_mov_general_864)
{
    u64 addr = ctx->dx + ctx->ax * 0x8 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0x2f9")
int BPF_KPROBE(do_mov_general_865)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0x2fd")
int BPF_KPROBE(do_mov_general_866)
{
    u64 addr = ctx->si + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0x390")
int BPF_KPROBE(do_mov_general_867)
{
    u64 addr = ctx->r12 + 0x478;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0x3db")
int BPF_KPROBE(do_mov_general_868)
{
    u64 addr = ctx->r12 + 0x478;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_enqueue+0x3ed")
int BPF_KPROBE(do_mov_general_869)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x156")
int BPF_KPROBE(do_mov_general_870)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x1fc")
int BPF_KPROBE(do_switch_1719)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_change_class+0x201")
int BPF_KPROBE(do_switch_1720)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_change_class+0x257")
int BPF_KPROBE(do_mov_general_871)
{
    u64 addr = ctx->r15 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x29c")
int BPF_KPROBE(do_mov_general_872)
{
    u64 addr = ctx->r12 + ctx->dx * 0x4 + 0x18c;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x35e")
int BPF_KPROBE(do_mov_general_873)
{
    u64 addr = ctx->r12 + 0x47c;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x3b5")
int BPF_KPROBE(do_mov_general_874)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x3ea")
int BPF_KPROBE(do_mov_general_875)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x4b0")
int BPF_KPROBE(do_mov_general_876)
{
    u64 addr = ctx->si + ctx->ax * 0x8 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x4c5")
int BPF_KPROBE(do_mov_general_877)
{
    u64 addr = ctx->r15 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x4c9")
int BPF_KPROBE(do_mov_general_878)
{
    u64 addr = ctx->dx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x4f1")
int BPF_KPROBE(do_switch_1736)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_change_class+0x4f1")
int BPF_KPROBE(do_hotbpf_1736)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/cbq_change_class+0x4f6")
int BPF_KPROBE(do_switch_1737)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_change_class+0x516")
int BPF_KPROBE(do_switch_1738)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_change_class+0x51b")
int BPF_KPROBE(do_switch_1739)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_change_class+0x580")
int BPF_KPROBE(do_switch_1741)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_change_class+0x585")
int BPF_KPROBE(do_switch_1742)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbq_change_class+0x5b9")
int BPF_KPROBE(do_mov_general_879)
{
    u64 addr = ctx->r11 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x5d7")
int BPF_KPROBE(do_mov_general_880)
{
    u64 addr = ctx->r11 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x604")
int BPF_KPROBE(do_mov_general_881)
{
    u64 addr = ctx->r11;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x60d")
int BPF_KPROBE(do_mov_general_882)
{
    u64 addr = ctx->r11 + 0x80;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x614")
int BPF_KPROBE(do_mov_general_883)
{
    u64 addr = ctx->r11 + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x623")
int BPF_KPROBE(do_mov_general_884)
{
    u64 addr = ctx->r11 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x627")
int BPF_KPROBE(do_mov_general_885)
{
    u64 addr = ctx->r11 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x636")
int BPF_KPROBE(do_mov_general_886)
{
    u64 addr = ctx->r11 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x65c")
int BPF_KPROBE(do_mov_general_887)
{
    u64 addr = ctx->r11 + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x6ab")
int BPF_KPROBE(do_mov_general_888)
{
    u64 addr = ctx->r11 + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x6b9")
int BPF_KPROBE(do_mov_general_889)
{
    u64 addr = ctx->ax + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x6c7")
int BPF_KPROBE(do_mov_general_890)
{
    u64 addr = ctx->r11 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x6d7")
int BPF_KPROBE(do_mov_general_891)
{
    u64 addr = ctx->r11 + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x6e2")
int BPF_KPROBE(do_mov_general_892)
{
    u64 addr = ctx->r10 + 0xaa;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x728")
int BPF_KPROBE(do_mov_general_893)
{
    u64 addr = ctx->r11 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x769")
int BPF_KPROBE(do_mov_general_894)
{
    u64 addr = ctx->r11 + 0x22;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x77c")
int BPF_KPROBE(do_mov_general_895)
{
    u64 addr = ctx->r11 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x790")
int BPF_KPROBE(do_mov_general_896)
{
    u64 addr = ctx->r11 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x7ee")
int BPF_KPROBE(do_mov_general_897)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x88c")
int BPF_KPROBE(do_mov_general_898)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x8ba")
int BPF_KPROBE(do_mov_general_899)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x952")
int BPF_KPROBE(do_mov_general_900)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x964")
int BPF_KPROBE(do_mov_general_901)
{
    u64 addr = ctx->r11 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x981")
int BPF_KPROBE(do_mov_general_902)
{
    u64 addr = ctx->bx + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x9a8")
int BPF_KPROBE(do_mov_general_903)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x9b9")
int BPF_KPROBE(do_mov_general_904)
{
    u64 addr = ctx->r15 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0x9e3")
int BPF_KPROBE(do_mov_general_905)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cbq_change_class+0xa86")
int BPF_KPROBE(do_mov_general_906)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/htb_work_func+0x1e")
int BPF_KPROBE(do_switch_1776)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_work_func+0x23")
int BPF_KPROBE(do_switch_1777)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_lookup_leaf+0x75")
int BPF_KPROBE(do_mov_general_907)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/htb_lookup_leaf+0xa2")
int BPF_KPROBE(do_mov_general_908)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/htb_lookup_leaf+0xb3")
int BPF_KPROBE(do_mov_general_909)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_lookup_leaf+0xb7")
int BPF_KPROBE(do_mov_general_910)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/htb_lookup_leaf+0xf7")
int BPF_KPROBE(do_mov_general_911)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/htb_lookup_leaf+0xfa")
int BPF_KPROBE(do_mov_general_912)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/htb_lookup_leaf+0x10f")
int BPF_KPROBE(do_mov_general_913)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/htb_lookup_leaf+0x13d")
int BPF_KPROBE(do_mov_general_914)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/htb_add_to_wait_tree+0x10")
int BPF_KPROBE(do_mov_general_915)
{
    u64 addr = ctx->si + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_add_to_wait_tree+0x2b")
int BPF_KPROBE(do_mov_general_916)
{
    u64 addr = ctx->si + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_add_to_wait_tree+0x40")
int BPF_KPROBE(do_mov_general_917)
{
    u64 addr = ctx->r8 + ctx->cx * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_add_to_wait_tree+0x8e")
int BPF_KPROBE(do_mov_general_918)
{
    u64 addr = ctx->si + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_add_to_wait_tree+0x95")
int BPF_KPROBE(do_mov_general_919)
{
    u64 addr = ctx->si + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_add_to_wait_tree+0xa0")
int BPF_KPROBE(do_mov_general_920)
{
    u64 addr = ctx->si + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_add_to_wait_tree+0xab")
int BPF_KPROBE(do_mov_general_921)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x94")
int BPF_KPROBE(do_switch_1782)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x99")
int BPF_KPROBE(do_switch_1783)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0xe0")
int BPF_KPROBE(do_mov_general_922)
{
    u64 addr = ctx->bx + 0xcc;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x104")
int BPF_KPROBE(do_mov_slab_923)
{
    u64 addr = ctx->bx + 0xd0;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x13d")
int BPF_KPROBE(do_mov_general_924)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x144")
int BPF_KPROBE(do_mov_general_925)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x176")
int BPF_KPROBE(do_switch_1784)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x17b")
int BPF_KPROBE(do_switch_1785)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x18d")
int BPF_KPROBE(do_switch_1786)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x192")
int BPF_KPROBE(do_switch_1787)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x1a5")
int BPF_KPROBE(do_switch_1788)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x1aa")
int BPF_KPROBE(do_switch_1789)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x1c1")
int BPF_KPROBE(do_switch_1790)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x1c6")
int BPF_KPROBE(do_switch_1791)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x1ec")
int BPF_KPROBE(do_switch_1792)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x1f1")
int BPF_KPROBE(do_switch_1793)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x2ad")
int BPF_KPROBE(do_switch_1794)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_dump_class_stats+0x2b2")
int BPF_KPROBE(do_switch_1795)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_walk+0x56")
int BPF_KPROBE(do_mov_general_926)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_walk+0x83")
int BPF_KPROBE(do_mov_general_927)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dump_class+0x3f")
int BPF_KPROBE(do_mov_general_928)
{
    u64 addr = ctx->cx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dump_class+0x44")
int BPF_KPROBE(do_mov_slab_929)
{
    u64 addr = ctx->cx + 0x8;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/htb_dump_class+0x5d")
int BPF_KPROBE(do_mov_slab_930)
{
    u64 addr = ctx->cx + 0x10;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/htb_dump_class+0x182")
int BPF_KPROBE(do_mov_general_931)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x52")
int BPF_KPROBE(do_mov_general_932)
{
    u64 addr = ctx->bx + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x5d")
int BPF_KPROBE(do_mov_general_933)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x6b")
int BPF_KPROBE(do_mov_general_934)
{
    u64 addr = ctx->bx + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x72")
int BPF_KPROBE(do_mov_general_935)
{
    u64 addr = ctx->bx + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x156")
int BPF_KPROBE(do_mov_general_936)
{
    u64 addr = ctx->bx + 0x8f8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x160")
int BPF_KPROBE(do_switch_1808)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_init+0x160")
int BPF_KPROBE(do_hotbpf_1808)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/htb_init+0x165")
int BPF_KPROBE(do_switch_1809)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_init+0x165")
int BPF_KPROBE(do_mov_general_937)
{
    u64 addr = ctx->bx + 0x8f0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x199")
int BPF_KPROBE(do_mov_general_938)
{
    u64 addr = ctx->bx + 0x1b4;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x1b5")
int BPF_KPROBE(do_mov_general_939)
{
    u64 addr = ctx->bx + 0x19c;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x1bf")
int BPF_KPROBE(do_mov_slab_940)
{
    u64 addr = ctx->bx + 0x198;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/htb_init+0x1e5")
int BPF_KPROBE(do_mov_general_941)
{
    u64 addr = ctx->dx + ctx->r14 * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x2bc")
int BPF_KPROBE(do_mov_general_942)
{
    u64 addr = ctx->bx + 0x8fc;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x2e4")
int BPF_KPROBE(do_mov_general_943)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/htb_init+0x308")
int BPF_KPROBE(do_mov_general_944)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/htb_attach+0xb6")
int BPF_KPROBE(do_mov_general_945)
{
    u64 addr = ctx->r12 + 0x8f0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_activate_prios+0xd4")
int BPF_KPROBE(do_mov_general_946)
{
    u64 addr = ctx->dx + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_activate_prios+0xdb")
int BPF_KPROBE(do_mov_general_947)
{
    u64 addr = ctx->dx + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_activate_prios+0xe6")
int BPF_KPROBE(do_mov_general_948)
{
    u64 addr = ctx->dx + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_activate_prios+0xf1")
int BPF_KPROBE(do_mov_general_949)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/htb_activate_prios+0x201")
int BPF_KPROBE(do_mov_general_950)
{
    u64 addr = ctx->dx + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_activate_prios+0x208")
int BPF_KPROBE(do_mov_general_951)
{
    u64 addr = ctx->dx + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_activate_prios+0x213")
int BPF_KPROBE(do_mov_general_952)
{
    u64 addr = ctx->dx + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_activate_prios+0x21e")
int BPF_KPROBE(do_mov_general_953)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dump+0x3d")
int BPF_KPROBE(do_mov_general_954)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dump+0x59")
int BPF_KPROBE(do_mov_general_955)
{
    u64 addr = ctx->bx + 0xd0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dump+0x100")
int BPF_KPROBE(do_mov_general_956)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0x4d")
int BPF_KPROBE(do_mov_general_957)
{
    u64 addr = ctx->bx + 0xf0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0x58")
int BPF_KPROBE(do_mov_general_958)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0x77")
int BPF_KPROBE(do_mov_general_959)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0xb0")
int BPF_KPROBE(do_mov_general_960)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0x103")
int BPF_KPROBE(do_mov_general_961)
{
    u64 addr = ctx->r12 + 0x2b0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0x10f")
int BPF_KPROBE(do_mov_slab_962)
{
    u64 addr = ctx->r12 + 0x8e8;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/htb_reset+0x12f")
int BPF_KPROBE(do_mov_general_963)
{
    u64 addr = ctx->r12 + 0x290;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0x13b")
int BPF_KPROBE(do_mov_general_964)
{
    u64 addr = ctx->r12 + 0x298;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0x147")
int BPF_KPROBE(do_mov_general_965)
{
    u64 addr = ctx->r12 + 0x2a0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0x154")
int BPF_KPROBE(do_mov_general_966)
{
    u64 addr = ctx->r12 + 0x2a8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0x178")
int BPF_KPROBE(do_switch_1837)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_reset+0x17d")
int BPF_KPROBE(do_switch_1838)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_reset+0x17d")
int BPF_KPROBE(do_mov_general_967)
{
    u64 addr = ctx->r12 + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0x189")
int BPF_KPROBE(do_mov_general_968)
{
    u64 addr = ctx->r12 + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_reset+0x195")
int BPF_KPROBE(do_mov_general_969)
{
    u64 addr = ctx->r12 + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_deactivate_prios+0xd0")
int BPF_KPROBE(do_mov_general_970)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/htb_deactivate_prios+0x131")
int BPF_KPROBE(do_mov_general_971)
{
    u64 addr = ctx->cx + 0xf8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_deactivate_prios+0x13c")
int BPF_KPROBE(do_mov_general_972)
{
    u64 addr = ctx->cx + 0x100;
    check(addr);
    return 0;
}


SEC("kprobe/htb_deactivate_prios+0x22a")
int BPF_KPROBE(do_mov_general_973)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/htb_deactivate_prios+0x25a")
int BPF_KPROBE(do_mov_general_974)
{
    u64 addr = ctx->r11 + 0x140;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class_mode+0x87")
int BPF_KPROBE(do_mov_general_975)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class_mode+0xad")
int BPF_KPROBE(do_mov_general_976)
{
    u64 addr = ctx->r12 + 0x1bc;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class_mode+0xe3")
int BPF_KPROBE(do_mov_general_977)
{
    u64 addr = ctx->r12 + 0x1bc;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class_mode+0xf5")
int BPF_KPROBE(do_mov_general_978)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/htb_qlen_notify+0x26")
int BPF_KPROBE(do_mov_general_979)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dequeue+0x42")
int BPF_KPROBE(do_mov_general_980)
{
    u64 addr = ctx->di + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dequeue+0x52")
int BPF_KPROBE(do_mov_general_981)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dequeue+0xed")
int BPF_KPROBE(do_mov_general_982)
{
    u64 addr = ctx->bx + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/htb_dequeue+0x44f")
int BPF_KPROBE(do_mov_general_983)
{
    u64 addr = ctx->di + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_graft+0x76")
int BPF_KPROBE(do_mov_general_984)
{
    u64 addr = ctx->r15 + 0x110;
    check(addr);
    return 0;
}


SEC("kprobe/htb_graft+0xa8")
int BPF_KPROBE(do_switch_1848)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_graft+0xad")
int BPF_KPROBE(do_switch_1849)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_graft+0xee")
int BPF_KPROBE(do_mov_general_985)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/htb_parent_to_leaf+0x45")
int BPF_KPROBE(do_mov_slab_986)
{
    u64 addr = ctx->bx + 0x7c;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/htb_parent_to_leaf+0x4c")
int BPF_KPROBE(do_mov_general_987)
{
    u64 addr = ctx->bx + 0xf0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_parent_to_leaf+0x5b")
int BPF_KPROBE(do_mov_general_988)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_parent_to_leaf+0x88")
int BPF_KPROBE(do_mov_general_989)
{
    u64 addr = ctx->bx + 0x110;
    check(addr);
    return 0;
}


SEC("kprobe/htb_parent_to_leaf+0x8f")
int BPF_KPROBE(do_mov_general_990)
{
    u64 addr = ctx->bx + 0xd8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_parent_to_leaf+0x9a")
int BPF_KPROBE(do_mov_general_991)
{
    u64 addr = ctx->bx + 0xe0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_parent_to_leaf+0xa6")
int BPF_KPROBE(do_mov_general_992)
{
    u64 addr = ctx->bx + 0x1bc;
    check(addr);
    return 0;
}


SEC("kprobe/htb_parent_to_leaf+0xb0")
int BPF_KPROBE(do_mov_general_993)
{
    u64 addr = ctx->bx + 0xe8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_parent_to_leaf+0xc9")
int BPF_KPROBE(do_mov_general_994)
{
    u64 addr = ctx->bx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/htb_parent_to_leaf+0x137")
int BPF_KPROBE(do_mov_general_995)
{
    u64 addr = ctx->bx + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_destroy_class_offload+0x31a")
int BPF_KPROBE(do_mov_general_996)
{
    u64 addr = ctx->bx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/htb_destroy_class_offload+0x3c2")
int BPF_KPROBE(do_mov_general_997)
{
    u64 addr = ctx->dx + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/htb_destroy_class_offload+0x3c6")
int BPF_KPROBE(do_mov_general_998)
{
    u64 addr = ctx->bx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/htb_destroy_class_offload+0x3d2")
int BPF_KPROBE(do_mov_general_999)
{
    u64 addr = ctx->si + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/htb_destroy_class_offload+0x3dd")
int BPF_KPROBE(do_mov_general_1000)
{
    u64 addr = ctx->bx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/htb_destroy+0x43")
int BPF_KPROBE(do_switch_1882)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_destroy+0x48")
int BPF_KPROBE(do_switch_1883)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_destroy+0x98")
int BPF_KPROBE(do_mov_general_1001)
{
    u64 addr = ctx->bx + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/htb_destroy+0x1a0")
int BPF_KPROBE(do_switch_1891)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_destroy+0x1a5")
int BPF_KPROBE(do_switch_1892)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_destroy+0x33a")
int BPF_KPROBE(do_switch_1903)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_destroy+0x33f")
int BPF_KPROBE(do_switch_1904)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_destroy+0x374")
int BPF_KPROBE(do_switch_1907)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_destroy+0x379")
int BPF_KPROBE(do_switch_1908)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_destroy+0x379")
int BPF_KPROBE(do_mov_general_1002)
{
    u64 addr = ctx->r12 + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_destroy+0x385")
int BPF_KPROBE(do_mov_general_1003)
{
    u64 addr = ctx->r12 + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_destroy+0x391")
int BPF_KPROBE(do_mov_general_1004)
{
    u64 addr = ctx->r12 + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_delete+0x16c")
int BPF_KPROBE(do_switch_1916)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_delete+0x171")
int BPF_KPROBE(do_switch_1917)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_delete+0x223")
int BPF_KPROBE(do_switch_1922)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_delete+0x228")
int BPF_KPROBE(do_switch_1923)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_delete+0x2bd")
int BPF_KPROBE(do_mov_general_1005)
{
    u64 addr = ctx->r14 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_delete+0x2e9")
int BPF_KPROBE(do_mov_general_1006)
{
    u64 addr = ctx->r14 + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0xe6")
int BPF_KPROBE(do_mov_general_1007)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0xe9")
int BPF_KPROBE(do_mov_general_1008)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0x20d")
int BPF_KPROBE(do_mov_general_1009)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0x214")
int BPF_KPROBE(do_mov_general_1010)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0x21d")
int BPF_KPROBE(do_mov_general_1011)
{
    u64 addr = ctx->bx + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0x22e")
int BPF_KPROBE(do_mov_general_1012)
{
    u64 addr = ctx->bx + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0x25a")
int BPF_KPROBE(do_mov_general_1013)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0x25d")
int BPF_KPROBE(do_mov_general_1014)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0x2b3")
int BPF_KPROBE(do_mov_general_1015)
{
    u64 addr = ctx->r12 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0x32b")
int BPF_KPROBE(do_mov_general_1016)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0x333")
int BPF_KPROBE(do_mov_general_1017)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0x342")
int BPF_KPROBE(do_mov_general_1018)
{
    u64 addr = ctx->bx + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_enqueue+0x349")
int BPF_KPROBE(do_mov_general_1019)
{
    u64 addr = ctx->bx + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x23e")
int BPF_KPROBE(do_switch_1947)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0x243")
int BPF_KPROBE(do_switch_1948)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0x37d")
int BPF_KPROBE(do_mov_general_1020)
{
    u64 addr = ctx->si + 0x64;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x39f")
int BPF_KPROBE(do_mov_general_1021)
{
    u64 addr = ctx->ax + 0x64;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x3b7")
int BPF_KPROBE(do_mov_general_1022)
{
    u64 addr = ctx->cx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x3c9")
int BPF_KPROBE(do_mov_slab_1023)
{
    u64 addr = ctx->si + 0x48;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/htb_change_class+0x3d5")
int BPF_KPROBE(do_mov_general_1024)
{
    u64 addr = ctx->si + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x54a")
int BPF_KPROBE(do_mov_general_1025)
{
    u64 addr = ctx->si + 0x64;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x583")
int BPF_KPROBE(do_mov_general_1026)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x5b1")
int BPF_KPROBE(do_mov_general_1027)
{
    u64 addr = ctx->ax + 0x64;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x667")
int BPF_KPROBE(do_switch_1966)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0x667")
int BPF_KPROBE(do_hotbpf_1966)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/htb_change_class+0x66c")
int BPF_KPROBE(do_switch_1967)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0x686")
int BPF_KPROBE(do_switch_1968)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0x68b")
int BPF_KPROBE(do_switch_1969)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0x699")
int BPF_KPROBE(do_switch_1970)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0x69e")
int BPF_KPROBE(do_switch_1971)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0x70d")
int BPF_KPROBE(do_switch_1973)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0x712")
int BPF_KPROBE(do_switch_1974)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0x72b")
int BPF_KPROBE(do_mov_general_1028)
{
    u64 addr = ctx->cx + 0x80;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x746")
int BPF_KPROBE(do_mov_general_1029)
{
    u64 addr = ctx->cx + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x754")
int BPF_KPROBE(do_mov_general_1030)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x76e")
int BPF_KPROBE(do_mov_slab_1031)
{
    u64 addr = ctx->ax;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/htb_change_class+0x867")
int BPF_KPROBE(do_mov_general_1032)
{
    u64 addr = ctx->cx + 0x110;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x877")
int BPF_KPROBE(do_mov_general_1033)
{
    u64 addr = ctx->cx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x885")
int BPF_KPROBE(do_mov_general_1034)
{
    u64 addr = ctx->cx + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x894")
int BPF_KPROBE(do_mov_general_1035)
{
    u64 addr = ctx->cx + 0xd8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x8a3")
int BPF_KPROBE(do_mov_general_1036)
{
    u64 addr = ctx->cx + 0xe0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x8b4")
int BPF_KPROBE(do_mov_slab_1037)
{
    u64 addr = ctx->cx + 0x58;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/htb_change_class+0x8cb")
int BPF_KPROBE(do_mov_general_1038)
{
    u64 addr = ctx->cx + 0xe8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x8d5")
int BPF_KPROBE(do_mov_slab_1039)
{
    u64 addr = ctx->cx + 0x1bc;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/htb_change_class+0x936")
int BPF_KPROBE(do_mov_general_1040)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x964")
int BPF_KPROBE(do_mov_general_1041)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0xb4b")
int BPF_KPROBE(do_mov_general_1042)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0xb96")
int BPF_KPROBE(do_switch_1991)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0xb9b")
int BPF_KPROBE(do_switch_1992)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0xc0a")
int BPF_KPROBE(do_mov_general_1043)
{
    u64 addr = ctx->bx + 0x1bc;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0xc32")
int BPF_KPROBE(do_mov_slab_1044)
{
    u64 addr = ctx->bx + 0x7c;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/htb_change_class+0xc37")
int BPF_KPROBE(do_mov_general_1045)
{
    u64 addr = ctx->bx + 0xf0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0xc46")
int BPF_KPROBE(do_mov_general_1046)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0xdc3")
int BPF_KPROBE(do_mov_general_1047)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0xdf0")
int BPF_KPROBE(do_mov_general_1048)
{
    u64 addr = ctx->bx + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/htb_change_class+0x2e9002")
int BPF_KPROBE(do_switch_2004)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/htb_change_class+0x2e9007")
int BPF_KPROBE(do_switch_2005)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sc2isc+0x38")
int BPF_KPROBE(do_mov_general_1049)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/sc2isc+0x59")
int BPF_KPROBE(do_mov_general_1050)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sc2isc+0x8d")
int BPF_KPROBE(do_mov_general_1051)
{
    u64 addr = ctx->si + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/sc2isc+0xab")
int BPF_KPROBE(do_mov_general_1052)
{
    u64 addr = ctx->si + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/sc2isc+0xd2")
int BPF_KPROBE(do_mov_general_1053)
{
    u64 addr = ctx->si + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/sc2isc+0xf4")
int BPF_KPROBE(do_mov_general_1054)
{
    u64 addr = ctx->si + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/rtsc_min+0x89")
int BPF_KPROBE(do_mov_general_1055)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/rtsc_min+0x9b")
int BPF_KPROBE(do_mov_general_1056)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/rtsc_min+0xb1")
int BPF_KPROBE(do_mov_general_1057)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/rtsc_min+0xce")
int BPF_KPROBE(do_mov_general_1058)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/rtsc_min+0xe1")
int BPF_KPROBE(do_mov_general_1059)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/rtsc_min+0xe4")
int BPF_KPROBE(do_mov_general_1060)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/rtsc_min+0xf7")
int BPF_KPROBE(do_mov_general_1061)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/rtsc_min+0xfa")
int BPF_KPROBE(do_mov_general_1062)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/rtsc_min+0x102")
int BPF_KPROBE(do_mov_general_1063)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/rtsc_min+0x10a")
int BPF_KPROBE(do_mov_general_1064)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x43")
int BPF_KPROBE(do_mov_general_1065)
{
    u64 addr = ctx->bx + 0xf8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x55")
int BPF_KPROBE(do_mov_general_1066)
{
    u64 addr = ctx->bx + 0x100;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x60")
int BPF_KPROBE(do_mov_general_1067)
{
    u64 addr = ctx->bx + 0x108;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x6b")
int BPF_KPROBE(do_mov_general_1068)
{
    u64 addr = ctx->bx + 0x110;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x76")
int BPF_KPROBE(do_mov_general_1069)
{
    u64 addr = ctx->bx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x81")
int BPF_KPROBE(do_mov_general_1070)
{
    u64 addr = ctx->bx + 0x140;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x8c")
int BPF_KPROBE(do_mov_general_1071)
{
    u64 addr = ctx->bx + 0x138;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x97")
int BPF_KPROBE(do_mov_general_1072)
{
    u64 addr = ctx->bx + 0x148;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0xa2")
int BPF_KPROBE(do_mov_general_1073)
{
    u64 addr = ctx->bx + 0x120;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0xad")
int BPF_KPROBE(do_mov_general_1074)
{
    u64 addr = ctx->bx + 0x128;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0xb8")
int BPF_KPROBE(do_mov_general_1075)
{
    u64 addr = ctx->bx + 0x130;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0xc3")
int BPF_KPROBE(do_mov_general_1076)
{
    u64 addr = ctx->bx + 0x2e4;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0xcd")
int BPF_KPROBE(do_mov_general_1077)
{
    u64 addr = ctx->bx + 0x2e8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0xd8")
int BPF_KPROBE(do_mov_general_1078)
{
    u64 addr = ctx->bx + 0xb8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0xe3")
int BPF_KPROBE(do_mov_general_1079)
{
    u64 addr = ctx->bx + 0xd8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x105")
int BPF_KPROBE(do_mov_general_1080)
{
    u64 addr = ctx->bx + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x110")
int BPF_KPROBE(do_mov_general_1081)
{
    u64 addr = ctx->bx + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x11b")
int BPF_KPROBE(do_mov_general_1082)
{
    u64 addr = ctx->bx + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x129")
int BPF_KPROBE(do_mov_general_1083)
{
    u64 addr = ctx->bx + 0x1f8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x137")
int BPF_KPROBE(do_mov_general_1084)
{
    u64 addr = ctx->bx + 0x200;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x145")
int BPF_KPROBE(do_mov_general_1085)
{
    u64 addr = ctx->bx + 0x208;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x153")
int BPF_KPROBE(do_mov_general_1086)
{
    u64 addr = ctx->bx + 0x210;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x161")
int BPF_KPROBE(do_mov_general_1087)
{
    u64 addr = ctx->bx + 0x218;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x173")
int BPF_KPROBE(do_mov_general_1088)
{
    u64 addr = ctx->bx + 0x260;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x17e")
int BPF_KPROBE(do_mov_general_1089)
{
    u64 addr = ctx->bx + 0x268;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x189")
int BPF_KPROBE(do_mov_general_1090)
{
    u64 addr = ctx->bx + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x197")
int BPF_KPROBE(do_mov_general_1091)
{
    u64 addr = ctx->bx + 0x278;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x1a5")
int BPF_KPROBE(do_mov_general_1092)
{
    u64 addr = ctx->bx + 0x280;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x1b3")
int BPF_KPROBE(do_mov_general_1093)
{
    u64 addr = ctx->bx + 0x288;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x1c1")
int BPF_KPROBE(do_mov_general_1094)
{
    u64 addr = ctx->bx + 0x290;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x1cf")
int BPF_KPROBE(do_mov_general_1095)
{
    u64 addr = ctx->bx + 0x298;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x1e1")
int BPF_KPROBE(do_mov_general_1096)
{
    u64 addr = ctx->bx + 0x2a0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x1ec")
int BPF_KPROBE(do_mov_general_1097)
{
    u64 addr = ctx->bx + 0x2a8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x1f7")
int BPF_KPROBE(do_mov_general_1098)
{
    u64 addr = ctx->bx + 0x2b0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x205")
int BPF_KPROBE(do_mov_general_1099)
{
    u64 addr = ctx->bx + 0x2b8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x213")
int BPF_KPROBE(do_mov_general_1100)
{
    u64 addr = ctx->bx + 0x2c0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x221")
int BPF_KPROBE(do_mov_general_1101)
{
    u64 addr = ctx->bx + 0x2c8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x22f")
int BPF_KPROBE(do_mov_general_1102)
{
    u64 addr = ctx->bx + 0x2d0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x23d")
int BPF_KPROBE(do_mov_general_1103)
{
    u64 addr = ctx->bx + 0x2d8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_reset_qdisc+0x262")
int BPF_KPROBE(do_mov_general_1104)
{
    u64 addr = ctx->r13 + 0x498;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0x5b")
int BPF_KPROBE(do_mov_general_1105)
{
    u64 addr = ctx->r12 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0x86")
int BPF_KPROBE(do_mov_general_1106)
{
    u64 addr = ctx->r12 + 0x498;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0xb4")
int BPF_KPROBE(do_switch_2018)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0xb9")
int BPF_KPROBE(do_switch_2019)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0xc5")
int BPF_KPROBE(do_mov_general_1107)
{
    u64 addr = ctx->r12 + 0x1f8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0xd4")
int BPF_KPROBE(do_mov_general_1108)
{
    u64 addr = ctx->r12 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0xe1")
int BPF_KPROBE(do_mov_general_1109)
{
    u64 addr = ctx->r12 + 0x228;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0x10e")
int BPF_KPROBE(do_mov_general_1110)
{
    u64 addr = ctx->r12 + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0x11a")
int BPF_KPROBE(do_mov_general_1111)
{
    u64 addr = ctx->r12 + 0x218;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0x122")
int BPF_KPROBE(do_mov_general_1112)
{
    u64 addr = ctx->r12 + 0x268;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0x12e")
int BPF_KPROBE(do_mov_general_1113)
{
    u64 addr = ctx->r12 + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_init_qdisc+0x154")
int BPF_KPROBE(do_mov_general_1114)
{
    u64 addr = ctx->r12 + 0x228;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dump_class_stats+0x54")
int BPF_KPROBE(do_switch_2024)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_dump_class_stats+0x59")
int BPF_KPROBE(do_switch_2025)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_dump_class_stats+0x75")
int BPF_KPROBE(do_mov_general_1115)
{
    u64 addr = ctx->bx + 0x34;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dump_class_stats+0x9d")
int BPF_KPROBE(do_switch_2026)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_dump_class_stats+0xa2")
int BPF_KPROBE(do_switch_2027)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_dump_class_stats+0xad")
int BPF_KPROBE(do_switch_2028)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_dump_class_stats+0xb2")
int BPF_KPROBE(do_switch_2029)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_dump_class_stats+0xc2")
int BPF_KPROBE(do_switch_2030)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_dump_class_stats+0xc7")
int BPF_KPROBE(do_switch_2031)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_dump_class_stats+0xd7")
int BPF_KPROBE(do_switch_2032)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_dump_class_stats+0xdc")
int BPF_KPROBE(do_switch_2033)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_walk+0x56")
int BPF_KPROBE(do_mov_general_1116)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_walk+0x83")
int BPF_KPROBE(do_mov_general_1117)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_destroy_qdisc+0x48")
int BPF_KPROBE(do_mov_general_1118)
{
    u64 addr = ctx->bx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_destroy_qdisc+0xbc")
int BPF_KPROBE(do_switch_2039)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_destroy_qdisc+0xc1")
int BPF_KPROBE(do_switch_2040)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/init_ed+0x4b")
int BPF_KPROBE(do_mov_general_1119)
{
    u64 addr = ctx->bx + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0x59")
int BPF_KPROBE(do_mov_general_1120)
{
    u64 addr = ctx->bx + 0x228;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0x67")
int BPF_KPROBE(do_mov_general_1121)
{
    u64 addr = ctx->bx + 0x230;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0x75")
int BPF_KPROBE(do_mov_general_1122)
{
    u64 addr = ctx->bx + 0x238;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0x83")
int BPF_KPROBE(do_mov_general_1123)
{
    u64 addr = ctx->bx + 0x240;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0x91")
int BPF_KPROBE(do_mov_general_1124)
{
    u64 addr = ctx->bx + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0x9f")
int BPF_KPROBE(do_mov_general_1125)
{
    u64 addr = ctx->bx + 0x250;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0xad")
int BPF_KPROBE(do_mov_general_1126)
{
    u64 addr = ctx->bx + 0x258;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0xc4")
int BPF_KPROBE(do_mov_general_1127)
{
    u64 addr = ctx->bx + 0x240;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0xcf")
int BPF_KPROBE(do_mov_general_1128)
{
    u64 addr = ctx->bx + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0xef")
int BPF_KPROBE(do_mov_general_1129)
{
    u64 addr = ctx->bx + 0x110;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0x105")
int BPF_KPROBE(do_mov_general_1130)
{
    u64 addr = ctx->bx + 0x108;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0x141")
int BPF_KPROBE(do_mov_general_1131)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0x148")
int BPF_KPROBE(do_mov_general_1132)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0x153")
int BPF_KPROBE(do_mov_general_1133)
{
    u64 addr = ctx->bx + 0xb0;
    check(addr);
    return 0;
}


SEC("kprobe/init_ed+0x15e")
int BPF_KPROBE(do_mov_general_1134)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/update_ed+0x3b")
int BPF_KPROBE(do_mov_general_1135)
{
    u64 addr = ctx->bx + 0x110;
    check(addr);
    return 0;
}


SEC("kprobe/update_ed+0x4d")
int BPF_KPROBE(do_mov_general_1136)
{
    u64 addr = ctx->bx + 0x108;
    check(addr);
    return 0;
}


SEC("kprobe/update_ed+0x9d")
int BPF_KPROBE(do_mov_general_1137)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/update_ed+0xa7")
int BPF_KPROBE(do_mov_general_1138)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/update_ed+0xb2")
int BPF_KPROBE(do_mov_general_1139)
{
    u64 addr = ctx->bx + 0xb0;
    check(addr);
    return 0;
}


SEC("kprobe/update_ed+0xbd")
int BPF_KPROBE(do_mov_general_1140)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x50")
int BPF_KPROBE(do_mov_general_1141)
{
    u64 addr = ctx->bx + 0xf8;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x85")
int BPF_KPROBE(do_mov_general_1142)
{
    u64 addr = ctx->bx + 0x2ec;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0xa0")
int BPF_KPROBE(do_mov_general_1143)
{
    u64 addr = ctx->bx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0xc0")
int BPF_KPROBE(do_mov_general_1144)
{
    u64 addr = ctx->r13 + 0x148;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x112")
int BPF_KPROBE(do_mov_general_1145)
{
    u64 addr = ctx->r13 + 0x130;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x142")
int BPF_KPROBE(do_mov_general_1146)
{
    u64 addr = ctx->bx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x158")
int BPF_KPROBE(do_mov_general_1147)
{
    u64 addr = ctx->bx + 0x140;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x166")
int BPF_KPROBE(do_mov_general_1148)
{
    u64 addr = ctx->bx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x1bc")
int BPF_KPROBE(do_mov_general_1149)
{
    u64 addr = ctx->bx + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x1c6")
int BPF_KPROBE(do_mov_general_1150)
{
    u64 addr = ctx->bx + 0xc8;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x1d1")
int BPF_KPROBE(do_mov_general_1151)
{
    u64 addr = ctx->bx + 0xd0;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x1dc")
int BPF_KPROBE(do_mov_general_1152)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x221")
int BPF_KPROBE(do_mov_general_1153)
{
    u64 addr = ctx->bx + 0x120;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x27b")
int BPF_KPROBE(do_mov_general_1154)
{
    u64 addr = ctx->bx + 0xe0;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x285")
int BPF_KPROBE(do_mov_general_1155)
{
    u64 addr = ctx->bx + 0xe8;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x290")
int BPF_KPROBE(do_mov_general_1156)
{
    u64 addr = ctx->bx + 0xf0;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x29b")
int BPF_KPROBE(do_mov_general_1157)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x2ca")
int BPF_KPROBE(do_mov_general_1158)
{
    u64 addr = ctx->r13 + 0x130;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x2e9")
int BPF_KPROBE(do_mov_general_1159)
{
    u64 addr = ctx->bx + 0x128;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x2f8")
int BPF_KPROBE(do_mov_general_1160)
{
    u64 addr = ctx->bx + 0x140;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x306")
int BPF_KPROBE(do_mov_general_1161)
{
    u64 addr = ctx->bx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x312")
int BPF_KPROBE(do_mov_general_1162)
{
    u64 addr = ctx->r13 + 0x130;
    check(addr);
    return 0;
}


SEC("kprobe/update_vf.constprop.0+0x322")
int BPF_KPROBE(do_mov_general_1163)
{
    u64 addr = ctx->r13 + 0x130;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x3d")
int BPF_KPROBE(do_mov_general_1164)
{
    u64 addr = ctx->bx + 0x2ec;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x70")
int BPF_KPROBE(do_mov_general_1165)
{
    u64 addr = ctx->bx + 0x120;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0xca")
int BPF_KPROBE(do_mov_general_1166)
{
    u64 addr = ctx->bx + 0xe0;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0xd4")
int BPF_KPROBE(do_mov_general_1167)
{
    u64 addr = ctx->bx + 0xe8;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0xdf")
int BPF_KPROBE(do_mov_general_1168)
{
    u64 addr = ctx->bx + 0xf0;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0xea")
int BPF_KPROBE(do_mov_general_1169)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x116")
int BPF_KPROBE(do_mov_general_1170)
{
    u64 addr = ctx->r14 + 0x130;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x18d")
int BPF_KPROBE(do_mov_general_1171)
{
    u64 addr = ctx->bx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x1bc")
int BPF_KPROBE(do_mov_general_1172)
{
    u64 addr = ctx->bx + 0x140;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x1cd")
int BPF_KPROBE(do_mov_general_1173)
{
    u64 addr = ctx->bx + 0x2e8;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x1e0")
int BPF_KPROBE(do_mov_general_1174)
{
    u64 addr = ctx->bx + 0x2e8;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x1e6")
int BPF_KPROBE(do_mov_general_1175)
{
    u64 addr = ctx->bx + 0x120;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x226")
int BPF_KPROBE(do_mov_general_1176)
{
    u64 addr = ctx->bx + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x22d")
int BPF_KPROBE(do_mov_general_1177)
{
    u64 addr = ctx->bx + 0xc8;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x238")
int BPF_KPROBE(do_mov_general_1178)
{
    u64 addr = ctx->bx + 0xd0;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x243")
int BPF_KPROBE(do_mov_general_1179)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x296")
int BPF_KPROBE(do_mov_general_1180)
{
    u64 addr = ctx->bx + 0xe0;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x29d")
int BPF_KPROBE(do_mov_general_1181)
{
    u64 addr = ctx->bx + 0xe8;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x2a8")
int BPF_KPROBE(do_mov_general_1182)
{
    u64 addr = ctx->bx + 0xf0;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x2b3")
int BPF_KPROBE(do_mov_general_1183)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x306")
int BPF_KPROBE(do_mov_general_1184)
{
    u64 addr = ctx->bx + 0x128;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x32b")
int BPF_KPROBE(do_mov_general_1185)
{
    u64 addr = ctx->bx + 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/init_vf.constprop.0+0x332")
int BPF_KPROBE(do_mov_general_1186)
{
    u64 addr = ctx->ax + 0x138;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_qdisc+0x4c")
int BPF_KPROBE(do_mov_general_1187)
{
    u64 addr = ctx->bx + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_graft_class+0x78")
int BPF_KPROBE(do_mov_general_1188)
{
    u64 addr = ctx->r12 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_graft_class+0xab")
int BPF_KPROBE(do_switch_2085)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_graft_class+0xb0")
int BPF_KPROBE(do_switch_2086)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_graft_class+0xf8")
int BPF_KPROBE(do_mov_general_1189)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_delete_class+0x7e")
int BPF_KPROBE(do_mov_general_1190)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_delete_class+0x82")
int BPF_KPROBE(do_mov_general_1191)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_delete_class+0x94")
int BPF_KPROBE(do_mov_general_1192)
{
    u64 addr = ctx->r12 + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_delete_class+0x9d")
int BPF_KPROBE(do_mov_general_1193)
{
    u64 addr = ctx->r12 + 0x80;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_delete_class+0xd9")
int BPF_KPROBE(do_mov_general_1194)
{
    u64 addr = ctx->r8 + 0x64;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_delete_class+0x114")
int BPF_KPROBE(do_switch_2098)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_delete_class+0x119")
int BPF_KPROBE(do_switch_2099)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_delete_class+0x190")
int BPF_KPROBE(do_switch_2107)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_delete_class+0x195")
int BPF_KPROBE(do_switch_2108)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_dequeue+0xc4")
int BPF_KPROBE(do_mov_general_1195)
{
    u64 addr = ctx->ax + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dequeue+0xd2")
int BPF_KPROBE(do_mov_general_1196)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dequeue+0xda")
int BPF_KPROBE(do_mov_general_1197)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dequeue+0xe2")
int BPF_KPROBE(do_mov_general_1198)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dequeue+0xe6")
int BPF_KPROBE(do_mov_general_1199)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dequeue+0x1b3")
int BPF_KPROBE(do_mov_general_1200)
{
    u64 addr = ctx->r14 + 0x108;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dequeue+0x273")
int BPF_KPROBE(do_mov_general_1201)
{
    u64 addr = ctx->ax + 0x138;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dump_class+0x37")
int BPF_KPROBE(do_mov_general_1202)
{
    u64 addr = ctx->cx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dump_class+0x3c")
int BPF_KPROBE(do_mov_general_1203)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dump_class+0x50")
int BPF_KPROBE(do_mov_general_1204)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_dump_class+0xc0")
int BPF_KPROBE(do_mov_general_1205)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x1f1")
int BPF_KPROBE(do_switch_2138)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x1f6")
int BPF_KPROBE(do_switch_2139)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x273")
int BPF_KPROBE(do_mov_general_1206)
{
    u64 addr = ctx->r12 + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x28b")
int BPF_KPROBE(do_mov_general_1207)
{
    u64 addr = ctx->r12 + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x2a3")
int BPF_KPROBE(do_mov_general_1208)
{
    u64 addr = ctx->r12 + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x2b3")
int BPF_KPROBE(do_mov_general_1209)
{
    u64 addr = ctx->r12 + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x2bb")
int BPF_KPROBE(do_mov_general_1210)
{
    u64 addr = ctx->r12 + 0x1f8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x2c3")
int BPF_KPROBE(do_mov_general_1211)
{
    u64 addr = ctx->r12 + 0x200;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x2cb")
int BPF_KPROBE(do_mov_general_1212)
{
    u64 addr = ctx->r12 + 0x208;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x2d3")
int BPF_KPROBE(do_mov_general_1213)
{
    u64 addr = ctx->r12 + 0x210;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x2db")
int BPF_KPROBE(do_mov_general_1214)
{
    u64 addr = ctx->r12 + 0x218;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x2e3")
int BPF_KPROBE(do_mov_general_1215)
{
    u64 addr = ctx->r12 + 0x228;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x2eb")
int BPF_KPROBE(do_mov_general_1216)
{
    u64 addr = ctx->r12 + 0x230;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x2f3")
int BPF_KPROBE(do_mov_general_1217)
{
    u64 addr = ctx->r12 + 0x238;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x2fb")
int BPF_KPROBE(do_mov_general_1218)
{
    u64 addr = ctx->r12 + 0x240;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x303")
int BPF_KPROBE(do_mov_general_1219)
{
    u64 addr = ctx->r12 + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x30b")
int BPF_KPROBE(do_mov_general_1220)
{
    u64 addr = ctx->r12 + 0x250;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x313")
int BPF_KPROBE(do_mov_general_1221)
{
    u64 addr = ctx->r12 + 0x258;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x320")
int BPF_KPROBE(do_mov_general_1222)
{
    u64 addr = ctx->r12 + 0x240;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x32c")
int BPF_KPROBE(do_mov_general_1223)
{
    u64 addr = ctx->r12 + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x33d")
int BPF_KPROBE(do_mov_general_1224)
{
    u64 addr = ctx->r12 + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x378")
int BPF_KPROBE(do_mov_general_1225)
{
    u64 addr = ctx->r12 + 0x268;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x388")
int BPF_KPROBE(do_mov_general_1226)
{
    u64 addr = ctx->r12 + 0x260;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x390")
int BPF_KPROBE(do_mov_general_1227)
{
    u64 addr = ctx->r12 + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x3a0")
int BPF_KPROBE(do_mov_general_1228)
{
    u64 addr = ctx->r12 + 0x278;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x3b0")
int BPF_KPROBE(do_mov_general_1229)
{
    u64 addr = ctx->r12 + 0x280;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x3c0")
int BPF_KPROBE(do_mov_general_1230)
{
    u64 addr = ctx->r12 + 0x288;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x3d0")
int BPF_KPROBE(do_mov_general_1231)
{
    u64 addr = ctx->r12 + 0x290;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x3e0")
int BPF_KPROBE(do_mov_general_1232)
{
    u64 addr = ctx->r12 + 0x298;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x413")
int BPF_KPROBE(do_mov_general_1233)
{
    u64 addr = ctx->r12 + 0x2a0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x41b")
int BPF_KPROBE(do_mov_general_1234)
{
    u64 addr = ctx->r12 + 0x2a8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x42b")
int BPF_KPROBE(do_mov_general_1235)
{
    u64 addr = ctx->r12 + 0x2b0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x43b")
int BPF_KPROBE(do_mov_general_1236)
{
    u64 addr = ctx->r12 + 0x2b8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x44b")
int BPF_KPROBE(do_mov_general_1237)
{
    u64 addr = ctx->r12 + 0x2c0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x45b")
int BPF_KPROBE(do_mov_general_1238)
{
    u64 addr = ctx->r12 + 0x2c8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x46b")
int BPF_KPROBE(do_mov_general_1239)
{
    u64 addr = ctx->r12 + 0x2d0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x47b")
int BPF_KPROBE(do_mov_general_1240)
{
    u64 addr = ctx->r12 + 0x2d8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x615")
int BPF_KPROBE(do_switch_2152)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x615")
int BPF_KPROBE(do_hotbpf_2152)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/hfsc_change_class+0x61a")
int BPF_KPROBE(do_switch_2153)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x67d")
int BPF_KPROBE(do_switch_2155)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x682")
int BPF_KPROBE(do_switch_2156)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x6c5")
int BPF_KPROBE(do_mov_general_1241)
{
    u64 addr = ctx->r10 + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x6de")
int BPF_KPROBE(do_mov_general_1242)
{
    u64 addr = ctx->r10 + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x6f7")
int BPF_KPROBE(do_mov_general_1243)
{
    u64 addr = ctx->r10 + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x705")
int BPF_KPROBE(do_mov_general_1244)
{
    u64 addr = ctx->r10 + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x70c")
int BPF_KPROBE(do_mov_general_1245)
{
    u64 addr = ctx->r10 + 0x1f8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x713")
int BPF_KPROBE(do_mov_general_1246)
{
    u64 addr = ctx->r10 + 0x200;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x71a")
int BPF_KPROBE(do_mov_general_1247)
{
    u64 addr = ctx->r10 + 0x208;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x721")
int BPF_KPROBE(do_mov_general_1248)
{
    u64 addr = ctx->r10 + 0x210;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x728")
int BPF_KPROBE(do_mov_general_1249)
{
    u64 addr = ctx->r10 + 0x218;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x72f")
int BPF_KPROBE(do_mov_general_1250)
{
    u64 addr = ctx->r10 + 0x228;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x736")
int BPF_KPROBE(do_mov_general_1251)
{
    u64 addr = ctx->r10 + 0x230;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x73d")
int BPF_KPROBE(do_mov_general_1252)
{
    u64 addr = ctx->r10 + 0x238;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x744")
int BPF_KPROBE(do_mov_general_1253)
{
    u64 addr = ctx->r10 + 0x240;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x74b")
int BPF_KPROBE(do_mov_general_1254)
{
    u64 addr = ctx->r10 + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x752")
int BPF_KPROBE(do_mov_general_1255)
{
    u64 addr = ctx->r10 + 0x250;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x759")
int BPF_KPROBE(do_mov_general_1256)
{
    u64 addr = ctx->r10 + 0x258;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x765")
int BPF_KPROBE(do_mov_general_1257)
{
    u64 addr = ctx->r10 + 0x240;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x770")
int BPF_KPROBE(do_mov_general_1258)
{
    u64 addr = ctx->r10 + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x7ba")
int BPF_KPROBE(do_mov_general_1259)
{
    u64 addr = ctx->r10 + 0x268;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x7c8")
int BPF_KPROBE(do_mov_general_1260)
{
    u64 addr = ctx->r10 + 0x260;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x7cf")
int BPF_KPROBE(do_mov_general_1261)
{
    u64 addr = ctx->r10 + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x7dd")
int BPF_KPROBE(do_mov_general_1262)
{
    u64 addr = ctx->r10 + 0x278;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x7eb")
int BPF_KPROBE(do_mov_general_1263)
{
    u64 addr = ctx->r10 + 0x280;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x7f9")
int BPF_KPROBE(do_mov_general_1264)
{
    u64 addr = ctx->r10 + 0x288;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x807")
int BPF_KPROBE(do_mov_general_1265)
{
    u64 addr = ctx->r10 + 0x290;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x815")
int BPF_KPROBE(do_mov_general_1266)
{
    u64 addr = ctx->r10 + 0x298;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x84c")
int BPF_KPROBE(do_mov_general_1267)
{
    u64 addr = ctx->r10 + 0x2a0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x857")
int BPF_KPROBE(do_mov_general_1268)
{
    u64 addr = ctx->r10 + 0x2a8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x865")
int BPF_KPROBE(do_mov_general_1269)
{
    u64 addr = ctx->r10 + 0x2b0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x873")
int BPF_KPROBE(do_mov_general_1270)
{
    u64 addr = ctx->r10 + 0x2b8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x881")
int BPF_KPROBE(do_mov_general_1271)
{
    u64 addr = ctx->r10 + 0x2c0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x88f")
int BPF_KPROBE(do_mov_general_1272)
{
    u64 addr = ctx->r10 + 0x2c8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x89d")
int BPF_KPROBE(do_mov_general_1273)
{
    u64 addr = ctx->r10 + 0x2d0;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x8ab")
int BPF_KPROBE(do_mov_general_1274)
{
    u64 addr = ctx->r10 + 0x2d8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x8b9")
int BPF_KPROBE(do_mov_general_1275)
{
    u64 addr = ctx->r10;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x8c2")
int BPF_KPROBE(do_mov_general_1276)
{
    u64 addr = ctx->r10 + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x8d0")
int BPF_KPROBE(do_mov_general_1277)
{
    u64 addr = ctx->r10 + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x8e4")
int BPF_KPROBE(do_mov_general_1278)
{
    u64 addr = ctx->r10 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x912")
int BPF_KPROBE(do_mov_general_1279)
{
    u64 addr = ctx->r10 + 0xb8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x91d")
int BPF_KPROBE(do_mov_general_1280)
{
    u64 addr = ctx->r10 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x924")
int BPF_KPROBE(do_mov_general_1281)
{
    u64 addr = ctx->r10 + 0xd8;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x92f")
int BPF_KPROBE(do_mov_general_1282)
{
    u64 addr = ctx->r10 + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x97e")
int BPF_KPROBE(do_mov_general_1283)
{
    u64 addr = ctx->r12 + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x986")
int BPF_KPROBE(do_mov_general_1284)
{
    u64 addr = ctx->r10 + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x98a")
int BPF_KPROBE(do_mov_general_1285)
{
    u64 addr = ctx->r10 + 0x80;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x991")
int BPF_KPROBE(do_mov_general_1286)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0x9cf")
int BPF_KPROBE(do_mov_general_1287)
{
    u64 addr = ctx->r12 + 0x64;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0xa21")
int BPF_KPROBE(do_mov_general_1288)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0xb17")
int BPF_KPROBE(do_mov_general_1289)
{
    u64 addr = ctx->r10 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_change_class+0xb76")
int BPF_KPROBE(do_switch_2175)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_change_class+0xb7b")
int BPF_KPROBE(do_switch_2176)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hfsc_enqueue+0xaa")
int BPF_KPROBE(do_mov_general_1290)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/hfsc_enqueue+0xad")
int BPF_KPROBE(do_mov_general_1291)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/red_dump_class+0x18")
int BPF_KPROBE(do_mov_general_1292)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/red_dump_stats+0xc7")
int BPF_KPROBE(do_switch_2194)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/red_dump_stats+0xcc")
int BPF_KPROBE(do_switch_2195)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/red_dequeue+0x80")
int BPF_KPROBE(do_mov_general_1293)
{
    u64 addr = ctx->bx + 0x2f0;
    check(addr);
    return 0;
}


SEC("kprobe/red_reset+0x19")
int BPF_KPROBE(do_mov_general_1294)
{
    u64 addr = ctx->bx + 0x2f0;
    check(addr);
    return 0;
}


SEC("kprobe/red_reset+0x24")
int BPF_KPROBE(do_mov_general_1295)
{
    u64 addr = ctx->bx + 0x2e8;
    check(addr);
    return 0;
}


SEC("kprobe/red_reset+0x2f")
int BPF_KPROBE(do_mov_general_1296)
{
    u64 addr = ctx->bx + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/red_dump+0x1b1")
int BPF_KPROBE(do_mov_general_1297)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/red_walk+0x31")
int BPF_KPROBE(do_mov_general_1298)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/red_walk+0x3a")
int BPF_KPROBE(do_mov_general_1299)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/red_destroy+0x32")
int BPF_KPROBE(do_switch_2214)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/red_destroy+0x37")
int BPF_KPROBE(do_switch_2215)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/red_enqueue+0x63")
int BPF_KPROBE(do_mov_general_1300)
{
    u64 addr = ctx->si + 0x2e8;
    check(addr);
    return 0;
}


SEC("kprobe/red_enqueue+0x91")
int BPF_KPROBE(do_mov_general_1301)
{
    u64 addr = ctx->bx + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/red_enqueue+0x12d")
int BPF_KPROBE(do_mov_general_1302)
{
    u64 addr = ctx->bx + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/red_enqueue+0x170")
int BPF_KPROBE(do_mov_general_1303)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/red_enqueue+0x173")
int BPF_KPROBE(do_mov_general_1304)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/red_enqueue+0x188")
int BPF_KPROBE(do_mov_general_1305)
{
    u64 addr = ctx->bx + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/red_enqueue+0x197")
int BPF_KPROBE(do_mov_general_1306)
{
    u64 addr = ctx->bx + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/red_enqueue+0x1d3")
int BPF_KPROBE(do_mov_general_1307)
{
    u64 addr = ctx->bx + 0x2e4;
    check(addr);
    return 0;
}


SEC("kprobe/red_enqueue+0x267")
int BPF_KPROBE(do_mov_general_1308)
{
    u64 addr = ctx->bx + 0x2e8;
    check(addr);
    return 0;
}


SEC("kprobe/red_enqueue+0x277")
int BPF_KPROBE(do_mov_general_1309)
{
    u64 addr = ctx->bx + 0x2f0;
    check(addr);
    return 0;
}


SEC("kprobe/red_enqueue+0x329")
int BPF_KPROBE(do_mov_general_1310)
{
    u64 addr = ctx->bx + 0x2e4;
    check(addr);
    return 0;
}


SEC("kprobe/red_graft+0x5e")
int BPF_KPROBE(do_mov_general_1311)
{
    u64 addr = ctx->r12 + 0x310;
    check(addr);
    return 0;
}


SEC("kprobe/red_graft+0x91")
int BPF_KPROBE(do_switch_2228)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/red_graft+0x96")
int BPF_KPROBE(do_switch_2229)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/red_graft+0xfd")
int BPF_KPROBE(do_mov_general_1312)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x18b")
int BPF_KPROBE(do_mov_general_1313)
{
    u64 addr = ctx->r14 + 0x184;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x192")
int BPF_KPROBE(do_mov_general_1314)
{
    u64 addr = ctx->r14 + 0x185;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x19d")
int BPF_KPROBE(do_mov_general_1315)
{
    u64 addr = ctx->r14 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x1d8")
int BPF_KPROBE(do_switch_2244)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__red_change+0x1dd")
int BPF_KPROBE(do_switch_2245)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__red_change+0x1fa")
int BPF_KPROBE(do_mov_general_1316)
{
    u64 addr = ctx->r14 + 0x310;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x227")
int BPF_KPROBE(do_mov_general_1317)
{
    u64 addr = ctx->r14 + 0x1dd;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x22e")
int BPF_KPROBE(do_mov_general_1318)
{
    u64 addr = ctx->r14 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x240")
int BPF_KPROBE(do_mov_general_1319)
{
    u64 addr = ctx->r14 + 0x1de;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x247")
int BPF_KPROBE(do_mov_general_1320)
{
    u64 addr = ctx->r14 + 0x1bc;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x257")
int BPF_KPROBE(do_mov_general_1321)
{
    u64 addr = ctx->r14 + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x27a")
int BPF_KPROBE(do_mov_general_1322)
{
    u64 addr = ctx->r14 + 0x1c4;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x2af")
int BPF_KPROBE(do_mov_general_1323)
{
    u64 addr = ctx->r11 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x2be")
int BPF_KPROBE(do_mov_general_1324)
{
    u64 addr = ctx->r14 + 0x1dc;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x2d0")
int BPF_KPROBE(do_mov_general_1325)
{
    u64 addr = ctx->r14 + 0x1d4;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x2de")
int BPF_KPROBE(do_mov_general_1326)
{
    u64 addr = ctx->r14 + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x2e5")
int BPF_KPROBE(do_mov_general_1327)
{
    u64 addr = ctx->r14 + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x30e")
int BPF_KPROBE(do_mov_general_1328)
{
    u64 addr = ctx->r14 + 0x1df;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x32b")
int BPF_KPROBE(do_mov_general_1329)
{
    u64 addr = ctx->r14 + 0x2d7;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x332")
int BPF_KPROBE(do_mov_general_1330)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x335")
int BPF_KPROBE(do_mov_general_1331)
{
    u64 addr = ctx->r14 + 0x2e8;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x347")
int BPF_KPROBE(do_mov_general_1332)
{
    u64 addr = ctx->r14 + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x355")
int BPF_KPROBE(do_switch_2248)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__red_change+0x35a")
int BPF_KPROBE(do_switch_2249)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__red_change+0x442")
int BPF_KPROBE(do_mov_general_1333)
{
    u64 addr = ctx->r14 + 0x2f0;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x4e9")
int BPF_KPROBE(do_mov_general_1334)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/__red_change+0x510")
int BPF_KPROBE(do_mov_general_1335)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/red_init+0x38")
int BPF_KPROBE(do_mov_general_1336)
{
    u64 addr = ctx->di + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/red_init+0x46")
int BPF_KPROBE(do_mov_general_1337)
{
    u64 addr = ctx->di + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/red_init+0x51")
int BPF_KPROBE(do_switch_2275)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/red_init+0x56")
int BPF_KPROBE(do_switch_2276)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_offload+0x43")
int BPF_KPROBE(do_mov_general_1338)
{
    u64 addr = ctx->r10;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0x51")
int BPF_KPROBE(do_mov_general_1339)
{
    u64 addr = ctx->r10 + 0x2c8;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0x6b")
int BPF_KPROBE(do_mov_general_1340)
{
    u64 addr = ctx->r10;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0x72")
int BPF_KPROBE(do_mov_general_1341)
{
    u64 addr = ctx->r10 + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0x7a")
int BPF_KPROBE(do_mov_general_1342)
{
    u64 addr = ctx->r10 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0x91")
int BPF_KPROBE(do_mov_general_1343)
{
    u64 addr = ctx->r10 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0xa4")
int BPF_KPROBE(do_mov_general_1344)
{
    u64 addr = ctx->r10 + 0x11;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0xb4")
int BPF_KPROBE(do_mov_general_1345)
{
    u64 addr = ctx->r10 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0xbf")
int BPF_KPROBE(do_mov_general_1346)
{
    u64 addr = ctx->r10 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0xe1")
int BPF_KPROBE(do_mov_general_1347)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0xea")
int BPF_KPROBE(do_mov_general_1348)
{
    u64 addr = ctx->dx + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0xf1")
int BPF_KPROBE(do_mov_general_1349)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0xfd")
int BPF_KPROBE(do_mov_general_1350)
{
    u64 addr = ctx->dx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0x109")
int BPF_KPROBE(do_mov_general_1351)
{
    u64 addr = ctx->dx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0x10f")
int BPF_KPROBE(do_mov_general_1352)
{
    u64 addr = ctx->dx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0x11e")
int BPF_KPROBE(do_mov_general_1353)
{
    u64 addr = ctx->dx + 0x15;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0x124")
int BPF_KPROBE(do_mov_general_1354)
{
    u64 addr = ctx->dx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0x128")
int BPF_KPROBE(do_mov_general_1355)
{
    u64 addr = ctx->dx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/gred_offload+0x143")
int BPF_KPROBE(do_mov_general_1356)
{
    u64 addr = ctx->r10 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/gred_reset+0x3d")
int BPF_KPROBE(do_mov_general_1357)
{
    u64 addr = ctx->ax + 0x160;
    check(addr);
    return 0;
}


SEC("kprobe/gred_reset+0x48")
int BPF_KPROBE(do_mov_general_1358)
{
    u64 addr = ctx->ax + 0x158;
    check(addr);
    return 0;
}


SEC("kprobe/gred_reset+0x53")
int BPF_KPROBE(do_mov_general_1359)
{
    u64 addr = ctx->ax + 0x150;
    check(addr);
    return 0;
}


SEC("kprobe/gred_reset+0x5d")
int BPF_KPROBE(do_mov_general_1360)
{
    u64 addr = ctx->ax + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/gred_reset+0x84")
int BPF_KPROBE(do_switch_2286)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_reset+0x89")
int BPF_KPROBE(do_switch_2287)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_reset+0x89")
int BPF_KPROBE(do_mov_general_1361)
{
    u64 addr = ctx->bx + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/gred_reset+0x94")
int BPF_KPROBE(do_mov_general_1362)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/gred_reset+0x9f")
int BPF_KPROBE(do_mov_general_1363)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dequeue+0x2c")
int BPF_KPROBE(do_mov_general_1364)
{
    u64 addr = ctx->di + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dequeue+0x3c")
int BPF_KPROBE(do_mov_general_1365)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dequeue+0xaa")
int BPF_KPROBE(do_mov_general_1366)
{
    u64 addr = ctx->r13 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dequeue+0xd1")
int BPF_KPROBE(do_mov_general_1367)
{
    u64 addr = ctx->di + 0x228;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dequeue+0xeb")
int BPF_KPROBE(do_switch_2290)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_dequeue+0xf0")
int BPF_KPROBE(do_switch_2291)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_dequeue+0x105")
int BPF_KPROBE(do_mov_general_1368)
{
    u64 addr = ctx->di + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dequeue+0x11e")
int BPF_KPROBE(do_mov_general_1369)
{
    u64 addr = ctx->r13 + 0x160;
    check(addr);
    return 0;
}


SEC("kprobe/gred_vq_apply+0x5c")
int BPF_KPROBE(do_mov_general_1370)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/gred_vq_validate+0xd6")
int BPF_KPROBE(do_mov_general_1371)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/gred_vq_validate+0xf6")
int BPF_KPROBE(do_mov_general_1372)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/gred_vq_validate+0x116")
int BPF_KPROBE(do_mov_general_1373)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/gred_vq_validate+0x136")
int BPF_KPROBE(do_mov_general_1374)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/gred_vq_validate+0x159")
int BPF_KPROBE(do_mov_general_1375)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dump+0x7a")
int BPF_KPROBE(do_switch_2303)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_dump+0x7a")
int BPF_KPROBE(do_hotbpf_2303)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/gred_dump+0x7f")
int BPF_KPROBE(do_switch_2304)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_dump+0x88")
int BPF_KPROBE(do_mov_general_1376)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dump+0x9a")
int BPF_KPROBE(do_mov_general_1377)
{
    u64 addr = ctx->r13 + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dump+0xa8")
int BPF_KPROBE(do_switch_2305)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_dump+0xad")
int BPF_KPROBE(do_switch_2306)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_dump+0xc0")
int BPF_KPROBE(do_mov_general_1378)
{
    u64 addr = ctx->r13 + ctx->bx * 0x8 + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dump+0x213")
int BPF_KPROBE(do_mov_stk_2)
{
    u64 addr = ctx->bp + ctx->ax * 0x4 - 0x70;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/gred_dump+0x3a0")
int BPF_KPROBE(do_mov_general_1379)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dump+0x3de")
int BPF_KPROBE(do_mov_general_1380)
{
    u64 addr = ctx->si + 0x158;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dump+0x3ec")
int BPF_KPROBE(do_mov_general_1381)
{
    u64 addr = ctx->si + 0x160;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dump+0x523")
int BPF_KPROBE(do_mov_general_1382)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dump+0x67b")
int BPF_KPROBE(do_mov_general_1383)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dump+0x7be")
int BPF_KPROBE(do_mov_general_1384)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/gred_dump+0x7d5")
int BPF_KPROBE(do_mov_general_1385)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x82")
int BPF_KPROBE(do_mov_general_1386)
{
    u64 addr = ctx->bx + 0x158;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x91")
int BPF_KPROBE(do_mov_general_1387)
{
    u64 addr = ctx->bx + 0x160;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0xd0")
int BPF_KPROBE(do_mov_general_1388)
{
    u64 addr = ctx->bx + 0x158;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0xe4")
int BPF_KPROBE(do_mov_general_1389)
{
    u64 addr = ctx->r12 + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0xf3")
int BPF_KPROBE(do_mov_general_1390)
{
    u64 addr = ctx->r12 + 0x228;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x126")
int BPF_KPROBE(do_mov_general_1391)
{
    u64 addr = ctx->bx + 0x150;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x184")
int BPF_KPROBE(do_mov_general_1392)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x18d")
int BPF_KPROBE(do_mov_general_1393)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x1cc")
int BPF_KPROBE(do_mov_general_1394)
{
    u64 addr = ctx->r13 + 0x86;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x2df")
int BPF_KPROBE(do_mov_general_1395)
{
    u64 addr = ctx->bx + 0x158;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x2ef")
int BPF_KPROBE(do_mov_general_1396)
{
    u64 addr = ctx->bx + 0x160;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x2ff")
int BPF_KPROBE(do_mov_general_1397)
{
    u64 addr = ctx->bx + 0x150;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x32b")
int BPF_KPROBE(do_mov_general_1398)
{
    u64 addr = ctx->bx + 0x154;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x390")
int BPF_KPROBE(do_mov_general_1399)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x398")
int BPF_KPROBE(do_mov_general_1400)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x39b")
int BPF_KPROBE(do_mov_general_1401)
{
    u64 addr = ctx->r12 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x3c9")
int BPF_KPROBE(do_mov_general_1402)
{
    u64 addr = ctx->bx + 0x150;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x3d8")
int BPF_KPROBE(do_mov_general_1403)
{
    u64 addr = ctx->bx + 0x150;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x444")
int BPF_KPROBE(do_mov_general_1404)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x44c")
int BPF_KPROBE(do_mov_general_1405)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x457")
int BPF_KPROBE(do_mov_general_1406)
{
    u64 addr = ctx->r12 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x46c")
int BPF_KPROBE(do_mov_general_1407)
{
    u64 addr = ctx->r12 + 0xc4;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x48f")
int BPF_KPROBE(do_mov_general_1408)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x498")
int BPF_KPROBE(do_mov_general_1409)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x4f9")
int BPF_KPROBE(do_mov_general_1410)
{
    u64 addr = ctx->bx + 0x154;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x504")
int BPF_KPROBE(do_mov_general_1411)
{
    u64 addr = ctx->r12 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x50c")
int BPF_KPROBE(do_mov_general_1412)
{
    u64 addr = ctx->r12 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x519")
int BPF_KPROBE(do_mov_general_1413)
{
    u64 addr = ctx->r12 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/gred_enqueue+0x521")
int BPF_KPROBE(do_mov_general_1414)
{
    u64 addr = ctx->r12 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change_table_def+0xbd")
int BPF_KPROBE(do_mov_general_1415)
{
    u64 addr = ctx->r12 + 0x20c;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change_table_def+0xc8")
int BPF_KPROBE(do_mov_general_1416)
{
    u64 addr = ctx->r12 + 0x210;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change_table_def+0xd5")
int BPF_KPROBE(do_mov_general_1417)
{
    u64 addr = ctx->r12 + 0x208;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change_table_def+0x139")
int BPF_KPROBE(do_mov_general_1418)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change_table_def+0x2e0")
int BPF_KPROBE(do_mov_general_1419)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change_table_def+0x30a")
int BPF_KPROBE(do_mov_general_1420)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change_table_def+0x334")
int BPF_KPROBE(do_mov_general_1421)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change_table_def+0x35e")
int BPF_KPROBE(do_mov_general_1422)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/gred_init+0x7f")
int BPF_KPROBE(do_mov_general_1423)
{
    u64 addr = ctx->r12 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/gred_init+0xa9")
int BPF_KPROBE(do_switch_2349)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_init+0xa9")
int BPF_KPROBE(do_hotbpf_2349)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/gred_init+0xae")
int BPF_KPROBE(do_switch_2350)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_init+0xae")
int BPF_KPROBE(do_mov_general_1424)
{
    u64 addr = ctx->r12 + 0x230;
    check(addr);
    return 0;
}


SEC("kprobe/gred_init+0x10d")
int BPF_KPROBE(do_mov_general_1425)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x1b1")
int BPF_KPROBE(do_switch_2357)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_change+0x1b1")
int BPF_KPROBE(do_hotbpf_2357)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/gred_change+0x1b6")
int BPF_KPROBE(do_switch_2358)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/gred_change+0x23f")
int BPF_KPROBE(do_mov_general_1426)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x2f2")
int BPF_KPROBE(do_mov_general_1427)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x341")
int BPF_KPROBE(do_mov_general_1428)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x360")
int BPF_KPROBE(do_mov_general_1429)
{
    u64 addr = ctx->r15 + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x364")
int BPF_KPROBE(do_mov_general_1430)
{
    u64 addr = ctx->r15 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x375")
int BPF_KPROBE(do_mov_general_1431)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x380")
int BPF_KPROBE(do_mov_general_1432)
{
    u64 addr = ctx->r15 + 0x160;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x3a6")
int BPF_KPROBE(do_mov_general_1433)
{
    u64 addr = ctx->r15 + 0x49;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x3b1")
int BPF_KPROBE(do_mov_general_1434)
{
    u64 addr = ctx->r15 + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x3c0")
int BPF_KPROBE(do_mov_general_1435)
{
    u64 addr = ctx->r15 + 0x4a;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x3c8")
int BPF_KPROBE(do_mov_general_1436)
{
    u64 addr = ctx->r15 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x3cc")
int BPF_KPROBE(do_mov_general_1437)
{
    u64 addr = ctx->r15 + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x3f1")
int BPF_KPROBE(do_mov_general_1438)
{
    u64 addr = ctx->r15 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x42b")
int BPF_KPROBE(do_mov_general_1439)
{
    u64 addr = ctx->r9 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x43b")
int BPF_KPROBE(do_mov_general_1440)
{
    u64 addr = ctx->r15 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x449")
int BPF_KPROBE(do_mov_general_1441)
{
    u64 addr = ctx->r15 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x454")
int BPF_KPROBE(do_mov_general_1442)
{
    u64 addr = ctx->r15 + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x458")
int BPF_KPROBE(do_mov_general_1443)
{
    u64 addr = ctx->r15 + 0x2c;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x478")
int BPF_KPROBE(do_mov_general_1444)
{
    u64 addr = ctx->r15 + 0x4b;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x48f")
int BPF_KPROBE(do_mov_general_1445)
{
    u64 addr = ctx->r15 + 0x143;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x496")
int BPF_KPROBE(do_mov_general_1446)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x499")
int BPF_KPROBE(do_mov_general_1447)
{
    u64 addr = ctx->r15 + 0x158;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x4a8")
int BPF_KPROBE(do_mov_general_1448)
{
    u64 addr = ctx->r15 + 0x150;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x5ae")
int BPF_KPROBE(do_mov_general_1449)
{
    u64 addr = ctx->r12 + ctx->r9 * 0x8 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x5d5")
int BPF_KPROBE(do_mov_general_1450)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x5f3")
int BPF_KPROBE(do_mov_general_1451)
{
    u64 addr = ctx->r12 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x736")
int BPF_KPROBE(do_mov_general_1452)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/gred_change+0x75d")
int BPF_KPROBE(do_mov_general_1453)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/ingress_ingress_block_set+0x6")
int BPF_KPROBE(do_mov_general_1454)
{
    u64 addr = ctx->di + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/clsact_ingress_block_set+0x6")
int BPF_KPROBE(do_mov_general_1455)
{
    u64 addr = ctx->di + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/clsact_egress_block_set+0x6")
int BPF_KPROBE(do_mov_general_1456)
{
    u64 addr = ctx->di + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/ingress_destroy+0x1f")
int BPF_KPROBE(do_switch_2384)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ingress_destroy+0x24")
int BPF_KPROBE(do_switch_2385)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/clsact_destroy+0x3c")
int BPF_KPROBE(do_switch_2388)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/clsact_destroy+0x41")
int BPF_KPROBE(do_switch_2389)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/clsact_destroy+0x41")
int BPF_KPROBE(do_switch_2390)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/clsact_destroy+0x46")
int BPF_KPROBE(do_switch_2391)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/clsact_init+0x2f")
int BPF_KPROBE(do_switch_2392)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/clsact_init+0x34")
int BPF_KPROBE(do_switch_2393)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/clsact_init+0x34")
int BPF_KPROBE(do_switch_2394)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/clsact_init+0x39")
int BPF_KPROBE(do_switch_2395)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/clsact_init+0x54")
int BPF_KPROBE(do_mov_general_1457)
{
    u64 addr = ctx->r12 + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/clsact_init+0x64")
int BPF_KPROBE(do_mov_general_1458)
{
    u64 addr = ctx->r12 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/clsact_init+0x70")
int BPF_KPROBE(do_mov_general_1459)
{
    u64 addr = ctx->r12 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/clsact_init+0xaf")
int BPF_KPROBE(do_mov_general_1460)
{
    u64 addr = ctx->r12 + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/clsact_init+0xcd")
int BPF_KPROBE(do_mov_general_1461)
{
    u64 addr = ctx->r12 + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/clsact_init+0xd9")
int BPF_KPROBE(do_mov_general_1462)
{
    u64 addr = ctx->r12 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/ingress_init+0x2d")
int BPF_KPROBE(do_switch_2401)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ingress_init+0x32")
int BPF_KPROBE(do_switch_2402)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ingress_init+0x4d")
int BPF_KPROBE(do_mov_general_1463)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/ingress_init+0x5b")
int BPF_KPROBE(do_mov_general_1464)
{
    u64 addr = ctx->bx + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/ingress_init+0x65")
int BPF_KPROBE(do_mov_general_1465)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/ingress_dump+0x47")
int BPF_KPROBE(do_mov_general_1466)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_walk+0x39")
int BPF_KPROBE(do_mov_general_1467)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_walk+0x81")
int BPF_KPROBE(do_mov_general_1468)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_delete+0x28")
int BPF_KPROBE(do_mov_general_1469)
{
    u64 addr = ctx->ax + ctx->si * 0x1 - 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_delete+0x34")
int BPF_KPROBE(do_mov_general_1470)
{
    u64 addr = ctx->ax + ctx->si * 0x1 - 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dump_class+0xad")
int BPF_KPROBE(do_mov_general_1471)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dump_class+0xbc")
int BPF_KPROBE(do_mov_general_1472)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dump_class+0x143")
int BPF_KPROBE(do_mov_general_1473)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_init+0xef")
int BPF_KPROBE(do_switch_2421)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_init+0xf4")
int BPF_KPROBE(do_switch_2422)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_init+0x123")
int BPF_KPROBE(do_mov_general_1474)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_init+0x14d")
int BPF_KPROBE(do_mov_general_1475)
{
    u64 addr = ctx->ax + ctx->dx * 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_init+0x158")
int BPF_KPROBE(do_mov_general_1476)
{
    u64 addr = ctx->ax + ctx->dx * 0x1 + 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_init+0x16f")
int BPF_KPROBE(do_mov_general_1477)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_init+0x17e")
int BPF_KPROBE(do_mov_general_1478)
{
    u64 addr = ctx->bx + 0x1a4;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_init+0x196")
int BPF_KPROBE(do_mov_general_1479)
{
    u64 addr = ctx->bx + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_init+0x1dc")
int BPF_KPROBE(do_mov_general_1480)
{
    u64 addr = ctx->bx + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_init+0x1fd")
int BPF_KPROBE(do_switch_2425)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_init+0x1fd")
int BPF_KPROBE(do_hotbpf_2425)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/dsmark_init+0x202")
int BPF_KPROBE(do_switch_2426)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_change+0xd9")
int BPF_KPROBE(do_mov_general_1481)
{
    u64 addr = ctx->ax + ctx->dx * 0x2 - 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_change+0xfb")
int BPF_KPROBE(do_mov_general_1482)
{
    u64 addr = ctx->dx + ctx->cx * 0x2 - 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x5d")
int BPF_KPROBE(do_mov_general_1483)
{
    u64 addr = ctx->ax + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x6c")
int BPF_KPROBE(do_mov_general_1484)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x74")
int BPF_KPROBE(do_mov_general_1485)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x7d")
int BPF_KPROBE(do_mov_general_1486)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x81")
int BPF_KPROBE(do_mov_general_1487)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x175")
int BPF_KPROBE(do_mov_general_1488)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x1f1")
int BPF_KPROBE(do_mov_general_1489)
{
    u64 addr = ctx->cx + 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x212")
int BPF_KPROBE(do_mov_general_1490)
{
    u64 addr = ctx->cx + 0xa;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x34b")
int BPF_KPROBE(do_switch_2431)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x350")
int BPF_KPROBE(do_switch_2432)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x38f")
int BPF_KPROBE(do_switch_2433)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_dequeue+0x394")
int BPF_KPROBE(do_switch_2434)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_dump+0xa7")
int BPF_KPROBE(do_mov_general_1491)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_graft+0x59")
int BPF_KPROBE(do_mov_general_1492)
{
    u64 addr = ctx->bx + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_graft+0x8b")
int BPF_KPROBE(do_switch_2442)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_graft+0x90")
int BPF_KPROBE(do_switch_2443)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_graft+0xdc")
int BPF_KPROBE(do_mov_general_1493)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x5b")
int BPF_KPROBE(do_mov_general_1494)
{
    u64 addr = ctx->r12 + 0x86;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0xfb")
int BPF_KPROBE(do_mov_general_1495)
{
    u64 addr = ctx->r12 + 0x86;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x1ff")
int BPF_KPROBE(do_switch_2457)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x204")
int BPF_KPROBE(do_switch_2458)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x229")
int BPF_KPROBE(do_mov_general_1496)
{
    u64 addr = ctx->r12 + 0x86;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x263")
int BPF_KPROBE(do_mov_general_1497)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x26c")
int BPF_KPROBE(do_mov_general_1498)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x283")
int BPF_KPROBE(do_switch_2459)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x288")
int BPF_KPROBE(do_switch_2460)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x291")
int BPF_KPROBE(do_mov_general_1499)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x29a")
int BPF_KPROBE(do_mov_general_1500)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x323")
int BPF_KPROBE(do_switch_2461)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x328")
int BPF_KPROBE(do_switch_2462)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x349")
int BPF_KPROBE(do_mov_general_1501)
{
    u64 addr = ctx->r12 + 0x86;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x35b")
int BPF_KPROBE(do_mov_general_1502)
{
    u64 addr = ctx->r12 + 0x86;
    check(addr);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x3da")
int BPF_KPROBE(do_switch_2463)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x3df")
int BPF_KPROBE(do_switch_2464)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x447")
int BPF_KPROBE(do_switch_2465)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dsmark_enqueue+0x44c")
int BPF_KPROBE(do_switch_2466)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_dump_stats+0x9c")
int BPF_KPROBE(do_switch_2469)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_dump_stats+0xa1")
int BPF_KPROBE(do_switch_2470)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_zero_all_buckets+0xd")
int BPF_KPROBE(do_mov_general_1503)
{
    u64 addr = ctx->di - 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_zero_all_buckets+0x15")
int BPF_KPROBE(do_mov_general_1504)
{
    u64 addr = ctx->di + 0x410;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_reset+0x2c")
int BPF_KPROBE(do_mov_general_1505)
{
    u64 addr = ctx->bx + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_dump+0x80")
int BPF_KPROBE(do_mov_general_1506)
{
    u64 addr = ctx->bx + 0xc4;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_dump+0xd7")
int BPF_KPROBE(do_mov_general_1507)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_walk+0x31")
int BPF_KPROBE(do_mov_general_1508)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_walk+0x3a")
int BPF_KPROBE(do_mov_general_1509)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_dequeue+0x96")
int BPF_KPROBE(do_mov_general_1510)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_dequeue+0xcd")
int BPF_KPROBE(do_mov_general_1511)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_graft+0x59")
int BPF_KPROBE(do_mov_general_1512)
{
    u64 addr = ctx->bx + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_graft+0x8b")
int BPF_KPROBE(do_switch_2486)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_graft+0x90")
int BPF_KPROBE(do_switch_2487)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_graft+0xd8")
int BPF_KPROBE(do_mov_general_1513)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x11b")
int BPF_KPROBE(do_switch_2502)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_change+0x120")
int BPF_KPROBE(do_switch_2503)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_change+0x150")
int BPF_KPROBE(do_mov_general_1514)
{
    u64 addr = ctx->bx + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x15a")
int BPF_KPROBE(do_switch_2506)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_change+0x15f")
int BPF_KPROBE(do_switch_2507)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_change+0x15f")
int BPF_KPROBE(do_mov_general_1515)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x16a")
int BPF_KPROBE(do_switch_2508)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_change+0x16f")
int BPF_KPROBE(do_switch_2509)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_change+0x16f")
int BPF_KPROBE(do_mov_general_1516)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x17a")
int BPF_KPROBE(do_mov_general_1517)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x188")
int BPF_KPROBE(do_mov_general_1518)
{
    u64 addr = ctx->bx + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x193")
int BPF_KPROBE(do_mov_general_1519)
{
    u64 addr = ctx->bx + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x19d")
int BPF_KPROBE(do_mov_general_1520)
{
    u64 addr = ctx->bx + 0x1b4;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x1a7")
int BPF_KPROBE(do_mov_general_1521)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x1b1")
int BPF_KPROBE(do_mov_general_1522)
{
    u64 addr = ctx->bx + 0x1ac;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x1bb")
int BPF_KPROBE(do_mov_general_1523)
{
    u64 addr = ctx->bx + 0x1bc;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x1c5")
int BPF_KPROBE(do_mov_general_1524)
{
    u64 addr = ctx->bx + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x1cb")
int BPF_KPROBE(do_mov_general_1525)
{
    u64 addr = ctx->bx + 0x1c4;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x1d8")
int BPF_KPROBE(do_mov_general_1526)
{
    u64 addr = ctx->bx + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_change+0x1e1")
int BPF_KPROBE(do_mov_general_1527)
{
    u64 addr = ctx->bx + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_init+0x3e")
int BPF_KPROBE(do_mov_general_1528)
{
    u64 addr = ctx->r12 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x17b")
int BPF_KPROBE(do_mov_general_1529)
{
    u64 addr = ctx->r14 + ctx->r15 * 0x4 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x1af")
int BPF_KPROBE(do_mov_general_1530)
{
    u64 addr = ctx->di + 0x1f2;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x20e")
int BPF_KPROBE(do_mov_general_1531)
{
    u64 addr = ctx->di + 0x1f2;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x233")
int BPF_KPROBE(do_mov_general_1532)
{
    u64 addr = ctx->r14 + ctx->dx * 0x4 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x2e7")
int BPF_KPROBE(do_mov_general_1533)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x333")
int BPF_KPROBE(do_switch_2528)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x338")
int BPF_KPROBE(do_switch_2529)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x379")
int BPF_KPROBE(do_mov_general_1534)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x39c")
int BPF_KPROBE(do_mov_general_1535)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x39f")
int BPF_KPROBE(do_mov_general_1536)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x43a")
int BPF_KPROBE(do_mov_general_1537)
{
    u64 addr = ctx->bx + 0x1c4;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x440")
int BPF_KPROBE(do_mov_general_1538)
{
    u64 addr = ctx->bx + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x485")
int BPF_KPROBE(do_mov_general_1539)
{
    u64 addr = ctx->si + 0x1d9;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x4b9")
int BPF_KPROBE(do_switch_2530)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x4be")
int BPF_KPROBE(do_switch_2531)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x4d5")
int BPF_KPROBE(do_mov_general_1540)
{
    u64 addr = ctx->r14 + ctx->dx * 0x4 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x4fa")
int BPF_KPROBE(do_mov_general_1541)
{
    u64 addr = ctx->di + 0x1f2;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x554")
int BPF_KPROBE(do_mov_general_1542)
{
    u64 addr = ctx->di + 0x1f2;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x623")
int BPF_KPROBE(do_mov_general_1543)
{
    u64 addr = ctx->bx + 0x1d9;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x630")
int BPF_KPROBE(do_mov_general_1544)
{
    u64 addr = ctx->bx + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x6a6")
int BPF_KPROBE(do_mov_general_1545)
{
    u64 addr = ctx->bx + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x6b2")
int BPF_KPROBE(do_mov_general_1546)
{
    u64 addr = ctx->bx + 0x1c4;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x711")
int BPF_KPROBE(do_mov_general_1547)
{
    u64 addr = ctx->dx + 0xa;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x715")
int BPF_KPROBE(do_mov_general_1548)
{
    u64 addr = ctx->dx + 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x75d")
int BPF_KPROBE(do_switch_2533)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x762")
int BPF_KPROBE(do_switch_2534)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x78c")
int BPF_KPROBE(do_mov_general_1549)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sfb_enqueue+0x7b4")
int BPF_KPROBE(do_mov_general_1550)
{
    u64 addr = ctx->r14 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x67")
int BPF_KPROBE(do_mov_general_1551)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x6a")
int BPF_KPROBE(do_mov_general_1552)
{
    u64 addr = ctx->r8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x6e")
int BPF_KPROBE(do_mov_general_1553)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x76")
int BPF_KPROBE(do_mov_general_1554)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0xba")
int BPF_KPROBE(do_mov_general_1555)
{
    u64 addr = ctx->r11;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0xe0")
int BPF_KPROBE(do_mov_general_1556)
{
    u64 addr = ctx->r11 + 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0xf8")
int BPF_KPROBE(do_mov_general_1557)
{
    u64 addr = ctx->r11 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x127")
int BPF_KPROBE(do_mov_general_1558)
{
    u64 addr = ctx->dx + 0x16;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x12c")
int BPF_KPROBE(do_mov_general_1559)
{
    u64 addr = ctx->dx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x130")
int BPF_KPROBE(do_mov_general_1560)
{
    u64 addr = ctx->ax + ctx->r9 * 0x4 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x155")
int BPF_KPROBE(do_mov_general_1561)
{
    u64 addr = ctx->dx + 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x16d")
int BPF_KPROBE(do_mov_general_1562)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x170")
int BPF_KPROBE(do_mov_general_1563)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x186")
int BPF_KPROBE(do_mov_general_1564)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x18a")
int BPF_KPROBE(do_mov_general_1565)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x190")
int BPF_KPROBE(do_mov_general_1566)
{
    u64 addr = ctx->r8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x198")
int BPF_KPROBE(do_mov_general_1567)
{
    u64 addr = ctx->r8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x1b8")
int BPF_KPROBE(do_mov_general_1568)
{
    u64 addr = ctx->r11;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x21c")
int BPF_KPROBE(do_mov_general_1569)
{
    u64 addr = ctx->ax + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x259")
int BPF_KPROBE(do_mov_general_1570)
{
    u64 addr = ctx->di + 0x12;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_drop+0x26a")
int BPF_KPROBE(do_mov_general_1571)
{
    u64 addr = ctx->di + ctx->r8 * 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_destroy+0x20")
int BPF_KPROBE(do_mov_general_1572)
{
    u64 addr = ctx->bx + 0x3f4;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_destroy+0x2a")
int BPF_KPROBE(do_switch_2539)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_destroy+0x2f")
int BPF_KPROBE(do_switch_2540)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_dump_class_stats+0x87")
int BPF_KPROBE(do_switch_2544)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_dump_class_stats+0x8c")
int BPF_KPROBE(do_switch_2545)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_dump_class_stats+0x9c")
int BPF_KPROBE(do_switch_2546)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_dump_class_stats+0xa1")
int BPF_KPROBE(do_switch_2547)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_walk+0x30")
int BPF_KPROBE(do_mov_general_1573)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_walk+0x6e")
int BPF_KPROBE(do_mov_general_1574)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x92")
int BPF_KPROBE(do_mov_general_1575)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x95")
int BPF_KPROBE(do_mov_general_1576)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x145")
int BPF_KPROBE(do_mov_general_1577)
{
    u64 addr = ctx->r14 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x16f")
int BPF_KPROBE(do_mov_general_1578)
{
    u64 addr = ctx->r14 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x1c2")
int BPF_KPROBE(do_mov_general_1579)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x1c5")
int BPF_KPROBE(do_mov_general_1580)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x1e7")
int BPF_KPROBE(do_mov_general_1581)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x207")
int BPF_KPROBE(do_mov_general_1582)
{
    u64 addr = ctx->r14 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x216")
int BPF_KPROBE(do_mov_general_1583)
{
    u64 addr = ctx->r14 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x21e")
int BPF_KPROBE(do_mov_general_1584)
{
    u64 addr = ctx->r14 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x238")
int BPF_KPROBE(do_mov_general_1585)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x23b")
int BPF_KPROBE(do_mov_general_1586)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x243")
int BPF_KPROBE(do_mov_general_1587)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x246")
int BPF_KPROBE(do_mov_general_1588)
{
    u64 addr = ctx->r14 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x27d")
int BPF_KPROBE(do_mov_general_1589)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x299")
int BPF_KPROBE(do_mov_general_1590)
{
    u64 addr = ctx->ax + 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x2af")
int BPF_KPROBE(do_mov_general_1591)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x2c1")
int BPF_KPROBE(do_mov_general_1592)
{
    u64 addr = ctx->r12 + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x2e9")
int BPF_KPROBE(do_mov_general_1593)
{
    u64 addr = ctx->r15 + 0x16;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x2ee")
int BPF_KPROBE(do_mov_general_1594)
{
    u64 addr = ctx->r15 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x2f3")
int BPF_KPROBE(do_mov_general_1595)
{
    u64 addr = ctx->r12 + ctx->cx * 0x4 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x315")
int BPF_KPROBE(do_mov_general_1596)
{
    u64 addr = ctx->ax + 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x333")
int BPF_KPROBE(do_mov_general_1597)
{
    u64 addr = ctx->r12 + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x38b")
int BPF_KPROBE(do_switch_2554)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x390")
int BPF_KPROBE(do_switch_2555)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x411")
int BPF_KPROBE(do_mov_general_1598)
{
    u64 addr = ctx->r14 + 0x12;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x41e")
int BPF_KPROBE(do_mov_general_1599)
{
    u64 addr = ctx->ax + 0x12;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x42b")
int BPF_KPROBE(do_mov_general_1600)
{
    u64 addr = ctx->r12 + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x433")
int BPF_KPROBE(do_mov_general_1601)
{
    u64 addr = ctx->r14 + 0x1a;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x45a")
int BPF_KPROBE(do_mov_general_1602)
{
    u64 addr = ctx->r14 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x467")
int BPF_KPROBE(do_mov_general_1603)
{
    u64 addr = ctx->r14 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x4c1")
int BPF_KPROBE(do_mov_general_1604)
{
    u64 addr = ctx->r14 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x4fd")
int BPF_KPROBE(do_mov_general_1605)
{
    u64 addr = ctx->r14 + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x55d")
int BPF_KPROBE(do_mov_general_1606)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x560")
int BPF_KPROBE(do_mov_general_1607)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x567")
int BPF_KPROBE(do_mov_general_1608)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x56e")
int BPF_KPROBE(do_mov_general_1609)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x58f")
int BPF_KPROBE(do_mov_general_1610)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x594")
int BPF_KPROBE(do_mov_general_1611)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x5a5")
int BPF_KPROBE(do_mov_general_1612)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x5a8")
int BPF_KPROBE(do_mov_general_1613)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x5b0")
int BPF_KPROBE(do_mov_general_1614)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x5b3")
int BPF_KPROBE(do_mov_general_1615)
{
    u64 addr = ctx->r14 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x64b")
int BPF_KPROBE(do_mov_general_1616)
{
    u64 addr = ctx->r14 + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_enqueue+0x654")
int BPF_KPROBE(do_mov_general_1617)
{
    u64 addr = ctx->r14 + 0x12;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x46")
int BPF_KPROBE(do_mov_general_1618)
{
    u64 addr = ctx->di + 0x428;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x50")
int BPF_KPROBE(do_switch_2565)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_init+0x55")
int BPF_KPROBE(do_switch_2566)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_init+0x85")
int BPF_KPROBE(do_mov_general_1619)
{
    u64 addr = ctx->dx - 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x8d")
int BPF_KPROBE(do_mov_general_1620)
{
    u64 addr = ctx->dx - 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0xa6")
int BPF_KPROBE(do_mov_general_1621)
{
    u64 addr = ctx->r13 + 0x189;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0xae")
int BPF_KPROBE(do_mov_general_1622)
{
    u64 addr = ctx->r13 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0xb9")
int BPF_KPROBE(do_mov_general_1623)
{
    u64 addr = ctx->r13 + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0xc1")
int BPF_KPROBE(do_mov_general_1624)
{
    u64 addr = ctx->r13 + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0xcc")
int BPF_KPROBE(do_mov_general_1625)
{
    u64 addr = ctx->r13 + 0x3f0;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0xe7")
int BPF_KPROBE(do_mov_general_1626)
{
    u64 addr = ctx->r13 + 0x3f4;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0xf2")
int BPF_KPROBE(do_mov_general_1627)
{
    u64 addr = ctx->r13 + 0x3f8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0xff")
int BPF_KPROBE(do_mov_general_1628)
{
    u64 addr = ctx->r13 + 0x1a2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x225")
int BPF_KPROBE(do_mov_general_1629)
{
    u64 addr = ctx->r13 + 0x3f8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x232")
int BPF_KPROBE(do_mov_general_1630)
{
    u64 addr = ctx->r13 + 0x1a2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x242")
int BPF_KPROBE(do_mov_general_1631)
{
    u64 addr = ctx->r13 + 0x3f4;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x25b")
int BPF_KPROBE(do_mov_general_1632)
{
    u64 addr = ctx->r13 + 0x3f0;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x271")
int BPF_KPROBE(do_mov_general_1633)
{
    u64 addr = ctx->r13 + 0x184;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x27d")
int BPF_KPROBE(do_mov_general_1634)
{
    u64 addr = ctx->r13 + 0x3f0;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x29f")
int BPF_KPROBE(do_mov_general_1635)
{
    u64 addr = ctx->r13 + 0x189;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x2ba")
int BPF_KPROBE(do_mov_general_1636)
{
    u64 addr = ctx->r13 + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x2e2")
int BPF_KPROBE(do_mov_general_1637)
{
    u64 addr = ctx->r11 + 0x25;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x2e8")
int BPF_KPROBE(do_mov_general_1638)
{
    u64 addr = ctx->r11;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x2f8")
int BPF_KPROBE(do_mov_general_1639)
{
    u64 addr = ctx->r11 + 0x26;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x2ff")
int BPF_KPROBE(do_mov_general_1640)
{
    u64 addr = ctx->r11 + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x303")
int BPF_KPROBE(do_mov_general_1641)
{
    u64 addr = ctx->r11 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x32c")
int BPF_KPROBE(do_mov_general_1642)
{
    u64 addr = ctx->di + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x35b")
int BPF_KPROBE(do_mov_general_1643)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x368")
int BPF_KPROBE(do_mov_general_1644)
{
    u64 addr = ctx->di + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x375")
int BPF_KPROBE(do_mov_general_1645)
{
    u64 addr = ctx->di + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x378")
int BPF_KPROBE(do_mov_general_1646)
{
    u64 addr = ctx->di + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x382")
int BPF_KPROBE(do_mov_general_1647)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x392")
int BPF_KPROBE(do_mov_general_1648)
{
    u64 addr = ctx->r13 + 0x1a1;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x39d")
int BPF_KPROBE(do_mov_general_1649)
{
    u64 addr = ctx->r13 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x3fb")
int BPF_KPROBE(do_switch_2572)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_init+0x400")
int BPF_KPROBE(do_switch_2573)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_init+0x417")
int BPF_KPROBE(do_switch_2575)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_init+0x41c")
int BPF_KPROBE(do_switch_2576)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_init+0x45f")
int BPF_KPROBE(do_switch_2579)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_init+0x464")
int BPF_KPROBE(do_switch_2580)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_init+0x46e")
int BPF_KPROBE(do_mov_general_1650)
{
    u64 addr = ctx->r13 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x48b")
int BPF_KPROBE(do_switch_2581)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_init+0x490")
int BPF_KPROBE(do_switch_2582)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_init+0x497")
int BPF_KPROBE(do_mov_general_1651)
{
    u64 addr = ctx->r13 + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x4d1")
int BPF_KPROBE(do_mov_general_1652)
{
    u64 addr = ctx->dx + ctx->cx * 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x508")
int BPF_KPROBE(do_mov_general_1653)
{
    u64 addr = ctx->r13 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x51c")
int BPF_KPROBE(do_mov_general_1654)
{
    u64 addr = ctx->ax + 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x54c")
int BPF_KPROBE(do_mov_general_1655)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x554")
int BPF_KPROBE(do_mov_general_1656)
{
    u64 addr = ctx->ax + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x55c")
int BPF_KPROBE(do_mov_general_1657)
{
    u64 addr = ctx->ax + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x564")
int BPF_KPROBE(do_mov_general_1658)
{
    u64 addr = ctx->ax + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x56c")
int BPF_KPROBE(do_mov_general_1659)
{
    u64 addr = ctx->ax + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x574")
int BPF_KPROBE(do_mov_general_1660)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x577")
int BPF_KPROBE(do_mov_general_1661)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x5a9")
int BPF_KPROBE(do_mov_general_1662)
{
    u64 addr = ctx->r9 + 0x16;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x5ae")
int BPF_KPROBE(do_mov_general_1663)
{
    u64 addr = ctx->r9 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x5b3")
int BPF_KPROBE(do_mov_general_1664)
{
    u64 addr = ctx->r13 + ctx->cx * 0x4 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x5e5")
int BPF_KPROBE(do_mov_general_1665)
{
    u64 addr = ctx->r13 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x607")
int BPF_KPROBE(do_mov_general_1666)
{
    u64 addr = ctx->r13 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x611")
int BPF_KPROBE(do_mov_general_1667)
{
    u64 addr = ctx->r13 + 0x3f0;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_init+0x6bd")
int BPF_KPROBE(do_switch_2589)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_init+0x6bd")
int BPF_KPROBE(do_hotbpf_2589)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/sfq_init+0x6c2")
int BPF_KPROBE(do_switch_2590)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x6f")
int BPF_KPROBE(do_mov_general_1668)
{
    u64 addr = ctx->r13 - 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x76")
int BPF_KPROBE(do_mov_general_1669)
{
    u64 addr = ctx->r13 - 0x268;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x15b")
int BPF_KPROBE(do_mov_general_1670)
{
    u64 addr = ctx->ax + 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x164")
int BPF_KPROBE(do_mov_general_1671)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x167")
int BPF_KPROBE(do_mov_general_1672)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x170")
int BPF_KPROBE(do_mov_general_1673)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x18f")
int BPF_KPROBE(do_mov_general_1674)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x192")
int BPF_KPROBE(do_mov_general_1675)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x196")
int BPF_KPROBE(do_mov_general_1676)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x19e")
int BPF_KPROBE(do_mov_general_1677)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x1d6")
int BPF_KPROBE(do_mov_general_1678)
{
    u64 addr = ctx->r9;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x1f8")
int BPF_KPROBE(do_mov_general_1679)
{
    u64 addr = ctx->r9 + 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x211")
int BPF_KPROBE(do_mov_general_1680)
{
    u64 addr = ctx->r9 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x240")
int BPF_KPROBE(do_mov_general_1681)
{
    u64 addr = ctx->r10 + 0x16;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x245")
int BPF_KPROBE(do_mov_general_1682)
{
    u64 addr = ctx->r10 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x24a")
int BPF_KPROBE(do_mov_general_1683)
{
    u64 addr = ctx->r12 + ctx->r8 * 0x4 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x28f")
int BPF_KPROBE(do_mov_general_1684)
{
    u64 addr = ctx->r12 + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x2d3")
int BPF_KPROBE(do_mov_general_1685)
{
    u64 addr = ctx->cx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x2ed")
int BPF_KPROBE(do_mov_general_1686)
{
    u64 addr = ctx->cx + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x2fe")
int BPF_KPROBE(do_mov_general_1687)
{
    u64 addr = ctx->ax + ctx->dx * 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x315")
int BPF_KPROBE(do_mov_general_1688)
{
    u64 addr = ctx->r12 + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x363")
int BPF_KPROBE(do_mov_general_1689)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x36a")
int BPF_KPROBE(do_mov_general_1690)
{
    u64 addr = ctx->r15 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x372")
int BPF_KPROBE(do_mov_general_1691)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x376")
int BPF_KPROBE(do_mov_general_1692)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x379")
int BPF_KPROBE(do_switch_2598)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x37e")
int BPF_KPROBE(do_switch_2599)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x3de")
int BPF_KPROBE(do_mov_general_1693)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x3e1")
int BPF_KPROBE(do_mov_general_1694)
{
    u64 addr = ctx->r15 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x3e9")
int BPF_KPROBE(do_mov_general_1695)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x3ef")
int BPF_KPROBE(do_mov_general_1696)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x421")
int BPF_KPROBE(do_mov_general_1697)
{
    u64 addr = ctx->si + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x431")
int BPF_KPROBE(do_mov_general_1698)
{
    u64 addr = ctx->si + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x46e")
int BPF_KPROBE(do_mov_general_1699)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x48a")
int BPF_KPROBE(do_mov_general_1700)
{
    u64 addr = ctx->ax + 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x4a0")
int BPF_KPROBE(do_mov_general_1701)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x4b2")
int BPF_KPROBE(do_mov_general_1702)
{
    u64 addr = ctx->r12 + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x4d9")
int BPF_KPROBE(do_mov_general_1703)
{
    u64 addr = ctx->dx + 0x16;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x4dd")
int BPF_KPROBE(do_mov_general_1704)
{
    u64 addr = ctx->dx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x4e1")
int BPF_KPROBE(do_mov_general_1705)
{
    u64 addr = ctx->r12 + ctx->cx * 0x4 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x503")
int BPF_KPROBE(do_mov_general_1706)
{
    u64 addr = ctx->ax + 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x55c")
int BPF_KPROBE(do_mov_general_1707)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x577")
int BPF_KPROBE(do_mov_general_1708)
{
    u64 addr = ctx->si + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x5ce")
int BPF_KPROBE(do_mov_general_1709)
{
    u64 addr = ctx->si + 0x12;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x5da")
int BPF_KPROBE(do_mov_general_1710)
{
    u64 addr = ctx->ax + 0x12;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x5e8")
int BPF_KPROBE(do_mov_general_1711)
{
    u64 addr = ctx->r12 + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x5f0")
int BPF_KPROBE(do_mov_general_1712)
{
    u64 addr = ctx->si + 0x1a;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x6ea")
int BPF_KPROBE(do_mov_general_1713)
{
    u64 addr = ctx->si + 0x12;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_perturbation+0x716")
int BPF_KPROBE(do_mov_general_1714)
{
    u64 addr = ctx->r12 + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x24")
int BPF_KPROBE(do_mov_general_1715)
{
    u64 addr = ctx->dx + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x6a")
int BPF_KPROBE(do_mov_general_1716)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x6d")
int BPF_KPROBE(do_mov_general_1717)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x71")
int BPF_KPROBE(do_mov_general_1718)
{
    u64 addr = ctx->r8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x79")
int BPF_KPROBE(do_mov_general_1719)
{
    u64 addr = ctx->r8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0xb5")
int BPF_KPROBE(do_mov_general_1720)
{
    u64 addr = ctx->r10;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0xdb")
int BPF_KPROBE(do_mov_general_1721)
{
    u64 addr = ctx->r10 + 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0xf3")
int BPF_KPROBE(do_mov_general_1722)
{
    u64 addr = ctx->r10 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x122")
int BPF_KPROBE(do_mov_general_1723)
{
    u64 addr = ctx->ax + 0x16;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x127")
int BPF_KPROBE(do_mov_general_1724)
{
    u64 addr = ctx->ax + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x12b")
int BPF_KPROBE(do_mov_general_1725)
{
    u64 addr = ctx->dx + ctx->r9 * 0x4 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x150")
int BPF_KPROBE(do_mov_general_1726)
{
    u64 addr = ctx->ax + 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x1b4")
int BPF_KPROBE(do_mov_general_1727)
{
    u64 addr = ctx->ax + ctx->di * 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x1cd")
int BPF_KPROBE(do_mov_general_1728)
{
    u64 addr = ctx->dx + 0x12;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x225")
int BPF_KPROBE(do_mov_general_1729)
{
    u64 addr = ctx->dx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_dequeue+0x269")
int BPF_KPROBE(do_mov_general_1730)
{
    u64 addr = ctx->dx + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/sfq_reset+0x12")
int BPF_KPROBE(do_switch_2604)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/sfq_reset+0x17")
int BPF_KPROBE(do_switch_2605)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_dump_class+0x18")
int BPF_KPROBE(do_mov_general_1731)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_reset+0x25")
int BPF_KPROBE(do_mov_general_1732)
{
    u64 addr = ctx->bx + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_reset+0x33")
int BPF_KPROBE(do_mov_general_1733)
{
    u64 addr = ctx->bx + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_reset+0x41")
int BPF_KPROBE(do_mov_general_1734)
{
    u64 addr = ctx->bx + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_walk+0x31")
int BPF_KPROBE(do_mov_general_1735)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_walk+0x3a")
int BPF_KPROBE(do_mov_general_1736)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_enqueue+0x48")
int BPF_KPROBE(do_mov_general_1737)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_enqueue+0x51")
int BPF_KPROBE(do_mov_general_1738)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_enqueue+0x6b")
int BPF_KPROBE(do_switch_2617)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_enqueue+0x70")
int BPF_KPROBE(do_switch_2618)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_enqueue+0x77")
int BPF_KPROBE(do_switch_2619)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_enqueue+0x7c")
int BPF_KPROBE(do_switch_2620)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_enqueue+0x9c")
int BPF_KPROBE(do_switch_2621)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_enqueue+0xa1")
int BPF_KPROBE(do_switch_2622)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_enqueue+0xbc")
int BPF_KPROBE(do_mov_general_1739)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_enqueue+0xc3")
int BPF_KPROBE(do_mov_general_1740)
{
    u64 addr = ctx->di + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_enqueue+0x196")
int BPF_KPROBE(do_switch_2628)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_enqueue+0x19b")
int BPF_KPROBE(do_switch_2629)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_dump+0x1b0")
int BPF_KPROBE(do_mov_general_1741)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_graft+0x5e")
int BPF_KPROBE(do_mov_general_1742)
{
    u64 addr = ctx->r12 + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_graft+0x91")
int BPF_KPROBE(do_switch_2638)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_graft+0x96")
int BPF_KPROBE(do_switch_2639)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_graft+0xf3")
int BPF_KPROBE(do_mov_general_1743)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_dequeue+0xe7")
int BPF_KPROBE(do_mov_general_1744)
{
    u64 addr = ctx->dx + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_dequeue+0xf4")
int BPF_KPROBE(do_mov_general_1745)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_dequeue+0xfb")
int BPF_KPROBE(do_mov_general_1746)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_dequeue+0x103")
int BPF_KPROBE(do_mov_general_1747)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_dequeue+0x107")
int BPF_KPROBE(do_mov_general_1748)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_dequeue+0x191")
int BPF_KPROBE(do_mov_general_1749)
{
    u64 addr = ctx->bx + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_dequeue+0x19d")
int BPF_KPROBE(do_mov_general_1750)
{
    u64 addr = ctx->bx + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_dequeue+0x1a4")
int BPF_KPROBE(do_mov_general_1751)
{
    u64 addr = ctx->bx + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x280")
int BPF_KPROBE(do_switch_2662)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_change+0x285")
int BPF_KPROBE(do_switch_2663)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tbf_change+0x2ae")
int BPF_KPROBE(do_mov_general_1752)
{
    u64 addr = ctx->r14 + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x2c1")
int BPF_KPROBE(do_mov_general_1753)
{
    u64 addr = ctx->r14 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x2da")
int BPF_KPROBE(do_mov_general_1754)
{
    u64 addr = ctx->r14 + 0x184;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x2e1")
int BPF_KPROBE(do_mov_general_1755)
{
    u64 addr = ctx->r14 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x2fc")
int BPF_KPROBE(do_mov_general_1756)
{
    u64 addr = ctx->r14 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x303")
int BPF_KPROBE(do_mov_general_1757)
{
    u64 addr = ctx->r14 + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x30a")
int BPF_KPROBE(do_mov_general_1758)
{
    u64 addr = ctx->r14 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x318")
int BPF_KPROBE(do_mov_general_1759)
{
    u64 addr = ctx->r14 + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x31f")
int BPF_KPROBE(do_mov_general_1760)
{
    u64 addr = ctx->r14 + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x32d")
int BPF_KPROBE(do_mov_general_1761)
{
    u64 addr = ctx->r14 + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x33b")
int BPF_KPROBE(do_mov_general_1762)
{
    u64 addr = ctx->r14 + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x349")
int BPF_KPROBE(do_mov_general_1763)
{
    u64 addr = ctx->r14 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_change+0x354")
int BPF_KPROBE(do_mov_general_1764)
{
    u64 addr = ctx->r14 + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_init+0x27")
int BPF_KPROBE(do_mov_general_1765)
{
    u64 addr = ctx->r12 + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/tbf_init+0x46")
int BPF_KPROBE(do_mov_general_1766)
{
    u64 addr = ctx->r12 + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0x3f")
int BPF_KPROBE(do_mov_general_1767)
{
    u64 addr = ctx->di + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0x46")
int BPF_KPROBE(do_mov_general_1768)
{
    u64 addr = ctx->di + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0x4d")
int BPF_KPROBE(do_mov_general_1769)
{
    u64 addr = ctx->di + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0x54")
int BPF_KPROBE(do_mov_general_1770)
{
    u64 addr = ctx->di + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0xd8")
int BPF_KPROBE(do_mov_general_1771)
{
    u64 addr = ctx->cx + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0x13b")
int BPF_KPROBE(do_mov_general_1772)
{
    u64 addr = ctx->di + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0x149")
int BPF_KPROBE(do_mov_general_1773)
{
    u64 addr = ctx->ax + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0x154")
int BPF_KPROBE(do_mov_general_1774)
{
    u64 addr = ctx->di + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0x162")
int BPF_KPROBE(do_mov_general_1775)
{
    u64 addr = ctx->ax + 0xb8;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0x16f")
int BPF_KPROBE(do_mov_general_1776)
{
    u64 addr = ctx->cx + 0xe0;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0x190")
int BPF_KPROBE(do_mov_general_1777)
{
    u64 addr = ctx->cx + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/teql_qdisc_init+0x19a")
int BPF_KPROBE(do_mov_general_1778)
{
    u64 addr = ctx->cx + 0xe0;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_open+0x86")
int BPF_KPROBE(do_mov_general_1779)
{
    u64 addr = ctx->dx + 0xe0;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_open+0x9e")
int BPF_KPROBE(do_mov_general_1780)
{
    u64 addr = ctx->cx + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_stats64+0xd")
int BPF_KPROBE(do_mov_slab_1781)
{
    u64 addr = ctx->si + 0x8;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/teql_master_stats64+0x1c")
int BPF_KPROBE(do_mov_general_1782)
{
    u64 addr = ctx->si + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_stats64+0x27")
int BPF_KPROBE(do_mov_general_1783)
{
    u64 addr = ctx->si + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_stats64+0x32")
int BPF_KPROBE(do_mov_slab_1784)
{
    u64 addr = ctx->si + 0x38;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/teql_master_mtu+0x3e")
int BPF_KPROBE(do_mov_general_1785)
{
    u64 addr = ctx->di + 0xe0;
    check(addr);
    return 0;
}


SEC("kprobe/teql_dequeue+0x38")
int BPF_KPROBE(do_mov_general_1786)
{
    u64 addr = ctx->di + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/teql_dequeue+0x45")
int BPF_KPROBE(do_mov_general_1787)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/teql_dequeue+0x4d")
int BPF_KPROBE(do_mov_general_1788)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/teql_dequeue+0x54")
int BPF_KPROBE(do_mov_general_1789)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/teql_dequeue+0x58")
int BPF_KPROBE(do_mov_general_1790)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/teql_dequeue+0xac")
int BPF_KPROBE(do_mov_general_1791)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/teql_dequeue+0xe3")
int BPF_KPROBE(do_mov_general_1792)
{
    u64 addr = ctx->dx + 0xb8;
    check(addr);
    return 0;
}


SEC("kprobe/teql_dequeue+0xf1")
int BPF_KPROBE(do_switch_2687)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_dequeue+0xf6")
int BPF_KPROBE(do_switch_2688)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_reset+0x10")
int BPF_KPROBE(do_switch_2689)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_reset+0x15")
int BPF_KPROBE(do_switch_2690)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_destroy+0x46")
int BPF_KPROBE(do_mov_general_1793)
{
    u64 addr = ctx->dx + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/teql_destroy+0x5d")
int BPF_KPROBE(do_switch_2691)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_destroy+0x62")
int BPF_KPROBE(do_switch_2692)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_destroy+0x6a")
int BPF_KPROBE(do_mov_general_1794)
{
    u64 addr = ctx->cx + 0xb8;
    check(addr);
    return 0;
}


SEC("kprobe/teql_destroy+0x84")
int BPF_KPROBE(do_mov_general_1795)
{
    u64 addr = ctx->cx + 0xb8;
    check(addr);
    return 0;
}


SEC("kprobe/teql_enqueue+0x21")
int BPF_KPROBE(do_mov_general_1796)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/teql_enqueue+0x29")
int BPF_KPROBE(do_mov_general_1797)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/teql_enqueue+0x43")
int BPF_KPROBE(do_mov_general_1798)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/teql_enqueue+0x46")
int BPF_KPROBE(do_mov_general_1799)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/teql_enqueue+0x4a")
int BPF_KPROBE(do_mov_general_1800)
{
    u64 addr = ctx->si + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/teql_enqueue+0x51")
int BPF_KPROBE(do_mov_general_1801)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/teql_enqueue+0x5e")
int BPF_KPROBE(do_mov_general_1802)
{
    u64 addr = ctx->si + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x146")
int BPF_KPROBE(do_switch_2700)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x14b")
int BPF_KPROBE(do_switch_2701)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x1a6")
int BPF_KPROBE(do_mov_general_1803)
{
    u64 addr = ctx->r10 + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x2ae")
int BPF_KPROBE(do_mov_general_1804)
{
    u64 addr = ctx->si + 0xa78;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x332")
int BPF_KPROBE(do_mov_general_1805)
{
    u64 addr = ctx->r12 + 0x84;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x361")
int BPF_KPROBE(do_mov_general_1806)
{
    u64 addr = ctx->gs + 0x3253a;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x389")
int BPF_KPROBE(do_mov_general_1807)
{
    u64 addr = ctx->r12 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x391")
int BPF_KPROBE(do_mov_general_1808)
{
    u64 addr = ctx->r12 + 0x84;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x3b6")
int BPF_KPROBE(do_mov_general_1809)
{
    u64 addr = ctx->bx + 0xa78;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x3c4")
int BPF_KPROBE(do_switch_2708)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x3c9")
int BPF_KPROBE(do_switch_2709)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x3e3")
int BPF_KPROBE(do_mov_general_1810)
{
    u64 addr = ctx->r12 + 0x84;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x434")
int BPF_KPROBE(do_mov_general_1811)
{
    u64 addr = ctx->r14 + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x447")
int BPF_KPROBE(do_mov_general_1812)
{
    u64 addr = ctx->r14 + 0xd0;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x46b")
int BPF_KPROBE(do_switch_2711)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x470")
int BPF_KPROBE(do_switch_2712)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x485")
int BPF_KPROBE(do_switch_2713)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x48a")
int BPF_KPROBE(do_switch_2714)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x4a2")
int BPF_KPROBE(do_mov_stk_3)
{
    u64 addr = ctx->bp + ctx->dx * 0x1 - 0x58;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/teql_master_xmit+0x4af")
int BPF_KPROBE(do_mov_general_1813)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x4d4")
int BPF_KPROBE(do_switch_2716)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x4d9")
int BPF_KPROBE(do_switch_2717)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x4f1")
int BPF_KPROBE(do_switch_2718)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x4f6")
int BPF_KPROBE(do_switch_2719)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x558")
int BPF_KPROBE(do_switch_2720)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x55d")
int BPF_KPROBE(do_switch_2721)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/teql_master_xmit+0x56f")
int BPF_KPROBE(do_mov_stk_4)
{
    u64 addr = ctx->bp + ctx->dx * 0x1 - 0x54;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/teql_master_xmit+0x57e")
int BPF_KPROBE(do_mov_stk_5)
{
    u64 addr = ctx->bp + ctx->dx * 0x1 - 0x52;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/prio_dequeue+0x53")
int BPF_KPROBE(do_mov_general_1814)
{
    u64 addr = ctx->dx + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/prio_dequeue+0x60")
int BPF_KPROBE(do_mov_general_1815)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/prio_dequeue+0x67")
int BPF_KPROBE(do_mov_general_1816)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/prio_dequeue+0x6f")
int BPF_KPROBE(do_mov_general_1817)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/prio_dequeue+0x73")
int BPF_KPROBE(do_mov_general_1818)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/prio_dump_class+0x1b")
int BPF_KPROBE(do_mov_general_1819)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/prio_enqueue+0x11f")
int BPF_KPROBE(do_mov_general_1820)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/prio_enqueue+0x123")
int BPF_KPROBE(do_mov_general_1821)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/prio_enqueue+0x135")
int BPF_KPROBE(do_mov_general_1822)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/prio_enqueue+0x139")
int BPF_KPROBE(do_mov_general_1823)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/prio_walk+0x31")
int BPF_KPROBE(do_mov_general_1824)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/prio_walk+0x56")
int BPF_KPROBE(do_mov_general_1825)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/prio_dump_class_stats+0x2c")
int BPF_KPROBE(do_switch_2736)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/prio_dump_class_stats+0x31")
int BPF_KPROBE(do_switch_2737)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/prio_dump_class_stats+0x95")
int BPF_KPROBE(do_switch_2739)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/prio_dump_class_stats+0x9a")
int BPF_KPROBE(do_switch_2740)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/prio_graft+0x62")
int BPF_KPROBE(do_mov_general_1826)
{
    u64 addr = ctx->r13 + ctx->ax * 0x8 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/prio_graft+0x95")
int BPF_KPROBE(do_switch_2747)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/prio_graft+0x9a")
int BPF_KPROBE(do_switch_2748)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/prio_graft+0x104")
int BPF_KPROBE(do_mov_general_1827)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/prio_tune+0xa6")
int BPF_KPROBE(do_mov_stk_6)
{
    u64 addr = ctx->sp + ctx->dx * 0x8 + 0x20;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/prio_tune+0xfb")
int BPF_KPROBE(do_mov_general_1828)
{
    u64 addr = ctx->r14 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/prio_tune+0x10a")
int BPF_KPROBE(do_mov_general_1829)
{
    u64 addr = ctx->r14 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/prio_tune+0x115")
int BPF_KPROBE(do_mov_general_1830)
{
    u64 addr = ctx->r14 + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/prio_tune+0x16b")
int BPF_KPROBE(do_switch_2766)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/prio_tune+0x170")
int BPF_KPROBE(do_switch_2767)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/prio_tune+0x1a6")
int BPF_KPROBE(do_mov_general_1831)
{
    u64 addr = ctx->r14 + ctx->ax * 0x8 + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_dequeue+0x2f")
int BPF_KPROBE(do_mov_general_1832)
{
    u64 addr = ctx->bx + 0x184;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_dump_class+0x1f")
int BPF_KPROBE(do_mov_general_1833)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_reset+0x40")
int BPF_KPROBE(do_mov_general_1834)
{
    u64 addr = ctx->r12 + 0x184;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_enqueue+0x64")
int BPF_KPROBE(do_mov_general_1835)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_enqueue+0x68")
int BPF_KPROBE(do_mov_general_1836)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_walk+0x39")
int BPF_KPROBE(do_mov_general_1837)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_walk+0x62")
int BPF_KPROBE(do_mov_general_1838)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_dump_class_stats+0x30")
int BPF_KPROBE(do_switch_2795)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_dump_class_stats+0x35")
int BPF_KPROBE(do_switch_2796)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_dump_class_stats+0x99")
int BPF_KPROBE(do_switch_2798)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_dump_class_stats+0x9e")
int BPF_KPROBE(do_switch_2799)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_tune+0x56")
int BPF_KPROBE(do_mov_general_1839)
{
    u64 addr = ctx->si + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_tune+0x76")
int BPF_KPROBE(do_switch_2800)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_tune+0x76")
int BPF_KPROBE(do_hotbpf_2800)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/multiq_tune+0x7b")
int BPF_KPROBE(do_switch_2801)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_tune+0xbf")
int BPF_KPROBE(do_mov_general_1840)
{
    u64 addr = ctx->bx + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_tune+0xee")
int BPF_KPROBE(do_mov_general_1841)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_tune+0x120")
int BPF_KPROBE(do_switch_2804)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_tune+0x125")
int BPF_KPROBE(do_switch_2805)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_tune+0x159")
int BPF_KPROBE(do_mov_general_1842)
{
    u64 addr = ctx->r14 + ctx->dx * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_tune+0x242")
int BPF_KPROBE(do_mov_general_1843)
{
    u64 addr = ctx->r8;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_tune+0x28a")
int BPF_KPROBE(do_switch_2814)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_tune+0x28f")
int BPF_KPROBE(do_switch_2815)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_init+0x5")
int BPF_KPROBE(do_mov_general_1844)
{
    u64 addr = ctx->di + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_init+0x64")
int BPF_KPROBE(do_mov_general_1845)
{
    u64 addr = ctx->r12 + 0x182;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_init+0x74")
int BPF_KPROBE(do_switch_2833)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_init+0x74")
int BPF_KPROBE(do_hotbpf_2833)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/multiq_init+0x79")
int BPF_KPROBE(do_switch_2834)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_init+0x79")
int BPF_KPROBE(do_mov_general_1846)
{
    u64 addr = ctx->r12 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_init+0x9e")
int BPF_KPROBE(do_mov_general_1847)
{
    u64 addr = ctx->ax + ctx->dx * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_graft+0x61")
int BPF_KPROBE(do_mov_general_1848)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/multiq_graft+0x8f")
int BPF_KPROBE(do_switch_2837)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_graft+0x94")
int BPF_KPROBE(do_switch_2838)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/multiq_graft+0xdc")
int BPF_KPROBE(do_mov_general_1849)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dump_class+0x28")
int BPF_KPROBE(do_mov_general_1850)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/netem_reset+0x67")
int BPF_KPROBE(do_switch_2855)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_reset+0x6c")
int BPF_KPROBE(do_switch_2856)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_reset+0x81")
int BPF_KPROBE(do_switch_2857)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_reset+0x86")
int BPF_KPROBE(do_switch_2858)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_reset+0x8e")
int BPF_KPROBE(do_mov_general_1851)
{
    u64 addr = ctx->r12 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/netem_reset+0x9a")
int BPF_KPROBE(do_mov_general_1852)
{
    u64 addr = ctx->r12 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/netem_reset+0xd6")
int BPF_KPROBE(do_switch_2861)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_reset+0xdb")
int BPF_KPROBE(do_switch_2862)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_reset+0xdb")
int BPF_KPROBE(do_mov_general_1853)
{
    u64 addr = ctx->r12 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/netem_reset+0xe7")
int BPF_KPROBE(do_mov_general_1854)
{
    u64 addr = ctx->r12 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/netem_reset+0xf3")
int BPF_KPROBE(do_mov_general_1855)
{
    u64 addr = ctx->r12 + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_walk+0x31")
int BPF_KPROBE(do_mov_general_1856)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_walk+0x3a")
int BPF_KPROBE(do_mov_general_1857)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/get_dist_table+0x4e")
int BPF_KPROBE(do_switch_2865)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/get_dist_table+0x53")
int BPF_KPROBE(do_switch_2866)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/get_dist_table+0x5f")
int BPF_KPROBE(do_mov_general_1858)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/get_dist_table+0x9b")
int BPF_KPROBE(do_mov_general_1859)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x92")
int BPF_KPROBE(do_mov_general_1860)
{
    u64 addr = ctx->bx + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x16d")
int BPF_KPROBE(do_mov_general_1861)
{
    u64 addr = ctx->bx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x179")
int BPF_KPROBE(do_mov_general_1862)
{
    u64 addr = ctx->bx + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x189")
int BPF_KPROBE(do_mov_general_1863)
{
    u64 addr = ctx->bx + 0x1f8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x195")
int BPF_KPROBE(do_mov_general_1864)
{
    u64 addr = ctx->bx + 0x208;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x1a0")
int BPF_KPROBE(do_mov_general_1865)
{
    u64 addr = ctx->bx + 0x20c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x1aa")
int BPF_KPROBE(do_mov_general_1866)
{
    u64 addr = ctx->bx + 0x210;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x1b5")
int BPF_KPROBE(do_mov_general_1867)
{
    u64 addr = ctx->bx + 0x200;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x1c0")
int BPF_KPROBE(do_mov_general_1868)
{
    u64 addr = ctx->bx + 0x214;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x1ca")
int BPF_KPROBE(do_mov_general_1869)
{
    u64 addr = ctx->bx + 0x218;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x1e5")
int BPF_KPROBE(do_mov_general_1870)
{
    u64 addr = ctx->bx + 0x240;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x1f0")
int BPF_KPROBE(do_mov_general_1871)
{
    u64 addr = ctx->bx + 0x23c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x1fb")
int BPF_KPROBE(do_mov_general_1872)
{
    u64 addr = ctx->bx + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x206")
int BPF_KPROBE(do_mov_general_1873)
{
    u64 addr = ctx->bx + 0x244;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x211")
int BPF_KPROBE(do_mov_general_1874)
{
    u64 addr = ctx->bx + 0x250;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x21c")
int BPF_KPROBE(do_mov_general_1875)
{
    u64 addr = ctx->bx + 0x24c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x231")
int BPF_KPROBE(do_mov_general_1876)
{
    u64 addr = ctx->bx + 0x218;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x23a")
int BPF_KPROBE(do_mov_general_1877)
{
    u64 addr = ctx->bx + 0x258;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x245")
int BPF_KPROBE(do_mov_general_1878)
{
    u64 addr = ctx->bx + 0x254;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x257")
int BPF_KPROBE(do_mov_general_1879)
{
    u64 addr = ctx->bx + 0x21c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x260")
int BPF_KPROBE(do_mov_general_1880)
{
    u64 addr = ctx->bx + 0x260;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x26b")
int BPF_KPROBE(do_mov_general_1881)
{
    u64 addr = ctx->bx + 0x25c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x27d")
int BPF_KPROBE(do_mov_general_1882)
{
    u64 addr = ctx->bx + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x287")
int BPF_KPROBE(do_mov_general_1883)
{
    u64 addr = ctx->bx + 0x228;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x290")
int BPF_KPROBE(do_mov_general_1884)
{
    u64 addr = ctx->bx + 0x22c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x299")
int BPF_KPROBE(do_mov_general_1885)
{
    u64 addr = ctx->bx + 0x238;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x2a7")
int BPF_KPROBE(do_mov_general_1886)
{
    u64 addr = ctx->bx + 0x230;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x2e1")
int BPF_KPROBE(do_mov_general_1887)
{
    u64 addr = ctx->bx + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x309")
int BPF_KPROBE(do_mov_general_1888)
{
    u64 addr = ctx->bx + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x331")
int BPF_KPROBE(do_mov_general_1889)
{
    u64 addr = ctx->bx + 0x1f8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x344")
int BPF_KPROBE(do_mov_general_1890)
{
    u64 addr = ctx->bx + 0x204;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x35b")
int BPF_KPROBE(do_mov_general_1891)
{
    u64 addr = ctx->bx + 0x298;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x366")
int BPF_KPROBE(do_mov_general_1892)
{
    u64 addr = ctx->bx + 0x2a0;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x371")
int BPF_KPROBE(do_mov_general_1893)
{
    u64 addr = ctx->bx + 0x2a8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x382")
int BPF_KPROBE(do_mov_general_1894)
{
    u64 addr = ctx->bx + 0x2b0;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x38d")
int BPF_KPROBE(do_mov_general_1895)
{
    u64 addr = ctx->bx + 0x2b8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x398")
int BPF_KPROBE(do_mov_general_1896)
{
    u64 addr = ctx->bx + 0x2a8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x3b1")
int BPF_KPROBE(do_mov_general_1897)
{
    u64 addr = ctx->bx + 0x2ac;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x3c7")
int BPF_KPROBE(do_mov_general_1898)
{
    u64 addr = ctx->bx + 0x2c8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x3cd")
int BPF_KPROBE(do_mov_general_1899)
{
    u64 addr = ctx->bx + 0x2cc;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x3fa")
int BPF_KPROBE(do_mov_general_1900)
{
    u64 addr = ctx->bx + 0x2b8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x407")
int BPF_KPROBE(do_mov_general_1901)
{
    u64 addr = ctx->bx + 0x2c0;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x42f")
int BPF_KPROBE(do_mov_general_1902)
{
    u64 addr = ctx->bx + 0x1f8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x514")
int BPF_KPROBE(do_mov_general_1903)
{
    u64 addr = ctx->bx + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x51e")
int BPF_KPROBE(do_mov_general_1904)
{
    u64 addr = ctx->bx + 0x27c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x528")
int BPF_KPROBE(do_mov_general_1905)
{
    u64 addr = ctx->bx + 0x280;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x531")
int BPF_KPROBE(do_mov_general_1906)
{
    u64 addr = ctx->bx + 0x284;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x53a")
int BPF_KPROBE(do_mov_general_1907)
{
    u64 addr = ctx->bx + 0x288;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x543")
int BPF_KPROBE(do_mov_general_1908)
{
    u64 addr = ctx->bx + 0x28c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x54c")
int BPF_KPROBE(do_mov_general_1909)
{
    u64 addr = ctx->bx + 0x290;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x57e")
int BPF_KPROBE(do_mov_general_1910)
{
    u64 addr = ctx->bx + 0x27c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x585")
int BPF_KPROBE(do_mov_general_1911)
{
    u64 addr = ctx->bx + 0x280;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x58c")
int BPF_KPROBE(do_mov_general_1912)
{
    u64 addr = ctx->bx + 0x284;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x593")
int BPF_KPROBE(do_mov_general_1913)
{
    u64 addr = ctx->bx + 0x288;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x59a")
int BPF_KPROBE(do_mov_general_1914)
{
    u64 addr = ctx->bx + 0x28c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x5a0")
int BPF_KPROBE(do_mov_general_1915)
{
    u64 addr = ctx->bx + 0x290;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x5a7")
int BPF_KPROBE(do_mov_general_1916)
{
    u64 addr = ctx->bx + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x5b8")
int BPF_KPROBE(do_mov_general_1917)
{
    u64 addr = ctx->bx + 0x2c0;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x5c9")
int BPF_KPROBE(do_mov_general_1918)
{
    u64 addr = ctx->bx + 0x230;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x5e6")
int BPF_KPROBE(do_mov_general_1919)
{
    u64 addr = ctx->bx + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x5f0")
int BPF_KPROBE(do_mov_general_1920)
{
    u64 addr = ctx->bx + 0x27c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x5fa")
int BPF_KPROBE(do_mov_general_1921)
{
    u64 addr = ctx->bx + 0x280;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x603")
int BPF_KPROBE(do_mov_general_1922)
{
    u64 addr = ctx->bx + 0x284;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x60c")
int BPF_KPROBE(do_mov_general_1923)
{
    u64 addr = ctx->bx + 0x288;
    check(addr);
    return 0;
}


SEC("kprobe/netem_change+0x615")
int BPF_KPROBE(do_mov_general_1924)
{
    u64 addr = ctx->bx + 0x28c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_init+0x35")
int BPF_KPROBE(do_mov_general_1925)
{
    u64 addr = ctx->r12 + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dump+0x252")
int BPF_KPROBE(do_mov_general_1926)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dump+0x287")
int BPF_KPROBE(do_mov_general_1927)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/netem_graft+0x4b")
int BPF_KPROBE(do_mov_general_1928)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/netem_graft+0x7f")
int BPF_KPROBE(do_switch_2908)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_graft+0x84")
int BPF_KPROBE(do_switch_2909)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_graft+0xcd")
int BPF_KPROBE(do_mov_general_1929)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/get_slot_next+0x3e")
int BPF_KPROBE(do_mov_general_1930)
{
    u64 addr = ctx->bx + 0x140;
    check(addr);
    return 0;
}


SEC("kprobe/get_slot_next+0x45")
int BPF_KPROBE(do_mov_general_1931)
{
    u64 addr = ctx->bx + 0x148;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dequeue+0x43")
int BPF_KPROBE(do_mov_general_1932)
{
    u64 addr = ctx->bx + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dequeue+0x4f")
int BPF_KPROBE(do_mov_general_1933)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dequeue+0xb6")
int BPF_KPROBE(do_mov_general_1934)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dequeue+0x160")
int BPF_KPROBE(do_mov_general_1935)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dequeue+0x168")
int BPF_KPROBE(do_mov_general_1936)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dequeue+0x178")
int BPF_KPROBE(do_mov_general_1937)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dequeue+0x196")
int BPF_KPROBE(do_mov_general_1938)
{
    u64 addr = ctx->bx + 0x2c8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dequeue+0x1a1")
int BPF_KPROBE(do_mov_general_1939)
{
    u64 addr = ctx->bx + 0x2cc;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dequeue+0x271")
int BPF_KPROBE(do_mov_general_1940)
{
    u64 addr = ctx->bx + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/netem_dequeue+0x281")
int BPF_KPROBE(do_mov_general_1941)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x30")
int BPF_KPROBE(do_mov_general_1942)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x8c")
int BPF_KPROBE(do_switch_2934)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x91")
int BPF_KPROBE(do_switch_2935)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x203")
int BPF_KPROBE(do_mov_general_1943)
{
    u64 addr = ctx->r14 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x240")
int BPF_KPROBE(do_mov_general_1944)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x249")
int BPF_KPROBE(do_mov_general_1945)
{
    u64 addr = ctx->r14 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x251")
int BPF_KPROBE(do_mov_general_1946)
{
    u64 addr = ctx->r14 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x259")
int BPF_KPROBE(do_mov_general_1947)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x2a5")
int BPF_KPROBE(do_mov_general_1948)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x2ac")
int BPF_KPROBE(do_mov_general_1949)
{
    u64 addr = ctx->di + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x37c")
int BPF_KPROBE(do_mov_general_1950)
{
    u64 addr = ctx->r14 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x387")
int BPF_KPROBE(do_mov_general_1951)
{
    u64 addr = ctx->r15 + 0x20c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x392")
int BPF_KPROBE(do_mov_general_1952)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x3ae")
int BPF_KPROBE(do_mov_general_1953)
{
    u64 addr = ctx->r15 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x3f7")
int BPF_KPROBE(do_switch_2945)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x3fc")
int BPF_KPROBE(do_switch_2946)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x41e")
int BPF_KPROBE(do_mov_general_1954)
{
    u64 addr = ctx->r15 + 0x214;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x42e")
int BPF_KPROBE(do_mov_general_1955)
{
    u64 addr = ctx->r15 + 0x214;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x485")
int BPF_KPROBE(do_switch_2949)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x48a")
int BPF_KPROBE(do_switch_2950)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x4a2")
int BPF_KPROBE(do_switch_2951)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x4a7")
int BPF_KPROBE(do_switch_2952)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x4c2")
int BPF_KPROBE(do_switch_2953)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x4c7")
int BPF_KPROBE(do_switch_2954)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x4cd")
int BPF_KPROBE(do_mov_general_1956)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x4d4")
int BPF_KPROBE(do_mov_general_1957)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x506")
int BPF_KPROBE(do_switch_2955)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x50b")
int BPF_KPROBE(do_switch_2956)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0x5c7")
int BPF_KPROBE(do_mov_general_1958)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x5ca")
int BPF_KPROBE(do_mov_general_1959)
{
    u64 addr = ctx->r15 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x638")
int BPF_KPROBE(do_mov_general_1960)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x63b")
int BPF_KPROBE(do_mov_general_1961)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x6a1")
int BPF_KPROBE(do_mov_general_1962)
{
    u64 addr = ctx->r15 + 0x27c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x6cf")
int BPF_KPROBE(do_mov_general_1963)
{
    u64 addr = ctx->r15 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x76b")
int BPF_KPROBE(do_mov_general_1964)
{
    u64 addr = ctx->r15 + 0x24c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x7ae")
int BPF_KPROBE(do_mov_general_1965)
{
    u64 addr = ctx->r15 + 0x25c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x7e0")
int BPF_KPROBE(do_mov_general_1966)
{
    u64 addr = ctx->r15 + 0x27c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x7fb")
int BPF_KPROBE(do_mov_general_1967)
{
    u64 addr = ctx->r15 + 0x27c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x88a")
int BPF_KPROBE(do_mov_general_1968)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x8b5")
int BPF_KPROBE(do_mov_general_1969)
{
    u64 addr = ctx->r14 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x960")
int BPF_KPROBE(do_mov_general_1970)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x973")
int BPF_KPROBE(do_mov_general_1971)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x97a")
int BPF_KPROBE(do_mov_general_1972)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0x9f8")
int BPF_KPROBE(do_mov_general_1973)
{
    u64 addr = ctx->di + ctx->ax * 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xa00")
int BPF_KPROBE(do_mov_general_1974)
{
    u64 addr = ctx->r15 + 0x27c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xa61")
int BPF_KPROBE(do_mov_general_1975)
{
    u64 addr = ctx->dx + 0xa;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xa65")
int BPF_KPROBE(do_mov_general_1976)
{
    u64 addr = ctx->dx + 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xabf")
int BPF_KPROBE(do_mov_general_1977)
{
    u64 addr = ctx->r15 + 0x244;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xae2")
int BPF_KPROBE(do_switch_2971)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0xae7")
int BPF_KPROBE(do_switch_2972)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0xafa")
int BPF_KPROBE(do_switch_2973)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0xaff")
int BPF_KPROBE(do_switch_2974)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0xb10")
int BPF_KPROBE(do_mov_general_1978)
{
    u64 addr = ctx->r15 + 0x27c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xb29")
int BPF_KPROBE(do_mov_general_1979)
{
    u64 addr = ctx->r15 + 0x27c;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xb6b")
int BPF_KPROBE(do_mov_general_1980)
{
    u64 addr = ctx->r15 + 0x254;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xb95")
int BPF_KPROBE(do_switch_2976)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0xb9a")
int BPF_KPROBE(do_switch_2977)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0xbac")
int BPF_KPROBE(do_mov_general_1981)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xbaf")
int BPF_KPROBE(do_mov_general_1982)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xbd2")
int BPF_KPROBE(do_mov_general_1983)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xbe1")
int BPF_KPROBE(do_mov_general_1984)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xbe4")
int BPF_KPROBE(do_mov_general_1985)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/netem_enqueue+0xc0c")
int BPF_KPROBE(do_switch_2978)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0xc11")
int BPF_KPROBE(do_switch_2979)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/netem_enqueue+0xc2e")
int BPF_KPROBE(do_mov_general_1986)
{
    u64 addr = ctx->r15 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/drr_qlen_notify+0xe")
int BPF_KPROBE(do_mov_general_1987)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/drr_qlen_notify+0x15")
int BPF_KPROBE(do_mov_general_1988)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/drr_qlen_notify+0x22")
int BPF_KPROBE(do_mov_general_1989)
{
    u64 addr = ctx->si + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/drr_qlen_notify+0x2a")
int BPF_KPROBE(do_mov_general_1990)
{
    u64 addr = ctx->si + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/drr_reset_qdisc+0x69")
int BPF_KPROBE(do_mov_general_1991)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/drr_reset_qdisc+0x6d")
int BPF_KPROBE(do_mov_general_1992)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/drr_reset_qdisc+0x74")
int BPF_KPROBE(do_mov_general_1993)
{
    u64 addr = ctx->bx + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/drr_reset_qdisc+0x78")
int BPF_KPROBE(do_mov_general_1994)
{
    u64 addr = ctx->bx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x3c")
int BPF_KPROBE(do_mov_general_1995)
{
    u64 addr = ctx->bx + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x43")
int BPF_KPROBE(do_mov_general_1996)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x47")
int BPF_KPROBE(do_mov_general_1997)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x51")
int BPF_KPROBE(do_mov_general_1998)
{
    u64 addr = ctx->r14 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x58")
int BPF_KPROBE(do_mov_general_1999)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x5b")
int BPF_KPROBE(do_mov_general_2000)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x5f")
int BPF_KPROBE(do_mov_general_2001)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x9a")
int BPF_KPROBE(do_mov_general_2002)
{
    u64 addr = ctx->bx + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0xca")
int BPF_KPROBE(do_mov_general_2003)
{
    u64 addr = ctx->ax + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0xd9")
int BPF_KPROBE(do_mov_general_2004)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0xe1")
int BPF_KPROBE(do_mov_general_2005)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0xea")
int BPF_KPROBE(do_mov_general_2006)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0xee")
int BPF_KPROBE(do_mov_general_2007)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x126")
int BPF_KPROBE(do_mov_general_2008)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x12a")
int BPF_KPROBE(do_mov_general_2009)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x137")
int BPF_KPROBE(do_mov_general_2010)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dequeue+0x13e")
int BPF_KPROBE(do_mov_general_2011)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/drr_walk+0x56")
int BPF_KPROBE(do_mov_general_2012)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/drr_walk+0x83")
int BPF_KPROBE(do_mov_general_2013)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/drr_init_qdisc+0x52")
int BPF_KPROBE(do_mov_general_2014)
{
    u64 addr = ctx->bx + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/drr_init_qdisc+0x5c")
int BPF_KPROBE(do_mov_general_2015)
{
    u64 addr = ctx->bx + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/drr_tcf_block+0x35")
int BPF_KPROBE(do_mov_general_2016)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dump_class+0x2a")
int BPF_KPROBE(do_mov_general_2017)
{
    u64 addr = ctx->cx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dump_class+0x33")
int BPF_KPROBE(do_mov_general_2018)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dump_class+0x42")
int BPF_KPROBE(do_mov_general_2019)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dump_class+0x98")
int BPF_KPROBE(do_mov_general_2020)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/drr_dump_class_stats+0x6c")
int BPF_KPROBE(do_switch_2993)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_dump_class_stats+0x71")
int BPF_KPROBE(do_switch_2994)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_dump_class_stats+0x80")
int BPF_KPROBE(do_switch_2995)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_dump_class_stats+0x85")
int BPF_KPROBE(do_switch_2996)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_dump_class_stats+0x9a")
int BPF_KPROBE(do_switch_2997)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_dump_class_stats+0x9f")
int BPF_KPROBE(do_switch_2998)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_dump_class_stats+0xaf")
int BPF_KPROBE(do_switch_2999)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_dump_class_stats+0xb4")
int BPF_KPROBE(do_switch_3000)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_destroy_qdisc+0x5b")
int BPF_KPROBE(do_switch_3004)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_destroy_qdisc+0x60")
int BPF_KPROBE(do_switch_3005)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_delete_class+0x8c")
int BPF_KPROBE(do_switch_3011)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_delete_class+0x91")
int BPF_KPROBE(do_switch_3012)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_delete_class+0xf1")
int BPF_KPROBE(do_switch_3018)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_delete_class+0xf6")
int BPF_KPROBE(do_switch_3019)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_graft_class+0x54")
int BPF_KPROBE(do_mov_general_2021)
{
    u64 addr = ctx->r13 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/drr_graft_class+0x83")
int BPF_KPROBE(do_switch_3027)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_graft_class+0x88")
int BPF_KPROBE(do_switch_3028)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_graft_class+0xd0")
int BPF_KPROBE(do_mov_general_2022)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/drr_change_class+0xb0")
int BPF_KPROBE(do_switch_3040)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_change_class+0xb5")
int BPF_KPROBE(do_switch_3041)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_change_class+0xf5")
int BPF_KPROBE(do_mov_general_2023)
{
    u64 addr = ctx->r15 + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/drr_change_class+0x147")
int BPF_KPROBE(do_switch_3045)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_change_class+0x147")
int BPF_KPROBE(do_hotbpf_3045)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/drr_change_class+0x14c")
int BPF_KPROBE(do_switch_3046)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_change_class+0x163")
int BPF_KPROBE(do_switch_3047)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_change_class+0x168")
int BPF_KPROBE(do_switch_3048)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_change_class+0x17c")
int BPF_KPROBE(do_mov_general_2024)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/drr_change_class+0x17f")
int BPF_KPROBE(do_mov_general_2025)
{
    u64 addr = ctx->r15 + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/drr_change_class+0x18f")
int BPF_KPROBE(do_mov_general_2026)
{
    u64 addr = ctx->r15 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/drr_change_class+0x1c8")
int BPF_KPROBE(do_switch_3051)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_change_class+0x1cd")
int BPF_KPROBE(do_switch_3052)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/drr_change_class+0x225")
int BPF_KPROBE(do_mov_general_2027)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/drr_change_class+0x25e")
int BPF_KPROBE(do_mov_general_2028)
{
    u64 addr = ctx->r15 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/drr_change_class+0x2af")
int BPF_KPROBE(do_mov_general_2029)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/drr_change_class+0x321")
int BPF_KPROBE(do_mov_general_2030)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/drr_change_class+0x422")
int BPF_KPROBE(do_mov_general_2031)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/drr_change_class+0x445")
int BPF_KPROBE(do_mov_general_2032)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/drr_enqueue+0xf0")
int BPF_KPROBE(do_mov_general_2033)
{
    u64 addr = ctx->r12 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/drr_enqueue+0xf8")
int BPF_KPROBE(do_mov_general_2034)
{
    u64 addr = ctx->bx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/drr_enqueue+0xfc")
int BPF_KPROBE(do_mov_general_2035)
{
    u64 addr = ctx->bx + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/drr_enqueue+0x100")
int BPF_KPROBE(do_mov_general_2036)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/drr_enqueue+0x106")
int BPF_KPROBE(do_mov_general_2037)
{
    u64 addr = ctx->bx + 0x6c;
    check(addr);
    return 0;
}


SEC("kprobe/drr_enqueue+0x15e")
int BPF_KPROBE(do_mov_general_2038)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/drr_enqueue+0x161")
int BPF_KPROBE(do_mov_general_2039)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/plug_init+0x6")
int BPF_KPROBE(do_mov_general_2040)
{
    u64 addr = ctx->di + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/plug_init+0x11")
int BPF_KPROBE(do_mov_general_2041)
{
    u64 addr = ctx->di + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/plug_init+0x1e")
int BPF_KPROBE(do_mov_general_2042)
{
    u64 addr = ctx->di + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/plug_init+0x38")
int BPF_KPROBE(do_mov_general_2043)
{
    u64 addr = ctx->di + 0x184;
    check(addr);
    return 0;
}


SEC("kprobe/plug_init+0x41")
int BPF_KPROBE(do_mov_general_2044)
{
    u64 addr = ctx->di + 0x181;
    check(addr);
    return 0;
}


SEC("kprobe/plug_change+0x37")
int BPF_KPROBE(do_mov_general_2045)
{
    u64 addr = ctx->di + 0x18c;
    check(addr);
    return 0;
}


SEC("kprobe/plug_change+0x41")
int BPF_KPROBE(do_mov_general_2046)
{
    u64 addr = ctx->di + 0x181;
    check(addr);
    return 0;
}


SEC("kprobe/plug_change+0x4c")
int BPF_KPROBE(do_switch_3078)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/plug_change+0x51")
int BPF_KPROBE(do_switch_3079)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/plug_change+0x5d")
int BPF_KPROBE(do_mov_general_2047)
{
    u64 addr = ctx->di + 0x184;
    check(addr);
    return 0;
}


SEC("kprobe/plug_change+0x7b")
int BPF_KPROBE(do_mov_general_2048)
{
    u64 addr = ctx->di + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/plug_change+0x85")
int BPF_KPROBE(do_mov_general_2049)
{
    u64 addr = ctx->di + 0x18c;
    check(addr);
    return 0;
}


SEC("kprobe/plug_change+0x8d")
int BPF_KPROBE(do_mov_general_2050)
{
    u64 addr = ctx->di + 0x181;
    check(addr);
    return 0;
}


SEC("kprobe/plug_change+0x94")
int BPF_KPROBE(do_mov_general_2051)
{
    u64 addr = ctx->di + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/plug_change+0x9d")
int BPF_KPROBE(do_mov_general_2052)
{
    u64 addr = ctx->di + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/plug_change+0xad")
int BPF_KPROBE(do_mov_general_2053)
{
    u64 addr = ctx->di + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/plug_change+0xb4")
int BPF_KPROBE(do_mov_general_2054)
{
    u64 addr = ctx->di + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/plug_change+0xc2")
int BPF_KPROBE(do_switch_3080)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/plug_change+0xc7")
int BPF_KPROBE(do_switch_3081)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/plug_dequeue+0x2c")
int BPF_KPROBE(do_mov_general_2055)
{
    u64 addr = ctx->di + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/plug_dequeue+0x48")
int BPF_KPROBE(do_mov_general_2056)
{
    u64 addr = ctx->di + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/plug_dequeue+0x54")
int BPF_KPROBE(do_mov_general_2057)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/plug_dequeue+0x94")
int BPF_KPROBE(do_mov_general_2058)
{
    u64 addr = ctx->di + 0x181;
    check(addr);
    return 0;
}


SEC("kprobe/plug_dequeue+0x9f")
int BPF_KPROBE(do_mov_general_2059)
{
    u64 addr = ctx->di + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/plug_enqueue+0x31")
int BPF_KPROBE(do_mov_general_2060)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/plug_enqueue+0x38")
int BPF_KPROBE(do_mov_general_2061)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/plug_enqueue+0x41")
int BPF_KPROBE(do_mov_general_2062)
{
    u64 addr = ctx->si + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/plug_enqueue+0x52")
int BPF_KPROBE(do_mov_general_2063)
{
    u64 addr = ctx->si + 0xc4;
    check(addr);
    return 0;
}


SEC("kprobe/plug_enqueue+0x6f")
int BPF_KPROBE(do_mov_general_2064)
{
    u64 addr = ctx->si + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/plug_enqueue+0x76")
int BPF_KPROBE(do_mov_general_2065)
{
    u64 addr = ctx->si + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/plug_enqueue+0x82")
int BPF_KPROBE(do_mov_general_2066)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/plug_enqueue+0x8a")
int BPF_KPROBE(do_mov_general_2067)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_qlen_notify+0x3e")
int BPF_KPROBE(do_mov_general_2068)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_qlen_notify+0x42")
int BPF_KPROBE(do_mov_general_2069)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_qlen_notify+0x4f")
int BPF_KPROBE(do_mov_general_2070)
{
    u64 addr = ctx->di + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_qlen_notify+0x5a")
int BPF_KPROBE(do_mov_general_2071)
{
    u64 addr = ctx->di + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_offload_change+0xec")
int BPF_KPROBE(do_mov_general_2072)
{
    u64 addr = ctx->cx - 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/ets_offload_change+0xfb")
int BPF_KPROBE(do_mov_general_2073)
{
    u64 addr = ctx->cx - 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_reset+0x6a")
int BPF_KPROBE(do_mov_general_2074)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_reset+0x6e")
int BPF_KPROBE(do_mov_general_2075)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_reset+0x71")
int BPF_KPROBE(do_mov_general_2076)
{
    u64 addr = ctx->ax + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_reset+0x78")
int BPF_KPROBE(do_mov_general_2077)
{
    u64 addr = ctx->ax + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_walk+0x31")
int BPF_KPROBE(do_mov_general_2078)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_walk+0x56")
int BPF_KPROBE(do_mov_general_2079)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_tcf_block+0x35")
int BPF_KPROBE(do_mov_general_2080)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_enqueue+0x17c")
int BPF_KPROBE(do_mov_general_2081)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_enqueue+0x17f")
int BPF_KPROBE(do_mov_general_2082)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_enqueue+0x194")
int BPF_KPROBE(do_mov_general_2083)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_enqueue+0x197")
int BPF_KPROBE(do_mov_general_2084)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_enqueue+0x1a6")
int BPF_KPROBE(do_mov_general_2085)
{
    u64 addr = ctx->bx + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_enqueue+0x1ad")
int BPF_KPROBE(do_mov_general_2086)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_enqueue+0x1b1")
int BPF_KPROBE(do_mov_general_2087)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_enqueue+0x1b6")
int BPF_KPROBE(do_mov_general_2088)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_enqueue+0x1be")
int BPF_KPROBE(do_mov_general_2089)
{
    u64 addr = ctx->r12 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_dump_stats+0x32")
int BPF_KPROBE(do_switch_3100)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ets_class_dump_stats+0x37")
int BPF_KPROBE(do_switch_3101)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ets_class_dump_stats+0x9b")
int BPF_KPROBE(do_switch_3103)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ets_class_dump_stats+0xa0")
int BPF_KPROBE(do_switch_3104)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x6b")
int BPF_KPROBE(do_mov_general_2090)
{
    u64 addr = ctx->dx + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x78")
int BPF_KPROBE(do_mov_general_2091)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x7f")
int BPF_KPROBE(do_mov_general_2092)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x87")
int BPF_KPROBE(do_mov_general_2093)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x8b")
int BPF_KPROBE(do_mov_general_2094)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x154")
int BPF_KPROBE(do_mov_general_2095)
{
    u64 addr = ctx->r12 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x15e")
int BPF_KPROBE(do_mov_general_2096)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x162")
int BPF_KPROBE(do_mov_general_2097)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x16c")
int BPF_KPROBE(do_mov_general_2098)
{
    u64 addr = ctx->r13 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x173")
int BPF_KPROBE(do_mov_general_2099)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x177")
int BPF_KPROBE(do_mov_general_2100)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x17c")
int BPF_KPROBE(do_mov_general_2101)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x1dd")
int BPF_KPROBE(do_mov_general_2102)
{
    u64 addr = ctx->r12 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x203")
int BPF_KPROBE(do_mov_general_2103)
{
    u64 addr = ctx->dx + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x210")
int BPF_KPROBE(do_mov_general_2104)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x217")
int BPF_KPROBE(do_mov_general_2105)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x21f")
int BPF_KPROBE(do_mov_general_2106)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x223")
int BPF_KPROBE(do_mov_general_2107)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x266")
int BPF_KPROBE(do_mov_general_2108)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x26a")
int BPF_KPROBE(do_mov_general_2109)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x26d")
int BPF_KPROBE(do_mov_general_2110)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dequeue+0x275")
int BPF_KPROBE(do_mov_general_2111)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_dump+0x46")
int BPF_KPROBE(do_mov_general_2112)
{
    u64 addr = ctx->cx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_dump+0x71")
int BPF_KPROBE(do_mov_general_2113)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_dump+0x80")
int BPF_KPROBE(do_mov_general_2114)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_dump+0xc7")
int BPF_KPROBE(do_mov_general_2115)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x189")
int BPF_KPROBE(do_mov_general_2116)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x226")
int BPF_KPROBE(do_mov_stk_7)
{
    u64 addr = ctx->bp + ctx->cx * 0x4 - 0x108;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x294")
int BPF_KPROBE(do_mov_general_2117)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x34d")
int BPF_KPROBE(do_mov_general_2118)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x406")
int BPF_KPROBE(do_mov_general_2119)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x453")
int BPF_KPROBE(do_mov_general_2120)
{
    u64 addr = ctx->bx + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x45a")
int BPF_KPROBE(do_mov_general_2121)
{
    u64 addr = ctx->si + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x461")
int BPF_KPROBE(do_mov_general_2122)
{
    u64 addr = ctx->si + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x468")
int BPF_KPROBE(do_mov_general_2123)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x472")
int BPF_KPROBE(do_mov_general_2124)
{
    u64 addr = ctx->si + 0x1dc;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x4e0")
int BPF_KPROBE(do_mov_general_2125)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x4e4")
int BPF_KPROBE(do_mov_general_2126)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x4ec")
int BPF_KPROBE(do_mov_general_2127)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x4f0")
int BPF_KPROBE(do_mov_general_2128)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x52f")
int BPF_KPROBE(do_switch_3120)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x534")
int BPF_KPROBE(do_switch_3121)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x56d")
int BPF_KPROBE(do_mov_general_2129)
{
    u64 addr = ctx->bx + 0x1a4;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x577")
int BPF_KPROBE(do_mov_general_2130)
{
    u64 addr = ctx->bx + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x57e")
int BPF_KPROBE(do_mov_general_2131)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x5ba")
int BPF_KPROBE(do_mov_general_2132)
{
    u64 addr = ctx->dx - 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x5e4")
int BPF_KPROBE(do_mov_general_2133)
{
    u64 addr = ctx->bx + ctx->ax * 0x1 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x682")
int BPF_KPROBE(do_mov_general_2134)
{
    u64 addr = ctx->r12 - 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x68b")
int BPF_KPROBE(do_mov_general_2135)
{
    u64 addr = ctx->r12 - 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x694")
int BPF_KPROBE(do_mov_general_2136)
{
    u64 addr = ctx->r12 - 0x54;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x69d")
int BPF_KPROBE(do_switch_3127)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x6a2")
int BPF_KPROBE(do_switch_3128)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x6a2")
int BPF_KPROBE(do_mov_general_2137)
{
    u64 addr = ctx->r12 - 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x6ab")
int BPF_KPROBE(do_mov_general_2138)
{
    u64 addr = ctx->r12 - 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x6b4")
int BPF_KPROBE(do_mov_general_2139)
{
    u64 addr = ctx->r12 - 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x727")
int BPF_KPROBE(do_mov_general_2140)
{
    u64 addr = ctx->bx + 0x1a4;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x731")
int BPF_KPROBE(do_mov_general_2141)
{
    u64 addr = ctx->bx + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x738")
int BPF_KPROBE(do_mov_general_2142)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x767")
int BPF_KPROBE(do_mov_general_2143)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x774")
int BPF_KPROBE(do_mov_general_2144)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x779")
int BPF_KPROBE(do_mov_general_2145)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x80a")
int BPF_KPROBE(do_mov_general_2146)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x82d")
int BPF_KPROBE(do_mov_general_2147)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x850")
int BPF_KPROBE(do_mov_general_2148)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x877")
int BPF_KPROBE(do_mov_general_2149)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x8af")
int BPF_KPROBE(do_mov_general_2150)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x8d6")
int BPF_KPROBE(do_mov_general_2151)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_change+0x8fd")
int BPF_KPROBE(do_mov_general_2152)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_init+0x42")
int BPF_KPROBE(do_mov_general_2153)
{
    u64 addr = ctx->r12 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_init+0x5a")
int BPF_KPROBE(do_mov_general_2154)
{
    u64 addr = ctx->r12 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_init+0x62")
int BPF_KPROBE(do_mov_general_2155)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_init+0x65")
int BPF_KPROBE(do_mov_general_2156)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dump+0x180")
int BPF_KPROBE(do_mov_general_2157)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dump+0x201")
int BPF_KPROBE(do_mov_general_2158)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/ets_qdisc_dump+0x218")
int BPF_KPROBE(do_mov_general_2159)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_graft+0x67")
int BPF_KPROBE(do_mov_general_2160)
{
    u64 addr = ctx->ax + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_graft+0x99")
int BPF_KPROBE(do_switch_3156)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ets_class_graft+0x9e")
int BPF_KPROBE(do_switch_3157)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/ets_class_graft+0xed")
int BPF_KPROBE(do_mov_general_2161)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_change+0x102")
int BPF_KPROBE(do_mov_general_2162)
{
    u64 addr = ctx->r12 + ctx->ax * 0x1 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_change+0x1f6")
int BPF_KPROBE(do_mov_general_2163)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_change+0x202")
int BPF_KPROBE(do_mov_general_2164)
{
    u64 addr = ctx->r15 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_change+0x20a")
int BPF_KPROBE(do_mov_general_2165)
{
    u64 addr = ctx->r15 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_change+0x224")
int BPF_KPROBE(do_mov_general_2166)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_change+0x246")
int BPF_KPROBE(do_mov_general_2167)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_change+0x268")
int BPF_KPROBE(do_mov_general_2168)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/ets_class_change+0x293")
int BPF_KPROBE(do_mov_general_2169)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_walk+0x27")
int BPF_KPROBE(do_mov_general_2170)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_walk+0x4a")
int BPF_KPROBE(do_mov_general_2171)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_walk+0x76")
int BPF_KPROBE(do_mov_general_2172)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_walk+0xc3")
int BPF_KPROBE(do_mov_general_2173)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_attach+0x8d")
int BPF_KPROBE(do_mov_general_2174)
{
    u64 addr = ctx->r13 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_destroy+0xcc")
int BPF_KPROBE(do_switch_3196)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_destroy+0xd1")
int BPF_KPROBE(do_switch_3197)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class+0x4a")
int BPF_KPROBE(do_switch_3199)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class+0x4f")
int BPF_KPROBE(do_switch_3200)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class+0x66")
int BPF_KPROBE(do_mov_general_2175)
{
    u64 addr = ctx->r12 + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_dump_class+0x74")
int BPF_KPROBE(do_mov_general_2176)
{
    u64 addr = ctx->cx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_dump_class+0x7d")
int BPF_KPROBE(do_mov_general_2177)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_graft+0x59")
int BPF_KPROBE(do_mov_general_2178)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_init+0xab")
int BPF_KPROBE(do_mov_general_2179)
{
    u64 addr = ctx->r15 + 0x15;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_init+0x134")
int BPF_KPROBE(do_mov_general_2180)
{
    u64 addr = ctx->r14 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_init+0x154")
int BPF_KPROBE(do_mov_general_2181)
{
    u64 addr = ctx->r14 + 0x18a;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_init+0x1b6")
int BPF_KPROBE(do_mov_general_2182)
{
    u64 addr = ctx->r14 + ctx->si * 0x8 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_init+0x211")
int BPF_KPROBE(do_switch_3204)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_init+0x211")
int BPF_KPROBE(do_hotbpf_3204)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/mqprio_init+0x216")
int BPF_KPROBE(do_switch_3205)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_init+0x216")
int BPF_KPROBE(do_mov_general_2183)
{
    u64 addr = ctx->r14 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_init+0x23c")
int BPF_KPROBE(do_mov_general_2184)
{
    u64 addr = ctx->dx + ctx->r13 * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_init+0x475")
int BPF_KPROBE(do_mov_stk_8)
{
    u64 addr = ctx->bp + ctx->ax * 0x1 - 0xb8;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/mqprio_init+0x485")
int BPF_KPROBE(do_mov_general_2185)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_init+0x4e1")
int BPF_KPROBE(do_mov_general_2186)
{
    u64 addr = ctx->r14 + ctx->cx * 0x8 + 0x218;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_init+0x53b")
int BPF_KPROBE(do_mov_general_2187)
{
    u64 addr = ctx->r14 + 0x18c;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_init+0x55c")
int BPF_KPROBE(do_mov_general_2188)
{
    u64 addr = ctx->r12 + ctx->ax * 0x1 + 0x8e2;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_init+0x584")
int BPF_KPROBE(do_switch_3208)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_init+0x589")
int BPF_KPROBE(do_switch_3209)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_init+0x5a5")
int BPF_KPROBE(do_switch_3210)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_init+0x5aa")
int BPF_KPROBE(do_switch_3211)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_init+0x639")
int BPF_KPROBE(do_mov_stk_9)
{
    u64 addr = ctx->bp + ctx->ax * 0x1 - 0x138;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/mqprio_init+0x649")
int BPF_KPROBE(do_mov_general_2189)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x7c")
int BPF_KPROBE(do_switch_3214)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x81")
int BPF_KPROBE(do_switch_3215)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0xb0")
int BPF_KPROBE(do_switch_3216)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0xb5")
int BPF_KPROBE(do_switch_3217)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x151")
int BPF_KPROBE(do_switch_3219)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x156")
int BPF_KPROBE(do_switch_3220)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x1cf")
int BPF_KPROBE(do_switch_3223)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x1d4")
int BPF_KPROBE(do_switch_3224)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x1e4")
int BPF_KPROBE(do_switch_3225)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x1e9")
int BPF_KPROBE(do_switch_3226)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x232")
int BPF_KPROBE(do_switch_3229)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x237")
int BPF_KPROBE(do_switch_3230)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x24a")
int BPF_KPROBE(do_switch_3231)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump_class_stats+0x24f")
int BPF_KPROBE(do_switch_3232)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump+0x82")
int BPF_KPROBE(do_mov_general_2190)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_dump+0x94")
int BPF_KPROBE(do_switch_3234)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump+0x99")
int BPF_KPROBE(do_switch_3235)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump+0xa0")
int BPF_KPROBE(do_mov_general_2191)
{
    u64 addr = ctx->bx + 0xc0;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_dump+0xb0")
int BPF_KPROBE(do_mov_general_2192)
{
    u64 addr = ctx->bx + 0xc8;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_dump+0xbb")
int BPF_KPROBE(do_mov_general_2193)
{
    u64 addr = ctx->bx + 0xd0;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_dump+0x112")
int BPF_KPROBE(do_switch_3237)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump+0x117")
int BPF_KPROBE(do_switch_3238)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump+0x127")
int BPF_KPROBE(do_switch_3239)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump+0x12c")
int BPF_KPROBE(do_switch_3240)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/mqprio_dump+0x18d")
int BPF_KPROBE(do_mov_general_2194)
{
    u64 addr = ctx->r14 + ctx->ax * 0x2 + 0x12;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_dump+0x19c")
int BPF_KPROBE(do_mov_general_2195)
{
    u64 addr = ctx->r14 + ctx->ax * 0x2 + 0x32;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_dump+0x20d")
int BPF_KPROBE(do_mov_general_2196)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_dump+0x40b")
int BPF_KPROBE(do_mov_general_2197)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/mqprio_dump+0x43d")
int BPF_KPROBE(do_mov_general_2198)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_change+0x13")
int BPF_KPROBE(do_mov_general_2199)
{
    u64 addr = ctx->di + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_init+0x1a")
int BPF_KPROBE(do_mov_general_2200)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_init+0x1d")
int BPF_KPROBE(do_mov_general_2201)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_init+0x25")
int BPF_KPROBE(do_mov_general_2202)
{
    u64 addr = ctx->ax - 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_init+0x38")
int BPF_KPROBE(do_mov_general_2203)
{
    u64 addr = ctx->r8 + 0x780;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_init+0x43")
int BPF_KPROBE(do_mov_general_2204)
{
    u64 addr = ctx->r8 + 0xc78;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_init+0x63")
int BPF_KPROBE(do_mov_general_2205)
{
    u64 addr = ctx->r8 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_init+0x6b")
int BPF_KPROBE(do_mov_general_2206)
{
    u64 addr = ctx->r8 + 0xc80;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_init+0x85")
int BPF_KPROBE(do_mov_general_2207)
{
    u64 addr = ctx->r8 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_dequeue+0x51")
int BPF_KPROBE(do_mov_general_2208)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_dequeue+0x5b")
int BPF_KPROBE(do_mov_general_2209)
{
    u64 addr = ctx->r8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_dequeue+0x62")
int BPF_KPROBE(do_mov_general_2210)
{
    u64 addr = ctx->r8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_dequeue+0x6a")
int BPF_KPROBE(do_mov_general_2211)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_dequeue+0x6e")
int BPF_KPROBE(do_mov_general_2212)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_dequeue+0xcb")
int BPF_KPROBE(do_mov_general_2213)
{
    u64 addr = ctx->r10 + 0x784;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_dequeue+0x122")
int BPF_KPROBE(do_mov_general_2214)
{
    u64 addr = ctx->ax + 0xc80;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_dequeue+0x138")
int BPF_KPROBE(do_mov_general_2215)
{
    u64 addr = ctx->ax + 0xc80;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x74")
int BPF_KPROBE(do_mov_general_2216)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x77")
int BPF_KPROBE(do_mov_general_2217)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x8a")
int BPF_KPROBE(do_mov_general_2218)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x8d")
int BPF_KPROBE(do_mov_general_2219)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x91")
int BPF_KPROBE(do_mov_general_2220)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x95")
int BPF_KPROBE(do_mov_general_2221)
{
    u64 addr = ctx->r10;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0xab")
int BPF_KPROBE(do_mov_general_2222)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x102")
int BPF_KPROBE(do_mov_general_2223)
{
    u64 addr = ctx->r8 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x10d")
int BPF_KPROBE(do_mov_general_2224)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x114")
int BPF_KPROBE(do_mov_general_2225)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x11c")
int BPF_KPROBE(do_mov_general_2226)
{
    u64 addr = ctx->r11 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x120")
int BPF_KPROBE(do_mov_general_2227)
{
    u64 addr = ctx->r10;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x131")
int BPF_KPROBE(do_mov_general_2228)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x134")
int BPF_KPROBE(do_mov_general_2229)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x14f")
int BPF_KPROBE(do_mov_general_2230)
{
    u64 addr = ctx->si + 0x784;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x186")
int BPF_KPROBE(do_mov_general_2231)
{
    u64 addr = ctx->ax + 0xc80;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x196")
int BPF_KPROBE(do_mov_general_2232)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x199")
int BPF_KPROBE(do_mov_general_2233)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x19d")
int BPF_KPROBE(do_mov_general_2234)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x1a1")
int BPF_KPROBE(do_mov_general_2235)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x1bb")
int BPF_KPROBE(do_mov_general_2236)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x1db")
int BPF_KPROBE(do_mov_general_2237)
{
    u64 addr = ctx->ax + 0xc80;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x1eb")
int BPF_KPROBE(do_mov_general_2238)
{
    u64 addr = ctx->ax + 0xc82;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x242")
int BPF_KPROBE(do_mov_general_2239)
{
    u64 addr = ctx->ax + 0xc82;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x260")
int BPF_KPROBE(do_mov_general_2240)
{
    u64 addr = ctx->ax + 0xc82;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_enqueue+0x26d")
int BPF_KPROBE(do_mov_general_2241)
{
    u64 addr = ctx->ax + 0xc80;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_dump_class_stats+0x29")
int BPF_KPROBE(do_switch_3253)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/skbprio_dump_class_stats+0x2e")
int BPF_KPROBE(do_switch_3254)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/skbprio_walk+0x2f")
int BPF_KPROBE(do_mov_general_2242)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_walk+0x4d")
int BPF_KPROBE(do_mov_general_2243)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_destroy+0x2a")
int BPF_KPROBE(do_mov_general_2244)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_destroy+0x34")
int BPF_KPROBE(do_mov_general_2245)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_destroy+0x3b")
int BPF_KPROBE(do_mov_general_2246)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_destroy+0x43")
int BPF_KPROBE(do_mov_general_2247)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_destroy+0x47")
int BPF_KPROBE(do_mov_general_2248)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_reset+0x2c")
int BPF_KPROBE(do_mov_general_2249)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_reset+0x36")
int BPF_KPROBE(do_mov_general_2250)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_reset+0x3d")
int BPF_KPROBE(do_mov_general_2251)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_reset+0x45")
int BPF_KPROBE(do_mov_general_2252)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_reset+0x49")
int BPF_KPROBE(do_mov_general_2253)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_reset+0x73")
int BPF_KPROBE(do_mov_general_2254)
{
    u64 addr = ctx->r13 + 0x780;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_reset+0x7e")
int BPF_KPROBE(do_mov_general_2255)
{
    u64 addr = ctx->r13 + 0xc78;
    check(addr);
    return 0;
}


SEC("kprobe/skbprio_reset+0x9c")
int BPF_KPROBE(do_mov_general_2256)
{
    u64 addr = ctx->r13 + 0xc80;
    check(addr);
    return 0;
}


SEC("kprobe/choke_dump_stats+0x62")
int BPF_KPROBE(do_switch_3258)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_dump_stats+0x67")
int BPF_KPROBE(do_switch_3259)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_reset+0x1e")
int BPF_KPROBE(do_mov_general_2257)
{
    u64 addr = ctx->bx + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_reset+0x2c")
int BPF_KPROBE(do_switch_3262)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_reset+0x31")
int BPF_KPROBE(do_switch_3263)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_reset+0x6b")
int BPF_KPROBE(do_mov_general_2258)
{
    u64 addr = ctx->bx + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_reset+0x76")
int BPF_KPROBE(do_mov_general_2259)
{
    u64 addr = ctx->bx + 0x2c0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_reset+0x81")
int BPF_KPROBE(do_mov_general_2260)
{
    u64 addr = ctx->bx + 0x2b8;
    check(addr);
    return 0;
}


SEC("kprobe/choke_reset+0x8c")
int BPF_KPROBE(do_mov_general_2261)
{
    u64 addr = ctx->bx + 0x2b0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_dump+0xe4")
int BPF_KPROBE(do_mov_general_2262)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x2e")
int BPF_KPROBE(do_mov_general_2263)
{
    u64 addr = ctx->di + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x5f")
int BPF_KPROBE(do_mov_general_2264)
{
    u64 addr = ctx->si + 0x2b8;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x75")
int BPF_KPROBE(do_mov_general_2265)
{
    u64 addr = ctx->bx + 0x2b0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x9b")
int BPF_KPROBE(do_mov_general_2266)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0xa4")
int BPF_KPROBE(do_mov_general_2267)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x145")
int BPF_KPROBE(do_mov_general_2268)
{
    u64 addr = ctx->bx + 0x2b8;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x15b")
int BPF_KPROBE(do_mov_general_2269)
{
    u64 addr = ctx->bx + 0x2c0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x1f9")
int BPF_KPROBE(do_mov_general_2270)
{
    u64 addr = ctx->ax + ctx->dx * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x213")
int BPF_KPROBE(do_mov_general_2271)
{
    u64 addr = ctx->bx + 0x2e4;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x268")
int BPF_KPROBE(do_mov_general_2272)
{
    u64 addr = ctx->bx + 0x2b0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x2a7")
int BPF_KPROBE(do_mov_general_2273)
{
    u64 addr = ctx->bx + 0x2b0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x2de")
int BPF_KPROBE(do_mov_general_2274)
{
    u64 addr = ctx->bx + 0x2b0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x31a")
int BPF_KPROBE(do_mov_general_2275)
{
    u64 addr = ctx->bx + 0x2b4;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x3a7")
int BPF_KPROBE(do_mov_general_2276)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x3e8")
int BPF_KPROBE(do_mov_general_2277)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x3ec")
int BPF_KPROBE(do_mov_general_2278)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x424")
int BPF_KPROBE(do_mov_general_2279)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x42d")
int BPF_KPROBE(do_mov_general_2280)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x467")
int BPF_KPROBE(do_mov_general_2281)
{
    u64 addr = ctx->bx + 0x2b4;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x483")
int BPF_KPROBE(do_mov_general_2282)
{
    u64 addr = ctx->r12 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x4ab")
int BPF_KPROBE(do_switch_3277)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_enqueue+0x4b0")
int BPF_KPROBE(do_switch_3278)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_enqueue+0x4be")
int BPF_KPROBE(do_switch_3279)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_enqueue+0x4c3")
int BPF_KPROBE(do_switch_3280)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_enqueue+0x4de")
int BPF_KPROBE(do_mov_general_2283)
{
    u64 addr = ctx->si + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x507")
int BPF_KPROBE(do_switch_3281)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_enqueue+0x50c")
int BPF_KPROBE(do_switch_3282)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_enqueue+0x516")
int BPF_KPROBE(do_switch_3283)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_enqueue+0x51b")
int BPF_KPROBE(do_switch_3284)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_enqueue+0x55e")
int BPF_KPROBE(do_mov_general_2284)
{
    u64 addr = ctx->bx + 0x2e4;
    check(addr);
    return 0;
}


SEC("kprobe/choke_enqueue+0x597")
int BPF_KPROBE(do_mov_general_2285)
{
    u64 addr = ctx->bx + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_dequeue+0x2f")
int BPF_KPROBE(do_mov_general_2286)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/choke_dequeue+0x5f")
int BPF_KPROBE(do_mov_general_2287)
{
    u64 addr = ctx->bx + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_dequeue+0xca")
int BPF_KPROBE(do_mov_general_2288)
{
    u64 addr = ctx->bx + 0x2c0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x158")
int BPF_KPROBE(do_switch_3288)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_change+0x15d")
int BPF_KPROBE(do_switch_3289)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_change+0x1ce")
int BPF_KPROBE(do_mov_general_2289)
{
    u64 addr = ctx->r15 + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x1ee")
int BPF_KPROBE(do_mov_general_2290)
{
    u64 addr = ctx->r10 + ctx->cx * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x204")
int BPF_KPROBE(do_mov_general_2291)
{
    u64 addr = ctx->r15 + 0x2e4;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x20b")
int BPF_KPROBE(do_mov_general_2292)
{
    u64 addr = ctx->r15 + 0x2e0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x21a")
int BPF_KPROBE(do_mov_general_2293)
{
    u64 addr = ctx->r15 + 0x2e8;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x221")
int BPF_KPROBE(do_mov_general_2294)
{
    u64 addr = ctx->r15 + 0x2f0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x234")
int BPF_KPROBE(do_mov_general_2295)
{
    u64 addr = ctx->r15 + 0x184;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x23f")
int BPF_KPROBE(do_mov_general_2296)
{
    u64 addr = ctx->r15 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x25d")
int BPF_KPROBE(do_mov_general_2297)
{
    u64 addr = ctx->r15 + 0x1ad;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x267")
int BPF_KPROBE(do_mov_general_2298)
{
    u64 addr = ctx->r15 + 0x1ae;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x270")
int BPF_KPROBE(do_mov_general_2299)
{
    u64 addr = ctx->r15 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x282")
int BPF_KPROBE(do_mov_general_2300)
{
    u64 addr = ctx->r15 + 0x18c;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x292")
int BPF_KPROBE(do_mov_general_2301)
{
    u64 addr = ctx->r15 + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x2b5")
int BPF_KPROBE(do_mov_general_2302)
{
    u64 addr = ctx->r15 + 0x194;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x2df")
int BPF_KPROBE(do_mov_general_2303)
{
    u64 addr = ctx->r8 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x2ec")
int BPF_KPROBE(do_mov_general_2304)
{
    u64 addr = ctx->r15 + 0x1ac;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x2fe")
int BPF_KPROBE(do_mov_general_2305)
{
    u64 addr = ctx->r15 + 0x1a4;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x30c")
int BPF_KPROBE(do_mov_general_2306)
{
    u64 addr = ctx->r15 + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x313")
int BPF_KPROBE(do_mov_general_2307)
{
    u64 addr = ctx->r15 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x33c")
int BPF_KPROBE(do_mov_general_2308)
{
    u64 addr = ctx->r15 + 0x1af;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x359")
int BPF_KPROBE(do_mov_general_2309)
{
    u64 addr = ctx->r15 + 0x2a7;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x360")
int BPF_KPROBE(do_mov_general_2310)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x363")
int BPF_KPROBE(do_mov_general_2311)
{
    u64 addr = ctx->r15 + 0x2b8;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x375")
int BPF_KPROBE(do_mov_general_2312)
{
    u64 addr = ctx->r15 + 0x2b0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x389")
int BPF_KPROBE(do_mov_general_2313)
{
    u64 addr = ctx->r15 + 0x2c0;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x3c8")
int BPF_KPROBE(do_mov_general_2314)
{
    u64 addr = ctx->r15 + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/choke_change+0x3d4")
int BPF_KPROBE(do_switch_3295)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/choke_change+0x3d9")
int BPF_KPROBE(do_switch_3296)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_slot_scan+0x34")
int BPF_KPROBE(do_mov_general_2315)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_slot_scan+0x38")
int BPF_KPROBE(do_mov_general_2316)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x5e")
int BPF_KPROBE(do_mov_general_2317)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0xc2")
int BPF_KPROBE(do_mov_general_2318)
{
    u64 addr = ctx->bx + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0xc6")
int BPF_KPROBE(do_mov_general_2319)
{
    u64 addr = ctx->bx + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0xca")
int BPF_KPROBE(do_mov_general_2320)
{
    u64 addr = ctx->bx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0xce")
int BPF_KPROBE(do_mov_general_2321)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x10b")
int BPF_KPROBE(do_mov_general_2322)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x158")
int BPF_KPROBE(do_mov_general_2323)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x160")
int BPF_KPROBE(do_mov_general_2324)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x16e")
int BPF_KPROBE(do_mov_general_2325)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x175")
int BPF_KPROBE(do_mov_general_2326)
{
    u64 addr = ctx->r14 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x1dc")
int BPF_KPROBE(do_mov_general_2327)
{
    u64 addr = ctx->r15 + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x1e6")
int BPF_KPROBE(do_mov_general_2328)
{
    u64 addr = ctx->r15 + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x252")
int BPF_KPROBE(do_mov_general_2329)
{
    u64 addr = ctx->bx + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x261")
int BPF_KPROBE(do_mov_general_2330)
{
    u64 addr = ctx->bx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x265")
int BPF_KPROBE(do_mov_general_2331)
{
    u64 addr = ctx->bx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_choose_next_agg+0x2af")
int BPF_KPROBE(do_mov_general_2332)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_destroy_agg+0x1f")
int BPF_KPROBE(do_mov_general_2333)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_destroy_agg+0x27")
int BPF_KPROBE(do_mov_general_2334)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_destroy_agg+0x2b")
int BPF_KPROBE(do_mov_general_2335)
{
    u64 addr = ctx->r12 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_destroy_agg+0x34")
int BPF_KPROBE(do_mov_general_2336)
{
    u64 addr = ctx->r12 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_destroy_agg+0x45")
int BPF_KPROBE(do_mov_general_2337)
{
    u64 addr = ctx->bx + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_destroy_agg+0x53")
int BPF_KPROBE(do_mov_general_2338)
{
    u64 addr = ctx->bx + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_destroy_agg+0x74")
int BPF_KPROBE(do_mov_general_2339)
{
    u64 addr = ctx->bx + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0x54")
int BPF_KPROBE(do_mov_general_2340)
{
    u64 addr = ctx->bx + 0x34;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0x5d")
int BPF_KPROBE(do_mov_general_2341)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0x7e")
int BPF_KPROBE(do_mov_general_2342)
{
    u64 addr = ctx->r13 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0x82")
int BPF_KPROBE(do_mov_general_2343)
{
    u64 addr = ctx->r13 + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0x86")
int BPF_KPROBE(do_mov_general_2344)
{
    u64 addr = ctx->bx + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0xa0")
int BPF_KPROBE(do_mov_general_2345)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0xa8")
int BPF_KPROBE(do_mov_general_2346)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0xac")
int BPF_KPROBE(do_mov_general_2347)
{
    u64 addr = ctx->bx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0xb4")
int BPF_KPROBE(do_mov_general_2348)
{
    u64 addr = ctx->bx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0xcc")
int BPF_KPROBE(do_mov_general_2349)
{
    u64 addr = ctx->bx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0xd5")
int BPF_KPROBE(do_mov_general_2350)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0xe0")
int BPF_KPROBE(do_mov_general_2351)
{
    u64 addr = ctx->r13 + 0x1d58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0xe7")
int BPF_KPROBE(do_mov_general_2352)
{
    u64 addr = ctx->bx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_update_agg+0x148")
int BPF_KPROBE(do_mov_general_2353)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_schedule_agg+0x5a")
int BPF_KPROBE(do_mov_general_2354)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_schedule_agg+0x64")
int BPF_KPROBE(do_mov_general_2355)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_schedule_agg+0x7c")
int BPF_KPROBE(do_mov_general_2356)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_schedule_agg+0x8b")
int BPF_KPROBE(do_mov_general_2357)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_schedule_agg+0xd6")
int BPF_KPROBE(do_mov_general_2358)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_schedule_agg+0xdf")
int BPF_KPROBE(do_mov_general_2359)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_schedule_agg+0xe3")
int BPF_KPROBE(do_mov_general_2360)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_schedule_agg+0xe6")
int BPF_KPROBE(do_mov_general_2361)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_schedule_agg+0x123")
int BPF_KPROBE(do_mov_general_2362)
{
    u64 addr = ctx->di + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_walk+0x56")
int BPF_KPROBE(do_mov_general_2363)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_walk+0x83")
int BPF_KPROBE(do_mov_general_2364)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_init_qdisc+0x7b")
int BPF_KPROBE(do_mov_general_2365)
{
    u64 addr = ctx->bx + 0x1ed0;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_init_qdisc+0x84")
int BPF_KPROBE(do_mov_general_2366)
{
    u64 addr = ctx->bx + 0x1ed4;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_init_qdisc+0x99")
int BPF_KPROBE(do_mov_general_2367)
{
    u64 addr = ctx->dx - 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_init_qdisc+0x9f")
int BPF_KPROBE(do_mov_general_2368)
{
    u64 addr = ctx->dx - 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_init_qdisc+0xb3")
int BPF_KPROBE(do_mov_general_2369)
{
    u64 addr = ctx->dx - 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_init_qdisc+0xc1")
int BPF_KPROBE(do_mov_general_2370)
{
    u64 addr = ctx->dx - 0x128;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_init_qdisc+0xd7")
int BPF_KPROBE(do_mov_general_2371)
{
    u64 addr = ctx->bx + 0x1ed8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x24")
int BPF_KPROBE(do_mov_general_2372)
{
    u64 addr = ctx->ax + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x48")
int BPF_KPROBE(do_mov_general_2373)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x55")
int BPF_KPROBE(do_mov_general_2374)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x63")
int BPF_KPROBE(do_mov_general_2375)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x6a")
int BPF_KPROBE(do_mov_general_2376)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x134")
int BPF_KPROBE(do_mov_general_2377)
{
    u64 addr = ctx->r12 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x144")
int BPF_KPROBE(do_mov_general_2378)
{
    u64 addr = ctx->r12 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x149")
int BPF_KPROBE(do_mov_general_2379)
{
    u64 addr = ctx->r12 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x1bc")
int BPF_KPROBE(do_mov_general_2380)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x1cb")
int BPF_KPROBE(do_mov_general_2381)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x200")
int BPF_KPROBE(do_mov_general_2382)
{
    u64 addr = ctx->ax + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_deactivate_agg+0x20a")
int BPF_KPROBE(do_mov_general_2383)
{
    u64 addr = ctx->r12 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_activate_agg.constprop.0+0x13")
int BPF_KPROBE(do_mov_general_2384)
{
    u64 addr = ctx->si + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_activate_agg.constprop.0+0x22")
int BPF_KPROBE(do_mov_general_2385)
{
    u64 addr = ctx->si + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_activate_agg.constprop.0+0x6b")
int BPF_KPROBE(do_mov_general_2386)
{
    u64 addr = ctx->si + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_activate_agg.constprop.0+0x76")
int BPF_KPROBE(do_mov_general_2387)
{
    u64 addr = ctx->si + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_activate_agg.constprop.0+0xc6")
int BPF_KPROBE(do_mov_general_2388)
{
    u64 addr = ctx->di + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_activate_agg.constprop.0+0xd2")
int BPF_KPROBE(do_mov_general_2389)
{
    u64 addr = ctx->di + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_activate_agg.constprop.0+0xd6")
int BPF_KPROBE(do_mov_general_2390)
{
    u64 addr = ctx->di + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_add_to_agg+0x17")
int BPF_KPROBE(do_mov_general_2391)
{
    u64 addr = ctx->dx + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_add_to_agg+0x42")
int BPF_KPROBE(do_mov_general_2392)
{
    u64 addr = ctx->r12 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_add_to_agg+0x47")
int BPF_KPROBE(do_mov_general_2393)
{
    u64 addr = ctx->bx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_add_to_agg+0x4b")
int BPF_KPROBE(do_mov_general_2394)
{
    u64 addr = ctx->bx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_add_to_agg+0x4f")
int BPF_KPROBE(do_mov_general_2395)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dump_class+0x2a")
int BPF_KPROBE(do_mov_general_2396)
{
    u64 addr = ctx->cx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dump_class+0x33")
int BPF_KPROBE(do_mov_general_2397)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dump_class+0x42")
int BPF_KPROBE(do_mov_general_2398)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dump_class+0xc4")
int BPF_KPROBE(do_mov_general_2399)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dump_class_stats+0x3f")
int BPF_KPROBE(do_switch_3329)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_dump_class_stats+0x44")
int BPF_KPROBE(do_switch_3330)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_dump_class_stats+0x53")
int BPF_KPROBE(do_switch_3331)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_dump_class_stats+0x58")
int BPF_KPROBE(do_switch_3332)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_dump_class_stats+0x89")
int BPF_KPROBE(do_switch_3333)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_dump_class_stats+0x8e")
int BPF_KPROBE(do_switch_3334)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_dump_class_stats+0x9e")
int BPF_KPROBE(do_switch_3335)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_dump_class_stats+0xa3")
int BPF_KPROBE(do_switch_3336)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_destroy_qdisc+0x65")
int BPF_KPROBE(do_switch_3341)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_destroy_qdisc+0x6a")
int BPF_KPROBE(do_switch_3342)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_destroy_qdisc+0x94")
int BPF_KPROBE(do_mov_general_2400)
{
    u64 addr = ctx->r12 + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_reset_qdisc+0x8d")
int BPF_KPROBE(do_mov_general_2401)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_reset_qdisc+0x91")
int BPF_KPROBE(do_mov_general_2402)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_reset_qdisc+0x98")
int BPF_KPROBE(do_mov_general_2403)
{
    u64 addr = ctx->r15 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_reset_qdisc+0x9c")
int BPF_KPROBE(do_mov_general_2404)
{
    u64 addr = ctx->r15 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_qlen_notify+0x11")
int BPF_KPROBE(do_mov_general_2405)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_qlen_notify+0x15")
int BPF_KPROBE(do_mov_general_2406)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_qlen_notify+0x22")
int BPF_KPROBE(do_mov_general_2407)
{
    u64 addr = ctx->si + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_qlen_notify+0x2a")
int BPF_KPROBE(do_mov_general_2408)
{
    u64 addr = ctx->si + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0xea")
int BPF_KPROBE(do_mov_general_2409)
{
    u64 addr = ctx->ax + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0xf7")
int BPF_KPROBE(do_mov_general_2410)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0xfe")
int BPF_KPROBE(do_mov_general_2411)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x106")
int BPF_KPROBE(do_mov_general_2412)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x10a")
int BPF_KPROBE(do_mov_general_2413)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x15f")
int BPF_KPROBE(do_mov_general_2414)
{
    u64 addr = ctx->r12 + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x166")
int BPF_KPROBE(do_mov_general_2415)
{
    u64 addr = ctx->r12 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x178")
int BPF_KPROBE(do_mov_general_2416)
{
    u64 addr = ctx->r12 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x186")
int BPF_KPROBE(do_mov_general_2417)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x194")
int BPF_KPROBE(do_mov_general_2418)
{
    u64 addr = ctx->r12 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x1a6")
int BPF_KPROBE(do_mov_general_2419)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x1e2")
int BPF_KPROBE(do_mov_general_2420)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x203")
int BPF_KPROBE(do_mov_general_2421)
{
    u64 addr = ctx->r13 + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x219")
int BPF_KPROBE(do_mov_general_2422)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x21d")
int BPF_KPROBE(do_mov_general_2423)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x22a")
int BPF_KPROBE(do_mov_general_2424)
{
    u64 addr = ctx->r13 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x232")
int BPF_KPROBE(do_mov_general_2425)
{
    u64 addr = ctx->r13 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x24b")
int BPF_KPROBE(do_mov_general_2426)
{
    u64 addr = ctx->r12 + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x265")
int BPF_KPROBE(do_mov_general_2427)
{
    u64 addr = ctx->bx + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x2a7")
int BPF_KPROBE(do_mov_general_2428)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x2ab")
int BPF_KPROBE(do_mov_general_2429)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x2b8")
int BPF_KPROBE(do_mov_general_2430)
{
    u64 addr = ctx->r12 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x2bd")
int BPF_KPROBE(do_mov_general_2431)
{
    u64 addr = ctx->r13 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x2c1")
int BPF_KPROBE(do_mov_general_2432)
{
    u64 addr = ctx->r13 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_dequeue+0x2c5")
int BPF_KPROBE(do_mov_general_2433)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_graft_class+0x54")
int BPF_KPROBE(do_mov_general_2434)
{
    u64 addr = ctx->r13 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_graft_class+0x83")
int BPF_KPROBE(do_switch_3360)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_graft_class+0x88")
int BPF_KPROBE(do_switch_3361)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_graft_class+0xd0")
int BPF_KPROBE(do_mov_general_2435)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_delete_class+0x8c")
int BPF_KPROBE(do_switch_3374)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_delete_class+0x91")
int BPF_KPROBE(do_switch_3375)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_delete_class+0xe7")
int BPF_KPROBE(do_mov_general_2436)
{
    u64 addr = ctx->r12 + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_delete_class+0x105")
int BPF_KPROBE(do_switch_3381)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_delete_class+0x10a")
int BPF_KPROBE(do_switch_3382)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x120")
int BPF_KPROBE(do_switch_3393)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x125")
int BPF_KPROBE(do_switch_3394)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x1ad")
int BPF_KPROBE(do_mov_general_2437)
{
    u64 addr = ctx->r13 + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x20f")
int BPF_KPROBE(do_mov_general_2438)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x25d")
int BPF_KPROBE(do_switch_3401)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x25d")
int BPF_KPROBE(do_hotbpf_3401)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/qfq_change_class+0x262")
int BPF_KPROBE(do_switch_3402)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x279")
int BPF_KPROBE(do_switch_3403)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x27e")
int BPF_KPROBE(do_switch_3404)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x281")
int BPF_KPROBE(do_mov_general_2439)
{
    u64 addr = ctx->r13 + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x293")
int BPF_KPROBE(do_mov_general_2440)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x2b0")
int BPF_KPROBE(do_mov_general_2441)
{
    u64 addr = ctx->r13 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x2ca")
int BPF_KPROBE(do_switch_3406)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x2cf")
int BPF_KPROBE(do_switch_3407)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x374")
int BPF_KPROBE(do_switch_3413)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x374")
int BPF_KPROBE(do_hotbpf_3413)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/qfq_change_class+0x379")
int BPF_KPROBE(do_switch_3414)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x3a6")
int BPF_KPROBE(do_mov_general_2442)
{
    u64 addr = ctx->r14 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x3aa")
int BPF_KPROBE(do_mov_general_2443)
{
    u64 addr = ctx->r14 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x3b6")
int BPF_KPROBE(do_mov_general_2444)
{
    u64 addr = ctx->r14 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x3bf")
int BPF_KPROBE(do_mov_general_2445)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x3cb")
int BPF_KPROBE(do_mov_general_2446)
{
    u64 addr = ctx->r12 + 0x1ed8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x3d3")
int BPF_KPROBE(do_mov_general_2447)
{
    u64 addr = ctx->r14 + 0x2c;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x3d7")
int BPF_KPROBE(do_mov_general_2448)
{
    u64 addr = ctx->r14 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x3db")
int BPF_KPROBE(do_mov_general_2449)
{
    u64 addr = ctx->r14 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x43c")
int BPF_KPROBE(do_mov_general_2450)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x440")
int BPF_KPROBE(do_mov_general_2451)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x44d")
int BPF_KPROBE(do_mov_general_2452)
{
    u64 addr = ctx->r13 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x455")
int BPF_KPROBE(do_mov_general_2453)
{
    u64 addr = ctx->r13 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x477")
int BPF_KPROBE(do_mov_general_2454)
{
    u64 addr = ctx->r13 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_change_class+0x4f2")
int BPF_KPROBE(do_switch_3422)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_change_class+0x4f7")
int BPF_KPROBE(do_switch_3423)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x19d")
int BPF_KPROBE(do_mov_general_2455)
{
    u64 addr = ctx->r9 + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x1a6")
int BPF_KPROBE(do_mov_general_2456)
{
    u64 addr = ctx->r12 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x1ab")
int BPF_KPROBE(do_mov_general_2457)
{
    u64 addr = ctx->r9 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x1af")
int BPF_KPROBE(do_mov_general_2458)
{
    u64 addr = ctx->r9 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x1b3")
int BPF_KPROBE(do_mov_general_2459)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x282")
int BPF_KPROBE(do_mov_general_2460)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x286")
int BPF_KPROBE(do_mov_general_2461)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x28e")
int BPF_KPROBE(do_mov_general_2462)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x293")
int BPF_KPROBE(do_mov_general_2463)
{
    u64 addr = ctx->r9 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x297")
int BPF_KPROBE(do_mov_general_2464)
{
    u64 addr = ctx->r9 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x29b")
int BPF_KPROBE(do_mov_general_2465)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x2b2")
int BPF_KPROBE(do_mov_general_2466)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x2b5")
int BPF_KPROBE(do_mov_general_2467)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x39a")
int BPF_KPROBE(do_mov_general_2468)
{
    u64 addr = ctx->r9 + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x476")
int BPF_KPROBE(do_mov_general_2469)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x47a")
int BPF_KPROBE(do_mov_general_2470)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x481")
int BPF_KPROBE(do_mov_general_2471)
{
    u64 addr = ctx->r9 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x489")
int BPF_KPROBE(do_mov_general_2472)
{
    u64 addr = ctx->r9 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x4b9")
int BPF_KPROBE(do_switch_3441)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x4b9")
int BPF_KPROBE(do_hotbpf_3441)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/qfq_enqueue+0x4be")
int BPF_KPROBE(do_switch_3442)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x4d0")
int BPF_KPROBE(do_mov_general_2473)
{
    u64 addr = ctx->ax + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x4d4")
int BPF_KPROBE(do_mov_general_2474)
{
    u64 addr = ctx->ax + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x4df")
int BPF_KPROBE(do_mov_general_2475)
{
    u64 addr = ctx->ax + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x4e8")
int BPF_KPROBE(do_mov_general_2476)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x4f3")
int BPF_KPROBE(do_mov_general_2477)
{
    u64 addr = ctx->r15 + 0x1ed8;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x4fa")
int BPF_KPROBE(do_mov_general_2478)
{
    u64 addr = ctx->ax + 0x2c;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x4fd")
int BPF_KPROBE(do_mov_general_2479)
{
    u64 addr = ctx->ax + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x501")
int BPF_KPROBE(do_mov_general_2480)
{
    u64 addr = ctx->ax + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x51d")
int BPF_KPROBE(do_mov_general_2481)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/qfq_enqueue+0x520")
int BPF_KPROBE(do_mov_general_2482)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/codel_dump_stats+0x97")
int BPF_KPROBE(do_switch_3445)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/codel_dump_stats+0x9c")
int BPF_KPROBE(do_switch_3446)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/codel_qdisc_enqueue+0x26")
int BPF_KPROBE(do_mov_general_2483)
{
    u64 addr = ctx->r12 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_enqueue+0x37")
int BPF_KPROBE(do_mov_general_2484)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_enqueue+0x3f")
int BPF_KPROBE(do_mov_general_2485)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_enqueue+0x42")
int BPF_KPROBE(do_mov_general_2486)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_enqueue+0x62")
int BPF_KPROBE(do_mov_general_2487)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_enqueue+0x69")
int BPF_KPROBE(do_mov_general_2488)
{
    u64 addr = ctx->bx + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_enqueue+0x7f")
int BPF_KPROBE(do_mov_general_2489)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_enqueue+0x88")
int BPF_KPROBE(do_mov_general_2490)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/codel_vars_init+0x6")
int BPF_KPROBE(do_mov_general_2491)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/codel_vars_init+0xd")
int BPF_KPROBE(do_mov_general_2492)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/codel_vars_init+0x18")
int BPF_KPROBE(do_mov_general_2493)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/codel_reset+0x40")
int BPF_KPROBE(do_switch_3452)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/codel_reset+0x45")
int BPF_KPROBE(do_switch_3453)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/codel_reset+0x45")
int BPF_KPROBE(do_mov_general_2494)
{
    u64 addr = ctx->bx + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/codel_reset+0x50")
int BPF_KPROBE(do_mov_general_2495)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_reset+0x5b")
int BPF_KPROBE(do_mov_general_2496)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/codel_dump+0x136")
int BPF_KPROBE(do_mov_general_2497)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/codel_change+0x94")
int BPF_KPROBE(do_mov_general_2498)
{
    u64 addr = ctx->bx + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/codel_change+0xb1")
int BPF_KPROBE(do_mov_general_2499)
{
    u64 addr = ctx->bx + 0x184;
    check(addr);
    return 0;
}


SEC("kprobe/codel_change+0xce")
int BPF_KPROBE(do_mov_general_2500)
{
    u64 addr = ctx->bx + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/codel_change+0xe4")
int BPF_KPROBE(do_mov_general_2501)
{
    u64 addr = ctx->bx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/codel_change+0x114")
int BPF_KPROBE(do_mov_general_2502)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/codel_change+0x12a")
int BPF_KPROBE(do_switch_3466)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/codel_change+0x12f")
int BPF_KPROBE(do_switch_3467)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/codel_change+0x153")
int BPF_KPROBE(do_mov_general_2503)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/codel_change+0x159")
int BPF_KPROBE(do_mov_general_2504)
{
    u64 addr = ctx->bx + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/codel_change+0x165")
int BPF_KPROBE(do_mov_general_2505)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_init+0x2a")
int BPF_KPROBE(do_mov_general_2506)
{
    u64 addr = ctx->di - 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/codel_init+0x2e")
int BPF_KPROBE(do_mov_general_2507)
{
    u64 addr = ctx->di - 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/codel_init+0x38")
int BPF_KPROBE(do_mov_general_2508)
{
    u64 addr = ctx->di - 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/codel_init+0x3f")
int BPF_KPROBE(do_mov_general_2509)
{
    u64 addr = ctx->di - 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/codel_init+0x43")
int BPF_KPROBE(do_mov_general_2510)
{
    u64 addr = ctx->di - 0x2;
    check(addr);
    return 0;
}


SEC("kprobe/codel_init+0x50")
int BPF_KPROBE(do_mov_general_2511)
{
    u64 addr = ctx->bx + 0x1ac;
    check(addr);
    return 0;
}


SEC("kprobe/codel_init+0x6a")
int BPF_KPROBE(do_mov_general_2512)
{
    u64 addr = ctx->bx + 0x18c;
    check(addr);
    return 0;
}


SEC("kprobe/codel_init+0x94")
int BPF_KPROBE(do_mov_general_2513)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x43")
int BPF_KPROBE(do_mov_general_2514)
{
    u64 addr = ctx->di + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x53")
int BPF_KPROBE(do_mov_general_2515)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x8d")
int BPF_KPROBE(do_mov_general_2516)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x11d")
int BPF_KPROBE(do_mov_general_2517)
{
    u64 addr = ctx->bx + 0x194;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x144")
int BPF_KPROBE(do_mov_general_2518)
{
    u64 addr = ctx->bx + 0x19e;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x192")
int BPF_KPROBE(do_mov_general_2519)
{
    u64 addr = ctx->bx + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x1a2")
int BPF_KPROBE(do_mov_general_2520)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x1c1")
int BPF_KPROBE(do_mov_general_2521)
{
    u64 addr = ctx->bx + 0xc4;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x1d3")
int BPF_KPROBE(do_mov_general_2522)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x217")
int BPF_KPROBE(do_mov_general_2523)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x21e")
int BPF_KPROBE(do_mov_general_2524)
{
    u64 addr = ctx->bx + 0x19c;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x253")
int BPF_KPROBE(do_mov_general_2525)
{
    u64 addr = ctx->bx + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x26f")
int BPF_KPROBE(do_mov_general_2526)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x27d")
int BPF_KPROBE(do_mov_general_2527)
{
    u64 addr = ctx->bx + 0x19c;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x3a8")
int BPF_KPROBE(do_mov_general_2528)
{
    u64 addr = ctx->di + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x3bf")
int BPF_KPROBE(do_mov_general_2529)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x421")
int BPF_KPROBE(do_mov_general_2530)
{
    u64 addr = ctx->bx + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x431")
int BPF_KPROBE(do_mov_general_2531)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x450")
int BPF_KPROBE(do_mov_general_2532)
{
    u64 addr = ctx->bx + 0xc4;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x462")
int BPF_KPROBE(do_mov_general_2533)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x4b1")
int BPF_KPROBE(do_mov_general_2534)
{
    u64 addr = ctx->bx + 0x19c;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x4e4")
int BPF_KPROBE(do_mov_general_2535)
{
    u64 addr = ctx->bx + 0x194;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x4f2")
int BPF_KPROBE(do_mov_general_2536)
{
    u64 addr = ctx->bx + 0x19e;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x4f9")
int BPF_KPROBE(do_mov_general_2537)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x506")
int BPF_KPROBE(do_mov_general_2538)
{
    u64 addr = ctx->bx + 0x1a4;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x511")
int BPF_KPROBE(do_mov_general_2539)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x560")
int BPF_KPROBE(do_mov_general_2540)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x5a4")
int BPF_KPROBE(do_mov_general_2541)
{
    u64 addr = ctx->bx + 0x1a4;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x5b7")
int BPF_KPROBE(do_mov_general_2542)
{
    u64 addr = ctx->di + 0x19c;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x5c3")
int BPF_KPROBE(do_mov_general_2543)
{
    u64 addr = ctx->bx + 0x1ac;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x5ce")
int BPF_KPROBE(do_mov_general_2544)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x661")
int BPF_KPROBE(do_mov_general_2545)
{
    u64 addr = ctx->bx + 0x1ac;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x6b3")
int BPF_KPROBE(do_mov_general_2546)
{
    u64 addr = ctx->bx + 0x194;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x706")
int BPF_KPROBE(do_mov_general_2547)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x711")
int BPF_KPROBE(do_mov_general_2548)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x721")
int BPF_KPROBE(do_mov_general_2549)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x736")
int BPF_KPROBE(do_mov_general_2550)
{
    u64 addr = ctx->bx + 0x1ac;
    check(addr);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x750")
int BPF_KPROBE(do_switch_3484)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x755")
int BPF_KPROBE(do_switch_3485)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x776")
int BPF_KPROBE(do_switch_3486)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x77b")
int BPF_KPROBE(do_switch_3487)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x7aa")
int BPF_KPROBE(do_switch_3488)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/codel_qdisc_dequeue+0x7af")
int BPF_KPROBE(do_switch_3489)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/dequeue_func+0x19")
int BPF_KPROBE(do_mov_general_2551)
{
    u64 addr = ctx->di - 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/dequeue_func+0x20")
int BPF_KPROBE(do_mov_general_2552)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/codel_vars_init+0x6")
int BPF_KPROBE(do_mov_general_2553)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/codel_vars_init+0xd")
int BPF_KPROBE(do_mov_general_2554)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/codel_vars_init+0x18")
int BPF_KPROBE(do_mov_general_2555)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_reset+0x18")
int BPF_KPROBE(do_mov_slab_2556)
{
    u64 addr = ctx->di + 0x1e8;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == 0xffff888100043500) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/fq_codel_reset+0x1f")
int BPF_KPROBE(do_mov_general_2557)
{
    u64 addr = ctx->di + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_reset+0x2d")
int BPF_KPROBE(do_mov_general_2558)
{
    u64 addr = ctx->di + 0x1f8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_reset+0x34")
int BPF_KPROBE(do_mov_slab_2559)
{
    u64 addr = ctx->di + 0x200;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == 0xffff888100043500) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/fq_codel_reset+0x61")
int BPF_KPROBE(do_switch_3493)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_reset+0x66")
int BPF_KPROBE(do_switch_3494)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_reset+0x6a")
int BPF_KPROBE(do_mov_general_2560)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_reset+0x75")
int BPF_KPROBE(do_mov_general_2561)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_reset+0x79")
int BPF_KPROBE(do_mov_general_2562)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_reset+0xa3")
int BPF_KPROBE(do_mov_general_2563)
{
    u64 addr = ctx->r13 + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_walk+0x30")
int BPF_KPROBE(do_mov_general_2564)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_walk+0x78")
int BPF_KPROBE(do_mov_general_2565)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dump+0x1e5")
int BPF_KPROBE(do_mov_slab_2566)
{
    u64 addr = ctx->r13;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x90")
int BPF_KPROBE(do_mov_general_2567)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x94")
int BPF_KPROBE(do_mov_general_2568)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0xf3")
int BPF_KPROBE(do_mov_general_2569)
{
    u64 addr = ctx->r13 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x114")
int BPF_KPROBE(do_mov_general_2570)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x117")
int BPF_KPROBE(do_mov_general_2571)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x11f")
int BPF_KPROBE(do_mov_general_2572)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x157")
int BPF_KPROBE(do_mov_general_2573)
{
    u64 addr = ctx->r13 + 0x34;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x176")
int BPF_KPROBE(do_mov_general_2574)
{
    u64 addr = ctx->r12 + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x182")
int BPF_KPROBE(do_mov_general_2575)
{
    u64 addr = ctx->r12 + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x229")
int BPF_KPROBE(do_mov_general_2576)
{
    u64 addr = ctx->r8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x230")
int BPF_KPROBE(do_mov_general_2577)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x240")
int BPF_KPROBE(do_mov_general_2578)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x249")
int BPF_KPROBE(do_mov_general_2579)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x285")
int BPF_KPROBE(do_mov_general_2580)
{
    u64 addr = ctx->r12 + 0xc4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x2a9")
int BPF_KPROBE(do_mov_general_2581)
{
    u64 addr = ctx->r12 + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x33a")
int BPF_KPROBE(do_mov_general_2582)
{
    u64 addr = ctx->r12 + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x342")
int BPF_KPROBE(do_mov_general_2583)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x346")
int BPF_KPROBE(do_mov_general_2584)
{
    u64 addr = ctx->ax + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x34a")
int BPF_KPROBE(do_mov_general_2585)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x35e")
int BPF_KPROBE(do_mov_general_2586)
{
    u64 addr = ctx->ax + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x366")
int BPF_KPROBE(do_mov_general_2587)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x371")
int BPF_KPROBE(do_switch_3514)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_enqueue+0x376")
int BPF_KPROBE(do_switch_3515)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dump_class_stats+0x5a")
int BPF_KPROBE(do_switch_3518)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dump_class_stats+0x5f")
int BPF_KPROBE(do_switch_3519)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dump_class_stats+0x192")
int BPF_KPROBE(do_switch_3522)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dump_class_stats+0x197")
int BPF_KPROBE(do_switch_3523)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dump_stats+0x10d")
int BPF_KPROBE(do_switch_3535)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dump_stats+0x112")
int BPF_KPROBE(do_switch_3536)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x9f")
int BPF_KPROBE(do_mov_general_2588)
{
    u64 addr = ctx->r13 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0xf4")
int BPF_KPROBE(do_mov_general_2589)
{
    u64 addr = ctx->r14 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0xfc")
int BPF_KPROBE(do_mov_general_2590)
{
    u64 addr = ctx->r14 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x20d")
int BPF_KPROBE(do_mov_general_2591)
{
    u64 addr = ctx->r13 + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x224")
int BPF_KPROBE(do_mov_general_2592)
{
    u64 addr = ctx->r13 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x230")
int BPF_KPROBE(do_mov_general_2593)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x234")
int BPF_KPROBE(do_mov_general_2594)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x23e")
int BPF_KPROBE(do_mov_general_2595)
{
    u64 addr = ctx->bx + 0x200;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x245")
int BPF_KPROBE(do_mov_general_2596)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x249")
int BPF_KPROBE(do_mov_general_2597)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x24d")
int BPF_KPROBE(do_mov_general_2598)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x29d")
int BPF_KPROBE(do_mov_general_2599)
{
    u64 addr = ctx->r14 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x2f0")
int BPF_KPROBE(do_mov_general_2600)
{
    u64 addr = ctx->r13 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x303")
int BPF_KPROBE(do_mov_general_2601)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x307")
int BPF_KPROBE(do_mov_general_2602)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x30a")
int BPF_KPROBE(do_mov_general_2603)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x30e")
int BPF_KPROBE(do_mov_general_2604)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x327")
int BPF_KPROBE(do_mov_general_2605)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x32b")
int BPF_KPROBE(do_mov_general_2606)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x335")
int BPF_KPROBE(do_mov_general_2607)
{
    u64 addr = ctx->bx + 0x200;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x33c")
int BPF_KPROBE(do_mov_general_2608)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x340")
int BPF_KPROBE(do_mov_general_2609)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x344")
int BPF_KPROBE(do_mov_general_2610)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x386")
int BPF_KPROBE(do_mov_general_2611)
{
    u64 addr = ctx->r13 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x3ab")
int BPF_KPROBE(do_mov_general_2612)
{
    u64 addr = ctx->r13 + 0x1e;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x3fe")
int BPF_KPROBE(do_mov_general_2613)
{
    u64 addr = ctx->r13 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x447")
int BPF_KPROBE(do_mov_general_2614)
{
    u64 addr = ctx->r13 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x44b")
int BPF_KPROBE(do_mov_general_2615)
{
    u64 addr = ctx->r13 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x4b9")
int BPF_KPROBE(do_mov_general_2616)
{
    u64 addr = ctx->r13 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x4ff")
int BPF_KPROBE(do_mov_general_2617)
{
    u64 addr = ctx->r13 + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x530")
int BPF_KPROBE(do_mov_general_2618)
{
    u64 addr = ctx->r13 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x538")
int BPF_KPROBE(do_mov_general_2619)
{
    u64 addr = ctx->r13 + 0x1e;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x541")
int BPF_KPROBE(do_mov_general_2620)
{
    u64 addr = ctx->r13 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x556")
int BPF_KPROBE(do_mov_general_2621)
{
    u64 addr = ctx->r13 + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x55f")
int BPF_KPROBE(do_mov_general_2622)
{
    u64 addr = ctx->r13 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x5de")
int BPF_KPROBE(do_mov_general_2623)
{
    u64 addr = ctx->r13 + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x5f6")
int BPF_KPROBE(do_mov_general_2624)
{
    u64 addr = ctx->r13 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x603")
int BPF_KPROBE(do_mov_general_2625)
{
    u64 addr = ctx->bx + 0x1c4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x6eb")
int BPF_KPROBE(do_mov_general_2626)
{
    u64 addr = ctx->bx + 0x1c4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x717")
int BPF_KPROBE(do_mov_general_2627)
{
    u64 addr = ctx->r13 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x76c")
int BPF_KPROBE(do_mov_general_2628)
{
    u64 addr = ctx->r13 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x792")
int BPF_KPROBE(do_mov_general_2629)
{
    u64 addr = ctx->bx + 0x1c4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x7af")
int BPF_KPROBE(do_switch_3552)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x7b4")
int BPF_KPROBE(do_switch_3553)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x7d6")
int BPF_KPROBE(do_switch_3554)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x7db")
int BPF_KPROBE(do_switch_3555)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x814")
int BPF_KPROBE(do_switch_3556)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_dequeue+0x819")
int BPF_KPROBE(do_switch_3557)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_change+0x6e")
int BPF_KPROBE(do_mov_general_2630)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_change+0xec")
int BPF_KPROBE(do_mov_general_2631)
{
    u64 addr = ctx->bx + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_change+0x109")
int BPF_KPROBE(do_mov_general_2632)
{
    u64 addr = ctx->bx + 0x1b4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_change+0x11c")
int BPF_KPROBE(do_mov_general_2633)
{
    u64 addr = ctx->bx + 0x1c1;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_change+0x12f")
int BPF_KPROBE(do_mov_general_2634)
{
    u64 addr = ctx->bx + 0x1c2;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_change+0x14c")
int BPF_KPROBE(do_mov_general_2635)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_change+0x162")
int BPF_KPROBE(do_mov_general_2636)
{
    u64 addr = ctx->bx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_change+0x17f")
int BPF_KPROBE(do_mov_general_2637)
{
    u64 addr = ctx->bx + 0x1a4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_change+0x19c")
int BPF_KPROBE(do_mov_general_2638)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_change+0x1b8")
int BPF_KPROBE(do_mov_general_2639)
{
    u64 addr = ctx->bx + 0x1ac;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_change+0x1d7")
int BPF_KPROBE(do_switch_3563)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_change+0x1dc")
int BPF_KPROBE(do_switch_3564)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_change+0x210")
int BPF_KPROBE(do_mov_general_2640)
{
    u64 addr = ctx->bx + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_change+0x28c")
int BPF_KPROBE(do_mov_general_2641)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x22")
int BPF_KPROBE(do_mov_slab_2642)
{
    u64 addr = ctx->di + 0x14;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/fq_codel_init+0x29")
int BPF_KPROBE(do_mov_general_2643)
{
    u64 addr = ctx->di + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x33")
int BPF_KPROBE(do_mov_general_2644)
{
    u64 addr = ctx->di + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x4f")
int BPF_KPROBE(do_mov_general_2645)
{
    u64 addr = ctx->di + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x59")
int BPF_KPROBE(do_mov_general_2646)
{
    u64 addr = ctx->di + 0x1a4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x66")
int BPF_KPROBE(do_mov_general_2647)
{
    u64 addr = ctx->di + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x6d")
int BPF_KPROBE(do_mov_general_2648)
{
    u64 addr = ctx->di + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x7b")
int BPF_KPROBE(do_mov_general_2649)
{
    u64 addr = ctx->di + 0x1f8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x82")
int BPF_KPROBE(do_mov_slab_2650)
{
    u64 addr = ctx->di + 0x200;
    u64 cache = bpf_get_slab_cache(addr);
    if (cache == cache8k) {}
    else if (ML_enable) {
        u64 start = bpf_get_slab_start(addr);
        u64 val = 1;
        bpf_map_update_elem(&ml_record, &start, &val, BPF_ANY);
    }
    return 0;
}


SEC("kprobe/fq_codel_init+0x93")
int BPF_KPROBE(do_mov_general_2651)
{
    u64 addr = ctx->di + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x9a")
int BPF_KPROBE(do_mov_general_2652)
{
    u64 addr = ctx->di + 0x1c4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0xa4")
int BPF_KPROBE(do_mov_general_2653)
{
    u64 addr = ctx->di + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0xab")
int BPF_KPROBE(do_mov_general_2654)
{
    u64 addr = ctx->di + 0x1c2;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0xc2")
int BPF_KPROBE(do_mov_general_2655)
{
    u64 addr = ctx->di + 0x1bc;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x113")
int BPF_KPROBE(do_mov_general_2656)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x123")
int BPF_KPROBE(do_mov_general_2657)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x136")
int BPF_KPROBE(do_mov_general_2658)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x15e")
int BPF_KPROBE(do_switch_3575)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_init+0x163")
int BPF_KPROBE(do_switch_3576)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_init+0x163")
int BPF_KPROBE(do_mov_general_2659)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x183")
int BPF_KPROBE(do_switch_3577)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_init+0x188")
int BPF_KPROBE(do_switch_3578)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_codel_init+0x188")
int BPF_KPROBE(do_mov_general_2660)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x1bf")
int BPF_KPROBE(do_mov_general_2661)
{
    u64 addr = ctx->di - 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/fq_codel_init+0x1c3")
int BPF_KPROBE(do_mov_stk_2662)
{
    u64 addr = bpf_get_slab_start(ctx->di - 0xc);
    u64 *pv = bpf_map_lookup_elem(&buddy_objs, &addr);
    if (pv) {}
    else {
        if (ML_enable) {
            u64 val = 1;
            bpf_map_update_elem(&ml_record, &addr, &val, BPF_ANY);
        } else { /* error happens */ }
    }
    return 0;
}


SEC("kprobe/fq_codel_init+0x1ec")
int BPF_KPROBE(do_mov_general_2663)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/cake_get_tcpopt+0x6f")
int BPF_KPROBE(do_mov_general_2664)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_calc_overhead+0x25")
int BPF_KPROBE(do_mov_general_2665)
{
    u64 addr = ctx->di + 0x410c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_calc_overhead+0x37")
int BPF_KPROBE(do_mov_general_2666)
{
    u64 addr = ctx->cx + 0x4110;
    check(addr);
    return 0;
}


SEC("kprobe/cake_calc_overhead+0x6f")
int BPF_KPROBE(do_mov_general_2667)
{
    u64 addr = ctx->cx + 0x410e;
    check(addr);
    return 0;
}


SEC("kprobe/cake_calc_overhead+0x81")
int BPF_KPROBE(do_mov_general_2668)
{
    u64 addr = ctx->cx + 0x4112;
    check(addr);
    return 0;
}


SEC("kprobe/cake_heap_swap+0x40")
int BPF_KPROBE(do_mov_general_2669)
{
    u64 addr = ctx->ax + ctx->di * 0x2 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_heap_swap+0x4c")
int BPF_KPROBE(do_mov_general_2670)
{
    u64 addr = ctx->ax + ctx->si * 0x2 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_heap_swap+0x6d")
int BPF_KPROBE(do_mov_general_2671)
{
    u64 addr = ctx->cx + ctx->si * 0x2 + 0x16000;
    check(addr);
    return 0;
}


SEC("kprobe/cake_heap_swap+0x8d")
int BPF_KPROBE(do_mov_general_2672)
{
    u64 addr = ctx->ax + ctx->dx * 0x2 + 0x16000;
    check(addr);
    return 0;
}


SEC("kprobe/cake_advance_shaper+0x5a")
int BPF_KPROBE(do_mov_general_2673)
{
    u64 addr = ctx->si + 0x19868;
    check(addr);
    return 0;
}


SEC("kprobe/cake_advance_shaper+0x85")
int BPF_KPROBE(do_mov_general_2674)
{
    u64 addr = ctx->si + 0x19868;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue_one+0x3e")
int BPF_KPROBE(do_mov_general_2675)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue_one+0x46")
int BPF_KPROBE(do_mov_general_2676)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/cake_set_rate+0x1e")
int BPF_KPROBE(do_mov_general_2677)
{
    u64 addr = ctx->di + 0x19800;
    check(addr);
    return 0;
}


SEC("kprobe/cake_set_rate+0x29")
int BPF_KPROBE(do_mov_general_2678)
{
    u64 addr = ctx->r9 + 0x19810;
    check(addr);
    return 0;
}


SEC("kprobe/cake_set_rate+0x37")
int BPF_KPROBE(do_mov_general_2679)
{
    u64 addr = ctx->r9 + 0x19870;
    check(addr);
    return 0;
}


SEC("kprobe/cake_set_rate+0x4c")
int BPF_KPROBE(do_mov_general_2680)
{
    u64 addr = ctx->r9 + 0x19878;
    check(addr);
    return 0;
}


SEC("kprobe/cake_set_rate+0x53")
int BPF_KPROBE(do_mov_general_2681)
{
    u64 addr = ctx->r9 + 0x19880;
    check(addr);
    return 0;
}


SEC("kprobe/cake_set_rate+0x5b")
int BPF_KPROBE(do_mov_general_2682)
{
    u64 addr = ctx->r9 + 0x19808;
    check(addr);
    return 0;
}


SEC("kprobe/cake_set_rate+0x62")
int BPF_KPROBE(do_mov_general_2683)
{
    u64 addr = ctx->r9 + 0x19818;
    check(addr);
    return 0;
}


SEC("kprobe/cake_set_rate+0x69")
int BPF_KPROBE(do_mov_general_2684)
{
    u64 addr = ctx->r9 + 0x19820;
    check(addr);
    return 0;
}


SEC("kprobe/cake_set_rate+0xa4")
int BPF_KPROBE(do_mov_general_2685)
{
    u64 addr = ctx->di + 0x19800;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x8d")
int BPF_KPROBE(do_mov_general_2686)
{
    u64 addr = ctx->di + 0x4248;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x98")
int BPF_KPROBE(do_mov_general_2687)
{
    u64 addr = ctx->di + 0x419a;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0xa6")
int BPF_KPROBE(do_mov_general_2688)
{
    u64 addr = ctx->di + 0x4250;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x108")
int BPF_KPROBE(do_mov_general_2689)
{
    u64 addr = ctx->r12 + 0x19882;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x15e")
int BPF_KPROBE(do_mov_general_2690)
{
    u64 addr = ctx->bx + 0x41f0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x166")
int BPF_KPROBE(do_mov_general_2691)
{
    u64 addr = ctx->bx + 0x41f2;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x193")
int BPF_KPROBE(do_mov_general_2692)
{
    u64 addr = ctx->bx + 0x41f2;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x1b2")
int BPF_KPROBE(do_mov_general_2693)
{
    u64 addr = ctx->ax + ctx->r13 * 0x1 + 0x19818;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x1db")
int BPF_KPROBE(do_mov_general_2694)
{
    u64 addr = ctx->bx + 0x41b8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x1eb")
int BPF_KPROBE(do_mov_general_2695)
{
    u64 addr = ctx->bx + 0x41a6;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x235")
int BPF_KPROBE(do_mov_general_2696)
{
    u64 addr = ctx->bx + 0x41e8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x259")
int BPF_KPROBE(do_mov_general_2697)
{
    u64 addr = ctx->bx + 0x41e8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x288")
int BPF_KPROBE(do_mov_general_2698)
{
    u64 addr = ctx->di + 0x419a;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x28f")
int BPF_KPROBE(do_mov_general_2699)
{
    u64 addr = ctx->di + 0x4248;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x29a")
int BPF_KPROBE(do_mov_general_2700)
{
    u64 addr = ctx->di + 0x4250;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x2fc")
int BPF_KPROBE(do_mov_general_2701)
{
    u64 addr = ctx->r12 + 0x19882;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x356")
int BPF_KPROBE(do_mov_general_2702)
{
    u64 addr = ctx->bx + 0x419a;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x360")
int BPF_KPROBE(do_mov_general_2703)
{
    u64 addr = ctx->bx + 0x4248;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x36b")
int BPF_KPROBE(do_mov_general_2704)
{
    u64 addr = ctx->bx + 0x4250;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x3f7")
int BPF_KPROBE(do_mov_general_2705)
{
    u64 addr = ctx->ax + 0x19882;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x405")
int BPF_KPROBE(do_mov_general_2706)
{
    u64 addr = ctx->ax + 0x33152;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x413")
int BPF_KPROBE(do_mov_general_2707)
{
    u64 addr = ctx->ax + 0x4ca22;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x439")
int BPF_KPROBE(do_mov_general_2708)
{
    u64 addr = ctx->di + 0x419a;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x441")
int BPF_KPROBE(do_mov_general_2709)
{
    u64 addr = ctx->di + 0x4248;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x44c")
int BPF_KPROBE(do_mov_general_2710)
{
    u64 addr = ctx->di + 0x4250;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x516")
int BPF_KPROBE(do_mov_general_2711)
{
    u64 addr = ctx->ax + 0x19882;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x525")
int BPF_KPROBE(do_mov_general_2712)
{
    u64 addr = ctx->ax + 0x33152;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x534")
int BPF_KPROBE(do_mov_general_2713)
{
    u64 addr = ctx->ax + 0x4ca22;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x543")
int BPF_KPROBE(do_mov_general_2714)
{
    u64 addr = ctx->ax + 0x662f2;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x566")
int BPF_KPROBE(do_mov_general_2715)
{
    u64 addr = ctx->di + 0x4248;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x571")
int BPF_KPROBE(do_mov_general_2716)
{
    u64 addr = ctx->di + 0x419a;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x57b")
int BPF_KPROBE(do_mov_general_2717)
{
    u64 addr = ctx->di + 0x4250;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reconfigure+0x593")
int BPF_KPROBE(do_mov_general_2718)
{
    u64 addr = ctx->r12 + 0x19882;
    check(addr);
    return 0;
}


SEC("kprobe/cake_walk+0x81")
int BPF_KPROBE(do_mov_general_2719)
{
    u64 addr = ctx->r14 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_walk+0xc4")
int BPF_KPROBE(do_mov_general_2720)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reset+0x1e")
int BPF_KPROBE(do_mov_general_2721)
{
    u64 addr = ctx->bx + 0x41f0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reset+0x26")
int BPF_KPROBE(do_mov_general_2722)
{
    u64 addr = ctx->bx + 0x41f2;
    check(addr);
    return 0;
}


SEC("kprobe/cake_reset+0x53")
int BPF_KPROBE(do_mov_general_2723)
{
    u64 addr = ctx->bx + 0x41f2;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dump+0x334")
int BPF_KPROBE(do_mov_general_2724)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dump_stats+0x629")
int BPF_KPROBE(do_mov_general_2725)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dump_stats+0x65c")
int BPF_KPROBE(do_mov_general_2726)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dump_stats+0x673")
int BPF_KPROBE(do_mov_general_2727)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x6c")
int BPF_KPROBE(do_mov_general_2728)
{
    u64 addr = ctx->bx + 0x419d;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x83")
int BPF_KPROBE(do_mov_general_2729)
{
    u64 addr = ctx->bx + 0x419d;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0xad")
int BPF_KPROBE(do_mov_general_2730)
{
    u64 addr = ctx->bx + 0x41c0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0xc3")
int BPF_KPROBE(do_mov_general_2731)
{
    u64 addr = ctx->bx + 0x419c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0xe7")
int BPF_KPROBE(do_mov_general_2732)
{
    u64 addr = ctx->bx + 0x41c8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x10c")
int BPF_KPROBE(do_mov_general_2733)
{
    u64 addr = ctx->bx + 0x419d;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x121")
int BPF_KPROBE(do_mov_general_2734)
{
    u64 addr = ctx->bx + 0x419f;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x13b")
int BPF_KPROBE(do_mov_general_2735)
{
    u64 addr = ctx->bx + 0x41ca;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x14c")
int BPF_KPROBE(do_mov_general_2736)
{
    u64 addr = ctx->bx + 0x428c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x16c")
int BPF_KPROBE(do_mov_general_2737)
{
    u64 addr = ctx->bx + 0x428c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x17f")
int BPF_KPROBE(do_mov_general_2738)
{
    u64 addr = ctx->bx + 0x41cc;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x19e")
int BPF_KPROBE(do_mov_general_2739)
{
    u64 addr = ctx->bx + 0x41d0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x1bd")
int BPF_KPROBE(do_mov_general_2740)
{
    u64 addr = ctx->bx + 0x41d8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x1e2")
int BPF_KPROBE(do_mov_general_2741)
{
    u64 addr = ctx->bx + 0x41c8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x207")
int BPF_KPROBE(do_mov_general_2742)
{
    u64 addr = ctx->bx + 0x41c8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x21a")
int BPF_KPROBE(do_mov_general_2743)
{
    u64 addr = ctx->bx + 0x419e;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x22c")
int BPF_KPROBE(do_mov_general_2744)
{
    u64 addr = ctx->bx + 0x41ec;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x250")
int BPF_KPROBE(do_mov_general_2745)
{
    u64 addr = ctx->bx + 0x41c8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x265")
int BPF_KPROBE(do_mov_general_2746)
{
    u64 addr = ctx->bx + 0x41a0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x273")
int BPF_KPROBE(do_mov_general_2747)
{
    u64 addr = ctx->bx + 0x41a4;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x302")
int BPF_KPROBE(do_mov_general_2748)
{
    u64 addr = ctx->bx + 0x41c8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x311")
int BPF_KPROBE(do_mov_general_2749)
{
    u64 addr = ctx->bx + 0x41c8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x320")
int BPF_KPROBE(do_mov_general_2750)
{
    u64 addr = ctx->bx + 0x41c8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_change+0x32f")
int BPF_KPROBE(do_mov_general_2751)
{
    u64 addr = ctx->bx + 0x41c8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x2f")
int BPF_KPROBE(do_mov_general_2752)
{
    u64 addr = ctx->di - 0x5c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x36")
int BPF_KPROBE(do_mov_general_2753)
{
    u64 addr = ctx->di - 0x41e4;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x40")
int BPF_KPROBE(do_mov_general_2754)
{
    u64 addr = ctx->di - 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x48")
int BPF_KPROBE(do_mov_general_2755)
{
    u64 addr = ctx->di - 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x50")
int BPF_KPROBE(do_mov_general_2756)
{
    u64 addr = ctx->di - 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x58")
int BPF_KPROBE(do_mov_general_2757)
{
    u64 addr = ctx->di - 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0xc1")
int BPF_KPROBE(do_mov_general_2758)
{
    u64 addr = ctx->cx + ctx->cx * 0x1 - 0x7c6f2580;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0xe5")
int BPF_KPROBE(do_switch_3667)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_init+0xea")
int BPF_KPROBE(do_switch_3668)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_init+0xea")
int BPF_KPROBE(do_mov_general_2759)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x125")
int BPF_KPROBE(do_mov_general_2760)
{
    u64 addr = ctx->r10 + 0x19830;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x131")
int BPF_KPROBE(do_mov_general_2761)
{
    u64 addr = ctx->r10 + 0x19838;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x138")
int BPF_KPROBE(do_mov_general_2762)
{
    u64 addr = ctx->r10 + 0x19840;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x146")
int BPF_KPROBE(do_mov_general_2763)
{
    u64 addr = ctx->r10 + 0x19848;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x14d")
int BPF_KPROBE(do_mov_general_2764)
{
    u64 addr = ctx->r10 + 0x19850;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x15b")
int BPF_KPROBE(do_mov_general_2765)
{
    u64 addr = ctx->r10 + 0x19858;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x162")
int BPF_KPROBE(do_mov_general_2766)
{
    u64 addr = ctx->r10 + 0x1982c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x16d")
int BPF_KPROBE(do_mov_general_2767)
{
    u64 addr = ctx->r10 + 0x19860;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x19f")
int BPF_KPROBE(do_mov_general_2768)
{
    u64 addr = ctx->dx + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x1a6")
int BPF_KPROBE(do_mov_general_2769)
{
    u64 addr = ctx->r10 + ctx->r8 * 0x2 + 0x16000;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x1c4")
int BPF_KPROBE(do_mov_general_2770)
{
    u64 addr = ctx->di + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x1d2")
int BPF_KPROBE(do_mov_general_2771)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x1d5")
int BPF_KPROBE(do_mov_general_2772)
{
    u64 addr = ctx->di + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x1dd")
int BPF_KPROBE(do_mov_general_2773)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x1e1")
int BPF_KPROBE(do_mov_general_2774)
{
    u64 addr = ctx->di + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x1e9")
int BPF_KPROBE(do_mov_general_2775)
{
    u64 addr = ctx->di + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x28b")
int BPF_KPROBE(do_mov_general_2776)
{
    u64 addr =  - 0x7c6f25c0 + ctx->cx * 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x2bd")
int BPF_KPROBE(do_mov_general_2777)
{
    u64 addr = ctx->bx + 0x4290;
    check(addr);
    return 0;
}


SEC("kprobe/cake_init+0x2c7")
int BPF_KPROBE(do_mov_general_2778)
{
    u64 addr = ctx->bx + 0x4278;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dump_class_stats+0x138")
int BPF_KPROBE(do_switch_3674)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_dump_class_stats+0x13d")
int BPF_KPROBE(do_switch_3675)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_dump_class_stats+0x250")
int BPF_KPROBE(do_mov_general_2779)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dump_class_stats+0x286")
int BPF_KPROBE(do_switch_3682)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_dump_class_stats+0x28b")
int BPF_KPROBE(do_switch_3683)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0xc8")
int BPF_KPROBE(do_switch_3691)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0xcd")
int BPF_KPROBE(do_switch_3692)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x1a8")
int BPF_KPROBE(do_switch_3693)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x1ad")
int BPF_KPROBE(do_switch_3694)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x1e0")
int BPF_KPROBE(do_switch_3695)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x1e5")
int BPF_KPROBE(do_switch_3696)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x283")
int BPF_KPROBE(do_switch_3697)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x288")
int BPF_KPROBE(do_switch_3698)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x4d2")
int BPF_KPROBE(do_switch_3700)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x4d7")
int BPF_KPROBE(do_switch_3701)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x62a")
int BPF_KPROBE(do_mov_general_2780)
{
    u64 addr = ctx->bx + ctx->r10 * 0x4 + 0x15000;
    check(addr);
    return 0;
}


SEC("kprobe/cake_hash+0x6aa")
int BPF_KPROBE(do_mov_general_2781)
{
    u64 addr = ctx->bx + ctx->cx * 0x4 + 0x16800;
    check(addr);
    return 0;
}


SEC("kprobe/cake_hash+0x6df")
int BPF_KPROBE(do_mov_general_2782)
{
    u64 addr = ctx->bx + ctx->dx * 0x1 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/cake_hash+0x75a")
int BPF_KPROBE(do_mov_general_2783)
{
    u64 addr = ctx->bx + ctx->cx * 0x4 + 0x16804;
    check(addr);
    return 0;
}


SEC("kprobe/cake_hash+0x790")
int BPF_KPROBE(do_mov_general_2784)
{
    u64 addr = ctx->bx + ctx->dx * 0x1 + 0x4a;
    check(addr);
    return 0;
}


SEC("kprobe/cake_hash+0x7b0")
int BPF_KPROBE(do_switch_3702)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x7b5")
int BPF_KPROBE(do_switch_3703)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x7d2")
int BPF_KPROBE(do_switch_3704)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x7d7")
int BPF_KPROBE(do_switch_3705)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x836")
int BPF_KPROBE(do_mov_general_2785)
{
    u64 addr = ctx->bx + ctx->r10 * 0x4 + 0x15000;
    check(addr);
    return 0;
}


SEC("kprobe/cake_hash+0x8a0")
int BPF_KPROBE(do_switch_3706)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x8a5")
int BPF_KPROBE(do_switch_3707)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x96c")
int BPF_KPROBE(do_switch_3709)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_hash+0x971")
int BPF_KPROBE(do_switch_3710)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_iphdr+0xc4")
int BPF_KPROBE(do_switch_3711)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_iphdr+0xc9")
int BPF_KPROBE(do_switch_3712)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_iphdr+0xed")
int BPF_KPROBE(do_switch_3713)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_iphdr+0xf2")
int BPF_KPROBE(do_switch_3714)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_iphdr+0x113")
int BPF_KPROBE(do_switch_3715)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_iphdr+0x118")
int BPF_KPROBE(do_switch_3716)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x133")
int BPF_KPROBE(do_switch_3717)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x138")
int BPF_KPROBE(do_switch_3718)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x16d")
int BPF_KPROBE(do_mov_general_2786)
{
    u64 addr = ctx->dx + 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x18f")
int BPF_KPROBE(do_mov_general_2787)
{
    u64 addr = ctx->dx + 0xa;
    check(addr);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x234")
int BPF_KPROBE(do_switch_3719)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x239")
int BPF_KPROBE(do_switch_3720)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x2ce")
int BPF_KPROBE(do_switch_3721)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x2d3")
int BPF_KPROBE(do_switch_3722)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x2f7")
int BPF_KPROBE(do_switch_3723)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x2fc")
int BPF_KPROBE(do_switch_3724)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x326")
int BPF_KPROBE(do_switch_3725)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x32b")
int BPF_KPROBE(do_switch_3726)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x35b")
int BPF_KPROBE(do_switch_3727)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x360")
int BPF_KPROBE(do_switch_3728)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x380")
int BPF_KPROBE(do_switch_3729)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_handle_diffserv+0x385")
int BPF_KPROBE(do_switch_3730)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_overhead+0x70")
int BPF_KPROBE(do_mov_general_2788)
{
    u64 addr = ctx->di + 0x4108;
    check(addr);
    return 0;
}


SEC("kprobe/cake_overhead+0x190")
int BPF_KPROBE(do_switch_3735)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_overhead+0x195")
int BPF_KPROBE(do_switch_3736)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_overhead+0x1cc")
int BPF_KPROBE(do_switch_3737)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_overhead+0x1d1")
int BPF_KPROBE(do_switch_3738)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_tcphdr.constprop.0+0x10e")
int BPF_KPROBE(do_switch_3740)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_tcphdr.constprop.0+0x113")
int BPF_KPROBE(do_switch_3741)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_tcphdr.constprop.0+0x166")
int BPF_KPROBE(do_switch_3742)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_tcphdr.constprop.0+0x16b")
int BPF_KPROBE(do_switch_3743)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_tcphdr.constprop.0+0x18f")
int BPF_KPROBE(do_switch_3744)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_tcphdr.constprop.0+0x194")
int BPF_KPROBE(do_switch_3745)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_tcphdr.constprop.0+0x1c1")
int BPF_KPROBE(do_switch_3746)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_get_tcphdr.constprop.0+0x1c6")
int BPF_KPROBE(do_switch_3747)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_ack_filter.isra.0+0x509")
int BPF_KPROBE(do_mov_general_2789)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_ack_filter.isra.0+0x513")
int BPF_KPROBE(do_mov_general_2790)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xa1")
int BPF_KPROBE(do_mov_general_2791)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xa4")
int BPF_KPROBE(do_mov_general_2792)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x1ba")
int BPF_KPROBE(do_mov_general_2793)
{
    u64 addr = ctx->r13 + 0x19868;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x21b")
int BPF_KPROBE(do_mov_general_2794)
{
    u64 addr = ctx->r15 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x224")
int BPF_KPROBE(do_mov_general_2795)
{
    u64 addr = ctx->r15 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x240")
int BPF_KPROBE(do_mov_general_2796)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x243")
int BPF_KPROBE(do_mov_general_2797)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x247")
int BPF_KPROBE(do_mov_general_2798)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x2e7")
int BPF_KPROBE(do_mov_general_2799)
{
    u64 addr = ctx->r12 + 0x4258;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x310")
int BPF_KPROBE(do_mov_general_2800)
{
    u64 addr = ctx->r12 + 0x4268;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x361")
int BPF_KPROBE(do_mov_general_2801)
{
    u64 addr = ctx->r13 + 0x19840;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x368")
int BPF_KPROBE(do_mov_general_2802)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x36c")
int BPF_KPROBE(do_mov_general_2803)
{
    u64 addr = ctx->ax + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x378")
int BPF_KPROBE(do_mov_general_2804)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x37b")
int BPF_KPROBE(do_mov_general_2805)
{
    u64 addr = ctx->r13 + ctx->ax * 0x1 + 0x4c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x3fc")
int BPF_KPROBE(do_mov_general_2806)
{
    u64 addr = ctx->r13 + ctx->cx * 0x1 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x413")
int BPF_KPROBE(do_mov_general_2807)
{
    u64 addr = ctx->r12 + 0x41e4;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x484")
int BPF_KPROBE(do_mov_general_2808)
{
    u64 addr = ctx->r12 + 0x4198;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x4c8")
int BPF_KPROBE(do_mov_general_2809)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x4d6")
int BPF_KPROBE(do_mov_general_2810)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x502")
int BPF_KPROBE(do_mov_general_2811)
{
    u64 addr = ctx->ax + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x509")
int BPF_KPROBE(do_mov_general_2812)
{
    u64 addr = ctx->ax + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x50d")
int BPF_KPROBE(do_mov_general_2813)
{
    u64 addr = ctx->ax + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x511")
int BPF_KPROBE(do_mov_general_2814)
{
    u64 addr = ctx->ax + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x51b")
int BPF_KPROBE(do_mov_general_2815)
{
    u64 addr = ctx->ax + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x5b0")
int BPF_KPROBE(do_mov_general_2816)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x5b3")
int BPF_KPROBE(do_mov_general_2817)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x646")
int BPF_KPROBE(do_mov_general_2818)
{
    u64 addr = ctx->ax + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x64a")
int BPF_KPROBE(do_mov_general_2819)
{
    u64 addr = ctx->ax + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x656")
int BPF_KPROBE(do_mov_general_2820)
{
    u64 addr = ctx->ax + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x6a2")
int BPF_KPROBE(do_mov_general_2821)
{
    u64 addr = ctx->ax + 0x4c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x70c")
int BPF_KPROBE(do_mov_general_2822)
{
    u64 addr = ctx->r12 + 0x4270;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x718")
int BPF_KPROBE(do_mov_general_2823)
{
    u64 addr = ctx->r12 + 0x4258;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x727")
int BPF_KPROBE(do_mov_general_2824)
{
    u64 addr = ctx->r12 + 0x4198;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x878")
int BPF_KPROBE(do_mov_general_2825)
{
    u64 addr = ctx->r12 + 0x4270;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x884")
int BPF_KPROBE(do_mov_general_2826)
{
    u64 addr = ctx->r12 + 0x4260;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x8bd")
int BPF_KPROBE(do_mov_general_2827)
{
    u64 addr = ctx->r12 + 0x4278;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x8e2")
int BPF_KPROBE(do_mov_general_2828)
{
    u64 addr = ctx->r12 + 0x41c0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x905")
int BPF_KPROBE(do_mov_general_2829)
{
    u64 addr = ctx->r9 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x909")
int BPF_KPROBE(do_mov_general_2830)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x973")
int BPF_KPROBE(do_mov_general_2831)
{
    u64 addr = ctx->r12 + 0x41e0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x9a9")
int BPF_KPROBE(do_switch_3772)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_enqueue+0x9ae")
int BPF_KPROBE(do_switch_3773)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_enqueue+0x9b3")
int BPF_KPROBE(do_mov_general_2832)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0x9be")
int BPF_KPROBE(do_switch_3774)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_enqueue+0x9c3")
int BPF_KPROBE(do_switch_3775)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_enqueue+0x9db")
int BPF_KPROBE(do_switch_3776)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_enqueue+0x9e0")
int BPF_KPROBE(do_switch_3777)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_enqueue+0xa32")
int BPF_KPROBE(do_mov_general_2833)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xa44")
int BPF_KPROBE(do_mov_general_2834)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xa51")
int BPF_KPROBE(do_mov_general_2835)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xa64")
int BPF_KPROBE(do_mov_general_2836)
{
    u64 addr = ctx->bx + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xa71")
int BPF_KPROBE(do_mov_general_2837)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xa74")
int BPF_KPROBE(do_mov_general_2838)
{
    u64 addr = ctx->r9 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xa78")
int BPF_KPROBE(do_mov_general_2839)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xab8")
int BPF_KPROBE(do_mov_general_2840)
{
    u64 addr = ctx->r9;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xb46")
int BPF_KPROBE(do_mov_general_2841)
{
    u64 addr = ctx->r13 + 0x19834;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xb57")
int BPF_KPROBE(do_mov_general_2842)
{
    u64 addr = ctx->r12 + 0x41b0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xb5f")
int BPF_KPROBE(do_mov_general_2843)
{
    u64 addr = ctx->r12 + 0x41a8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xbbc")
int BPF_KPROBE(do_switch_3781)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_enqueue+0xbc1")
int BPF_KPROBE(do_switch_3782)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_enqueue+0xbce")
int BPF_KPROBE(do_mov_general_2844)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/cake_enqueue+0xbd6")
int BPF_KPROBE(do_mov_general_2845)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x100")
int BPF_KPROBE(do_mov_general_2846)
{
    u64 addr = ctx->r15 + 0x41f0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x16f")
int BPF_KPROBE(do_mov_general_2847)
{
    u64 addr = ctx->r15 + 0x41f2;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x22b")
int BPF_KPROBE(do_mov_general_2848)
{
    u64 addr = ctx->bx + 0x35;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x234")
int BPF_KPROBE(do_mov_general_2849)
{
    u64 addr = ctx->bx + 0x34;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x24e")
int BPF_KPROBE(do_mov_general_2850)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x2ce")
int BPF_KPROBE(do_mov_general_2851)
{
    u64 addr = ctx->bx + 0x35;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x2dd")
int BPF_KPROBE(do_mov_general_2852)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x2ef")
int BPF_KPROBE(do_mov_general_2853)
{
    u64 addr = ctx->bx + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x30b")
int BPF_KPROBE(do_mov_general_2854)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x314")
int BPF_KPROBE(do_mov_general_2855)
{
    u64 addr = ctx->bx + 0x35;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x31d")
int BPF_KPROBE(do_mov_general_2856)
{
    u64 addr = ctx->bx + 0x34;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x351")
int BPF_KPROBE(do_mov_general_2857)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x3bd")
int BPF_KPROBE(do_mov_general_2858)
{
    u64 addr = ctx->r12 + 0x198a8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x3f4")
int BPF_KPROBE(do_mov_general_2859)
{
    u64 addr = ctx->r12 + 0x198b0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x426")
int BPF_KPROBE(do_mov_general_2860)
{
    u64 addr = ctx->r12 + 0x198b8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x471")
int BPF_KPROBE(do_mov_general_2861)
{
    u64 addr = ctx->r15 + 0x4198;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x489")
int BPF_KPROBE(do_mov_general_2862)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x510")
int BPF_KPROBE(do_mov_general_2863)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x524")
int BPF_KPROBE(do_mov_general_2864)
{
    u64 addr = ctx->bx + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x53a")
int BPF_KPROBE(do_mov_general_2865)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x5ab")
int BPF_KPROBE(do_mov_general_2866)
{
    u64 addr = ctx->bx + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x5c3")
int BPF_KPROBE(do_mov_general_2867)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x60f")
int BPF_KPROBE(do_mov_general_2868)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x66b")
int BPF_KPROBE(do_mov_general_2869)
{
    u64 addr = ctx->r15 + 0x41f0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x687")
int BPF_KPROBE(do_mov_general_2870)
{
    u64 addr = ctx->r15 + 0x41f0;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x6ce")
int BPF_KPROBE(do_mov_general_2871)
{
    u64 addr = ctx->r12 + 0x19884;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x75f")
int BPF_KPROBE(do_mov_general_2872)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x763")
int BPF_KPROBE(do_mov_general_2873)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x776")
int BPF_KPROBE(do_mov_general_2874)
{
    u64 addr = ctx->r12 + 0x19850;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x77e")
int BPF_KPROBE(do_mov_general_2875)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x781")
int BPF_KPROBE(do_mov_general_2876)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x785")
int BPF_KPROBE(do_mov_general_2877)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x816")
int BPF_KPROBE(do_mov_general_2878)
{
    u64 addr = ctx->dx + 0xa;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x820")
int BPF_KPROBE(do_mov_general_2879)
{
    u64 addr = ctx->dx + 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0x9da")
int BPF_KPROBE(do_mov_general_2880)
{
    u64 addr = ctx->bx + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xa1b")
int BPF_KPROBE(do_mov_general_2881)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xa1f")
int BPF_KPROBE(do_mov_general_2882)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xa25")
int BPF_KPROBE(do_mov_general_2883)
{
    u64 addr = ctx->bx + 0x34;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xa5a")
int BPF_KPROBE(do_mov_general_2884)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xa62")
int BPF_KPROBE(do_mov_general_2885)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xa6d")
int BPF_KPROBE(do_mov_general_2886)
{
    u64 addr = ctx->r12 + 0x19860;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xa75")
int BPF_KPROBE(do_mov_general_2887)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xa79")
int BPF_KPROBE(do_mov_general_2888)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xa7c")
int BPF_KPROBE(do_mov_general_2889)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xa96")
int BPF_KPROBE(do_mov_general_2890)
{
    u64 addr = ctx->bx + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xb0e")
int BPF_KPROBE(do_mov_general_2891)
{
    u64 addr = ctx->bx + 0x34;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xb36")
int BPF_KPROBE(do_mov_general_2892)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xb3a")
int BPF_KPROBE(do_mov_general_2893)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xb41")
int BPF_KPROBE(do_mov_general_2894)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xb47")
int BPF_KPROBE(do_mov_general_2895)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xb66")
int BPF_KPROBE(do_mov_general_2896)
{
    u64 addr = ctx->bx + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xb95")
int BPF_KPROBE(do_mov_general_2897)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xbb9")
int BPF_KPROBE(do_mov_general_2898)
{
    u64 addr = ctx->bx + 0x34;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xbe8")
int BPF_KPROBE(do_mov_general_2899)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xbfb")
int BPF_KPROBE(do_mov_general_2900)
{
    u64 addr = ctx->bx + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xc13")
int BPF_KPROBE(do_mov_general_2901)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xc6a")
int BPF_KPROBE(do_switch_3796)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_dequeue+0xc6f")
int BPF_KPROBE(do_switch_3797)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cake_dequeue+0xc8d")
int BPF_KPROBE(do_mov_general_2902)
{
    u64 addr = ctx->bx + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xd11")
int BPF_KPROBE(do_mov_general_2903)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xd18")
int BPF_KPROBE(do_mov_general_2904)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xd1c")
int BPF_KPROBE(do_mov_general_2905)
{
    u64 addr = ctx->bx + 0x34;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xd54")
int BPF_KPROBE(do_mov_general_2906)
{
    u64 addr = ctx->r15 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/cake_dequeue+0xe0e")
int BPF_KPROBE(do_mov_general_2907)
{
    u64 addr = ctx->r12 + 0x19884;
    check(addr);
    return 0;
}


SEC("kprobe/fq_flow_purge+0x3d")
int BPF_KPROBE(do_switch_3802)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_flow_purge+0x42")
int BPF_KPROBE(do_switch_3803)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_flow_purge+0x4f")
int BPF_KPROBE(do_switch_3804)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_flow_purge+0x54")
int BPF_KPROBE(do_switch_3805)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_flow_purge+0x54")
int BPF_KPROBE(do_mov_general_2908)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_flow_purge+0x5d")
int BPF_KPROBE(do_mov_general_2909)
{
    u64 addr = ctx->r13 + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x63")
int BPF_KPROBE(do_mov_general_2910)
{
    u64 addr = ctx->r13 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0xda")
int BPF_KPROBE(do_mov_general_2911)
{
    u64 addr = ctx->r13 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0xe6")
int BPF_KPROBE(do_mov_general_2912)
{
    u64 addr = ctx->r13 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x19c")
int BPF_KPROBE(do_mov_general_2913)
{
    u64 addr = ctx->r15 + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x1c7")
int BPF_KPROBE(do_mov_general_2914)
{
    u64 addr = ctx->ax + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x1cb")
int BPF_KPROBE(do_mov_general_2915)
{
    u64 addr = ctx->r8 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x1d9")
int BPF_KPROBE(do_mov_general_2916)
{
    u64 addr = ctx->r15 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x201")
int BPF_KPROBE(do_mov_general_2917)
{
    u64 addr = ctx->r15 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x250")
int BPF_KPROBE(do_mov_general_2918)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x25a")
int BPF_KPROBE(do_mov_general_2919)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x262")
int BPF_KPROBE(do_mov_general_2920)
{
    u64 addr = ctx->r13 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x26a")
int BPF_KPROBE(do_mov_general_2921)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x320")
int BPF_KPROBE(do_mov_general_2922)
{
    u64 addr = ctx->r15 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x328")
int BPF_KPROBE(do_mov_general_2923)
{
    u64 addr = ctx->r15 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x341")
int BPF_KPROBE(do_mov_general_2924)
{
    u64 addr = ctx->r15 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x348")
int BPF_KPROBE(do_mov_general_2925)
{
    u64 addr = ctx->r15 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x350")
int BPF_KPROBE(do_mov_general_2926)
{
    u64 addr = ctx->r15 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x354")
int BPF_KPROBE(do_mov_general_2927)
{
    u64 addr = ctx->r15 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x35c")
int BPF_KPROBE(do_mov_general_2928)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x38e")
int BPF_KPROBE(do_mov_general_2929)
{
    u64 addr = ctx->r8 + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x39a")
int BPF_KPROBE(do_mov_general_2930)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x39d")
int BPF_KPROBE(do_mov_general_2931)
{
    u64 addr = ctx->r15 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x3a1")
int BPF_KPROBE(do_mov_general_2932)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x3b5")
int BPF_KPROBE(do_switch_3811)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_enqueue+0x3ba")
int BPF_KPROBE(do_switch_3812)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_enqueue+0x437")
int BPF_KPROBE(do_mov_stk_10)
{
    u64 addr = ctx->bp + ctx->di * 0x8 - 0x70;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/fq_enqueue+0x44e")
int BPF_KPROBE(do_mov_general_2933)
{
    u64 addr = ctx->r8 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x475")
int BPF_KPROBE(do_mov_general_2934)
{
    u64 addr = ctx->r15 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x48b")
int BPF_KPROBE(do_mov_general_2935)
{
    u64 addr = ctx->r15 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x495")
int BPF_KPROBE(do_mov_general_2936)
{
    u64 addr = ctx->r12 + 0x18c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x524")
int BPF_KPROBE(do_mov_general_2937)
{
    u64 addr = ctx->r8 + 0x27c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x540")
int BPF_KPROBE(do_mov_general_2938)
{
    u64 addr = ctx->r8 + 0x280;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x566")
int BPF_KPROBE(do_mov_general_2939)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x56f")
int BPF_KPROBE(do_mov_general_2940)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x5b3")
int BPF_KPROBE(do_mov_general_2941)
{
    u64 addr = ctx->r8 + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x5f5")
int BPF_KPROBE(do_mov_general_2942)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x5fd")
int BPF_KPROBE(do_mov_general_2943)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x60a")
int BPF_KPROBE(do_mov_general_2944)
{
    u64 addr = ctx->r12 + 0x18c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x620")
int BPF_KPROBE(do_mov_general_2945)
{
    u64 addr = ctx->bx + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x634")
int BPF_KPROBE(do_switch_3816)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_enqueue+0x639")
int BPF_KPROBE(do_switch_3817)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_enqueue+0x67e")
int BPF_KPROBE(do_mov_general_2946)
{
    u64 addr = ctx->r13 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x6ca")
int BPF_KPROBE(do_mov_general_2947)
{
    u64 addr = ctx->ax + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x6ce")
int BPF_KPROBE(do_mov_general_2948)
{
    u64 addr = ctx->r8 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x6d5")
int BPF_KPROBE(do_mov_general_2949)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/fq_enqueue+0x6e2")
int BPF_KPROBE(do_mov_general_2950)
{
    u64 addr = ctx->r8 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/fq_reset+0x1c")
int BPF_KPROBE(do_mov_general_2951)
{
    u64 addr = ctx->di - 0x118;
    check(addr);
    return 0;
}


SEC("kprobe/fq_reset+0x26")
int BPF_KPROBE(do_mov_general_2952)
{
    u64 addr = ctx->di - 0xfc;
    check(addr);
    return 0;
}


SEC("kprobe/fq_reset+0xa6")
int BPF_KPROBE(do_mov_general_2953)
{
    u64 addr = ctx->r13 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/fq_reset+0xb1")
int BPF_KPROBE(do_mov_general_2954)
{
    u64 addr = ctx->r13 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/fq_reset+0xbc")
int BPF_KPROBE(do_mov_general_2955)
{
    u64 addr = ctx->r13 + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_reset+0xc7")
int BPF_KPROBE(do_mov_general_2956)
{
    u64 addr = ctx->r13 + 0x27c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_reset+0xd2")
int BPF_KPROBE(do_mov_general_2957)
{
    u64 addr = ctx->r13 + 0x280;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dump+0x19d")
int BPF_KPROBE(do_switch_3835)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_dump+0x1a2")
int BPF_KPROBE(do_switch_3836)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_dump+0x2da")
int BPF_KPROBE(do_mov_general_2958)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x71")
int BPF_KPROBE(do_mov_general_2959)
{
    u64 addr = ctx->r14 + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x78")
int BPF_KPROBE(do_mov_general_2960)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0xe7")
int BPF_KPROBE(do_mov_general_2961)
{
    u64 addr = ctx->r14 + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x101")
int BPF_KPROBE(do_mov_general_2962)
{
    u64 addr = ctx->r14 + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x127")
int BPF_KPROBE(do_mov_general_2963)
{
    u64 addr = ctx->r14 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x137")
int BPF_KPROBE(do_mov_general_2964)
{
    u64 addr = ctx->ax + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x13b")
int BPF_KPROBE(do_mov_general_2965)
{
    u64 addr = ctx->r14 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x142")
int BPF_KPROBE(do_mov_general_2966)
{
    u64 addr = ctx->bx - 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x185")
int BPF_KPROBE(do_mov_general_2967)
{
    u64 addr = ctx->r14 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x18e")
int BPF_KPROBE(do_mov_general_2968)
{
    u64 addr = ctx->r14 + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x20a")
int BPF_KPROBE(do_mov_general_2969)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x20e")
int BPF_KPROBE(do_mov_general_2970)
{
    u64 addr = ctx->bx + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x240")
int BPF_KPROBE(do_mov_general_2971)
{
    u64 addr = ctx->bx + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x247")
int BPF_KPROBE(do_mov_general_2972)
{
    u64 addr = ctx->bx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x24f")
int BPF_KPROBE(do_mov_general_2973)
{
    u64 addr = ctx->bx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x257")
int BPF_KPROBE(do_mov_general_2974)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x273")
int BPF_KPROBE(do_mov_general_2975)
{
    u64 addr = ctx->bx + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x28f")
int BPF_KPROBE(do_mov_general_2976)
{
    u64 addr = ctx->r14 + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x2f9")
int BPF_KPROBE(do_mov_general_2977)
{
    u64 addr = ctx->bx + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x300")
int BPF_KPROBE(do_mov_general_2978)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x315")
int BPF_KPROBE(do_mov_general_2979)
{
    u64 addr = ctx->ax + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x319")
int BPF_KPROBE(do_mov_general_2980)
{
    u64 addr = ctx->r14 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x320")
int BPF_KPROBE(do_mov_general_2981)
{
    u64 addr = ctx->bx + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x32d")
int BPF_KPROBE(do_mov_general_2982)
{
    u64 addr = ctx->r14 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x347")
int BPF_KPROBE(do_mov_general_2983)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x35b")
int BPF_KPROBE(do_mov_general_2984)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x3bd")
int BPF_KPROBE(do_mov_general_2985)
{
    u64 addr = ctx->r15 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x3c1")
int BPF_KPROBE(do_mov_general_2986)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x3e8")
int BPF_KPROBE(do_mov_general_2987)
{
    u64 addr = ctx->bx + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x452")
int BPF_KPROBE(do_mov_general_2988)
{
    u64 addr = ctx->bx + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x482")
int BPF_KPROBE(do_mov_general_2989)
{
    u64 addr = ctx->bx + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x4a6")
int BPF_KPROBE(do_mov_general_2990)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x5e0")
int BPF_KPROBE(do_mov_general_2991)
{
    u64 addr = ctx->dx + 0xa;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x5e4")
int BPF_KPROBE(do_mov_general_2992)
{
    u64 addr = ctx->dx + 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x607")
int BPF_KPROBE(do_mov_general_2993)
{
    u64 addr = ctx->r15 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x638")
int BPF_KPROBE(do_mov_general_2994)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x660")
int BPF_KPROBE(do_mov_general_2995)
{
    u64 addr = ctx->r15 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/fq_dequeue+0x68d")
int BPF_KPROBE(do_switch_3855)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_dequeue+0x692")
int BPF_KPROBE(do_switch_3856)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_dump_stats+0x121")
int BPF_KPROBE(do_switch_3862)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_dump_stats+0x126")
int BPF_KPROBE(do_switch_3863)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_resize+0x4c")
int BPF_KPROBE(do_switch_3869)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_resize+0x51")
int BPF_KPROBE(do_switch_3870)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_resize+0x19b")
int BPF_KPROBE(do_mov_general_2996)
{
    u64 addr = ctx->bx + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/fq_resize+0x1a2")
int BPF_KPROBE(do_mov_general_2997)
{
    u64 addr = ctx->bx + 0x279;
    check(addr);
    return 0;
}


SEC("kprobe/fq_resize+0x203")
int BPF_KPROBE(do_mov_general_2998)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/fq_resize+0x20d")
int BPF_KPROBE(do_mov_general_2999)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_resize+0x216")
int BPF_KPROBE(do_mov_general_3000)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_resize+0x21f")
int BPF_KPROBE(do_mov_general_3001)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_change+0xc2")
int BPF_KPROBE(do_mov_general_3002)
{
    u64 addr = ctx->r14 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/fq_change+0xd5")
int BPF_KPROBE(do_mov_general_3003)
{
    u64 addr = ctx->r14 + 0x24c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_change+0xfa")
int BPF_KPROBE(do_mov_general_3004)
{
    u64 addr = ctx->r14 + 0x240;
    check(addr);
    return 0;
}


SEC("kprobe/fq_change+0x110")
int BPF_KPROBE(do_mov_general_3005)
{
    u64 addr = ctx->r14 + 0x244;
    check(addr);
    return 0;
}


SEC("kprobe/fq_change+0x335")
int BPF_KPROBE(do_mov_general_3006)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0x23")
int BPF_KPROBE(do_mov_general_3007)
{
    u64 addr = ctx->di - 0x2c4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0x30")
int BPF_KPROBE(do_mov_general_3008)
{
    u64 addr = ctx->di - 0x8c;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0x4c")
int BPF_KPROBE(do_mov_general_3009)
{
    u64 addr = ctx->di - 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0x62")
int BPF_KPROBE(do_mov_general_3010)
{
    u64 addr = ctx->di - 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0x74")
int BPF_KPROBE(do_mov_general_3011)
{
    u64 addr = ctx->di - 0x5e;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0x7a")
int BPF_KPROBE(do_mov_general_3012)
{
    u64 addr = ctx->di - 0x130;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0x85")
int BPF_KPROBE(do_mov_general_3013)
{
    u64 addr = ctx->di - 0x94;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0x95")
int BPF_KPROBE(do_mov_general_3014)
{
    u64 addr = ctx->di - 0x80;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0xa3")
int BPF_KPROBE(do_mov_general_3015)
{
    u64 addr = ctx->di - 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0xb1")
int BPF_KPROBE(do_mov_general_3016)
{
    u64 addr = ctx->di - 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0xba")
int BPF_KPROBE(do_mov_general_3017)
{
    u64 addr = ctx->di - 0x158;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0xc5")
int BPF_KPROBE(do_mov_general_3018)
{
    u64 addr = ctx->di - 0x148;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0xd0")
int BPF_KPROBE(do_mov_general_3019)
{
    u64 addr = ctx->di - 0x138;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0xdb")
int BPF_KPROBE(do_mov_general_3020)
{
    u64 addr = ctx->di - 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0xe2")
int BPF_KPROBE(do_mov_general_3021)
{
    u64 addr = ctx->di - 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0xed")
int BPF_KPROBE(do_mov_general_3022)
{
    u64 addr = ctx->di - 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/fq_init+0xf5")
int BPF_KPROBE(do_mov_general_3023)
{
    u64 addr = ctx->di - 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0x4e")
int BPF_KPROBE(do_mov_general_3024)
{
    u64 addr = ctx->ax - 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0x52")
int BPF_KPROBE(do_mov_general_3025)
{
    u64 addr = ctx->r8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0xb5")
int BPF_KPROBE(do_mov_general_3026)
{
    u64 addr = ctx->r8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0xbc")
int BPF_KPROBE(do_mov_general_3027)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0xbf")
int BPF_KPROBE(do_mov_general_3028)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0xc2")
int BPF_KPROBE(do_mov_general_3029)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0x111")
int BPF_KPROBE(do_mov_general_3030)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0x118")
int BPF_KPROBE(do_mov_general_3031)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0x11c")
int BPF_KPROBE(do_mov_general_3032)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0x126")
int BPF_KPROBE(do_mov_general_3033)
{
    u64 addr = ctx->dx + 0x260;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0x12d")
int BPF_KPROBE(do_mov_general_3034)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0x130")
int BPF_KPROBE(do_mov_general_3035)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0x134")
int BPF_KPROBE(do_mov_general_3036)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0x156")
int BPF_KPROBE(do_mov_general_3037)
{
    u64 addr = ctx->r8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dequeue+0x15a")
int BPF_KPROBE(do_mov_general_3038)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dump_stats+0x46")
int BPF_KPROBE(do_switch_3894)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_dump_stats+0x4b")
int BPF_KPROBE(do_switch_3895)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_reset+0x12")
int BPF_KPROBE(do_switch_3897)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_reset+0x17")
int BPF_KPROBE(do_switch_3898)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_destroy+0x90")
int BPF_KPROBE(do_mov_general_3039)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_destroy+0x94")
int BPF_KPROBE(do_mov_general_3040)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_destroy+0x97")
int BPF_KPROBE(do_mov_general_3041)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_destroy+0x9b")
int BPF_KPROBE(do_mov_general_3042)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_dump+0xd7")
int BPF_KPROBE(do_switch_3908)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_dump+0xdc")
int BPF_KPROBE(do_switch_3909)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_dump+0x12e")
int BPF_KPROBE(do_switch_3912)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_dump+0x133")
int BPF_KPROBE(do_switch_3913)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_dump+0x185")
int BPF_KPROBE(do_mov_general_3043)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x67")
int BPF_KPROBE(do_switch_3917)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x6c")
int BPF_KPROBE(do_switch_3918)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_enqueue+0xee")
int BPF_KPROBE(do_mov_general_3044)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0xf2")
int BPF_KPROBE(do_mov_general_3045)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0xff")
int BPF_KPROBE(do_mov_general_3046)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x107")
int BPF_KPROBE(do_mov_general_3047)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x184")
int BPF_KPROBE(do_mov_general_3048)
{
    u64 addr = ctx->di + ctx->cx * 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x1d3")
int BPF_KPROBE(do_mov_general_3049)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x1fe")
int BPF_KPROBE(do_mov_general_3050)
{
    u64 addr = ctx->di + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x224")
int BPF_KPROBE(do_mov_general_3051)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x22f")
int BPF_KPROBE(do_mov_general_3052)
{
    u64 addr = ctx->cx + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x239")
int BPF_KPROBE(do_mov_general_3053)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x26c")
int BPF_KPROBE(do_mov_general_3054)
{
    u64 addr = ctx->r15 + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x2c6")
int BPF_KPROBE(do_mov_general_3055)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x2cd")
int BPF_KPROBE(do_mov_general_3056)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x2e9")
int BPF_KPROBE(do_mov_general_3057)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x2ec")
int BPF_KPROBE(do_mov_general_3058)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x33c")
int BPF_KPROBE(do_mov_general_3059)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x347")
int BPF_KPROBE(do_mov_general_3060)
{
    u64 addr = ctx->dx + 0x78;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x366")
int BPF_KPROBE(do_mov_general_3061)
{
    u64 addr = ctx->r15 + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x384")
int BPF_KPROBE(do_mov_general_3062)
{
    u64 addr = ctx->r15 + 0x250;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x38b")
int BPF_KPROBE(do_mov_general_3063)
{
    u64 addr = ctx->r15 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x399")
int BPF_KPROBE(do_mov_general_3064)
{
    u64 addr = ctx->r15 + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x3a0")
int BPF_KPROBE(do_mov_general_3065)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x3b1")
int BPF_KPROBE(do_mov_general_3066)
{
    u64 addr = ctx->r15 + ctx->dx * 0x8 + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x3c2")
int BPF_KPROBE(do_mov_general_3067)
{
    u64 addr = ctx->cx + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x3dc")
int BPF_KPROBE(do_mov_general_3068)
{
    u64 addr = ctx->r15 + 0x260;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x3e3")
int BPF_KPROBE(do_mov_general_3069)
{
    u64 addr = ctx->r15 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x3ea")
int BPF_KPROBE(do_mov_general_3070)
{
    u64 addr = ctx->r15 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x3f1")
int BPF_KPROBE(do_mov_general_3071)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x452")
int BPF_KPROBE(do_mov_general_3072)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x45a")
int BPF_KPROBE(do_mov_general_3073)
{
    u64 addr = ctx->ax + 0x4;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x4be")
int BPF_KPROBE(do_switch_3921)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x4be")
int BPF_KPROBE(do_hotbpf_3921)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/hhf_enqueue+0x4c3")
int BPF_KPROBE(do_switch_3922)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x4d8")
int BPF_KPROBE(do_mov_general_3074)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x4dc")
int BPF_KPROBE(do_mov_general_3075)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x4e5")
int BPF_KPROBE(do_mov_general_3076)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x4ea")
int BPF_KPROBE(do_mov_general_3077)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x4ee")
int BPF_KPROBE(do_mov_general_3078)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_enqueue+0x4f2")
int BPF_KPROBE(do_mov_general_3079)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_change+0xcc")
int BPF_KPROBE(do_mov_general_3080)
{
    u64 addr = ctx->bx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_change+0xd3")
int BPF_KPROBE(do_mov_general_3081)
{
    u64 addr = ctx->bx + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_change+0xda")
int BPF_KPROBE(do_mov_general_3082)
{
    u64 addr = ctx->bx + 0x274;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_change+0xe9")
int BPF_KPROBE(do_mov_general_3083)
{
    u64 addr = ctx->bx + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_change+0xfb")
int BPF_KPROBE(do_switch_3927)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_change+0x100")
int BPF_KPROBE(do_switch_3928)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_change+0x100")
int BPF_KPROBE(do_mov_general_3084)
{
    u64 addr = ctx->bx + 0x268;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_change+0x112")
int BPF_KPROBE(do_mov_general_3085)
{
    u64 addr = ctx->bx + 0x26c;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_change+0x124")
int BPF_KPROBE(do_switch_3929)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_change+0x129")
int BPF_KPROBE(do_switch_3930)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_change+0x129")
int BPF_KPROBE(do_mov_general_3086)
{
    u64 addr = ctx->bx + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_change+0x155")
int BPF_KPROBE(do_switch_3932)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_change+0x15a")
int BPF_KPROBE(do_switch_3933)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_init+0x34")
int BPF_KPROBE(do_mov_general_3087)
{
    u64 addr = ctx->di - 0x1bc;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x4e")
int BPF_KPROBE(do_mov_general_3088)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x5e")
int BPF_KPROBE(do_mov_general_3089)
{
    u64 addr = ctx->r12 + 0x248;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x66")
int BPF_KPROBE(do_mov_general_3090)
{
    u64 addr = ctx->r12 + 0x250;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x6e")
int BPF_KPROBE(do_mov_general_3091)
{
    u64 addr = ctx->r12 + 0x258;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x76")
int BPF_KPROBE(do_mov_general_3092)
{
    u64 addr = ctx->r12 + 0x260;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x88")
int BPF_KPROBE(do_mov_general_3093)
{
    u64 addr = ctx->r12 + 0x268;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x9a")
int BPF_KPROBE(do_mov_general_3094)
{
    u64 addr = ctx->r12 + 0x270;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0xde")
int BPF_KPROBE(do_switch_3943)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_init+0xe3")
int BPF_KPROBE(do_switch_3944)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_init+0xe3")
int BPF_KPROBE(do_mov_general_3095)
{
    u64 addr = ctx->r12 + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x107")
int BPF_KPROBE(do_mov_general_3096)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x10a")
int BPF_KPROBE(do_mov_general_3097)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x127")
int BPF_KPROBE(do_mov_general_3098)
{
    u64 addr = ctx->r12 + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x133")
int BPF_KPROBE(do_mov_general_3099)
{
    u64 addr = ctx->r12 + 0x1f8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x14e")
int BPF_KPROBE(do_switch_3945)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_init+0x153")
int BPF_KPROBE(do_switch_3946)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_init+0x153")
int BPF_KPROBE(do_mov_general_3100)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x173")
int BPF_KPROBE(do_mov_general_3101)
{
    u64 addr = ctx->r12 + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x18a")
int BPF_KPROBE(do_switch_3947)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_init+0x18f")
int BPF_KPROBE(do_switch_3948)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/hhf_init+0x18f")
int BPF_KPROBE(do_mov_general_3102)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x1a9")
int BPF_KPROBE(do_mov_general_3103)
{
    u64 addr = ctx->r12 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x1b1")
int BPF_KPROBE(do_mov_general_3104)
{
    u64 addr = ctx->r12 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x1c1")
int BPF_KPROBE(do_mov_general_3105)
{
    u64 addr = ctx->r12 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/hhf_init+0x1c9")
int BPF_KPROBE(do_mov_general_3106)
{
    u64 addr = ctx->r12 + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x2c")
int BPF_KPROBE(do_mov_general_3107)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x106")
int BPF_KPROBE(do_mov_general_3108)
{
    u64 addr = ctx->di + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x118")
int BPF_KPROBE(do_mov_general_3109)
{
    u64 addr = ctx->di + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x13e")
int BPF_KPROBE(do_mov_general_3110)
{
    u64 addr = ctx->di + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x142")
int BPF_KPROBE(do_mov_general_3111)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x145")
int BPF_KPROBE(do_mov_general_3112)
{
    u64 addr = ctx->di + 0x3c;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x171")
int BPF_KPROBE(do_mov_general_3113)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x179")
int BPF_KPROBE(do_mov_general_3114)
{
    u64 addr = ctx->di + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x181")
int BPF_KPROBE(do_mov_general_3115)
{
    u64 addr = ctx->di + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x189")
int BPF_KPROBE(do_mov_general_3116)
{
    u64 addr = ctx->di + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x191")
int BPF_KPROBE(do_mov_general_3117)
{
    u64 addr = ctx->di + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x19f")
int BPF_KPROBE(do_mov_general_3118)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x1ee")
int BPF_KPROBE(do_mov_general_3119)
{
    u64 addr = ctx->di + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x205")
int BPF_KPROBE(do_mov_general_3120)
{
    u64 addr = ctx->di + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/pie_calculate_probability+0x21d")
int BPF_KPROBE(do_mov_general_3121)
{
    u64 addr = ctx->di + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/pie_drop_early+0x93")
int BPF_KPROBE(do_mov_general_3122)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/pie_drop_early+0xec")
int BPF_KPROBE(do_mov_general_3123)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0x35")
int BPF_KPROBE(do_mov_general_3124)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0x49")
int BPF_KPROBE(do_mov_general_3125)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0x7c")
int BPF_KPROBE(do_mov_general_3126)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0xa5")
int BPF_KPROBE(do_mov_general_3127)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0xc9")
int BPF_KPROBE(do_mov_general_3128)
{
    u64 addr = ctx->bx + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0xd5")
int BPF_KPROBE(do_mov_general_3129)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0xf3")
int BPF_KPROBE(do_mov_general_3130)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0xfc")
int BPF_KPROBE(do_mov_general_3131)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0x108")
int BPF_KPROBE(do_mov_general_3132)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0x119")
int BPF_KPROBE(do_mov_general_3133)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0x127")
int BPF_KPROBE(do_mov_general_3134)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0x13e")
int BPF_KPROBE(do_mov_general_3135)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/pie_process_dequeue+0x14f")
int BPF_KPROBE(do_mov_general_3136)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/pie_dump_stats+0xa0")
int BPF_KPROBE(do_switch_3954)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_dump_stats+0xa5")
int BPF_KPROBE(do_switch_3955)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_qdisc_dequeue+0x22")
int BPF_KPROBE(do_mov_general_3137)
{
    u64 addr = ctx->di + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_dequeue+0x2e")
int BPF_KPROBE(do_mov_general_3138)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_dequeue+0x9b")
int BPF_KPROBE(do_mov_general_3139)
{
    u64 addr = ctx->di + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_reset+0x20")
int BPF_KPROBE(do_mov_general_3140)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/pie_reset+0x2b")
int BPF_KPROBE(do_mov_general_3141)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/pie_reset+0x36")
int BPF_KPROBE(do_mov_general_3142)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_reset+0x41")
int BPF_KPROBE(do_mov_general_3143)
{
    u64 addr = ctx->bx + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_reset+0x4c")
int BPF_KPROBE(do_mov_general_3144)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_reset+0x6a")
int BPF_KPROBE(do_switch_3959)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_reset+0x6f")
int BPF_KPROBE(do_switch_3960)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_reset+0x6f")
int BPF_KPROBE(do_mov_general_3145)
{
    u64 addr = ctx->bx + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/pie_reset+0x7a")
int BPF_KPROBE(do_mov_general_3146)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_reset+0x85")
int BPF_KPROBE(do_mov_general_3147)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_destroy+0xd")
int BPF_KPROBE(do_mov_general_3148)
{
    u64 addr = ctx->di - 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/pie_destroy+0x17")
int BPF_KPROBE(do_switch_3962)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_destroy+0x1c")
int BPF_KPROBE(do_switch_3963)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_dump+0xb6")
int BPF_KPROBE(do_switch_3972)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_dump+0xbb")
int BPF_KPROBE(do_switch_3973)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_dump+0x1a9")
int BPF_KPROBE(do_mov_general_3149)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x73")
int BPF_KPROBE(do_mov_general_3150)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x82")
int BPF_KPROBE(do_mov_general_3151)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x8b")
int BPF_KPROBE(do_mov_general_3152)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x13a")
int BPF_KPROBE(do_mov_general_3153)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x15e")
int BPF_KPROBE(do_mov_general_3154)
{
    u64 addr = ctx->r13 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x1bc")
int BPF_KPROBE(do_mov_general_3155)
{
    u64 addr = ctx->ax + 0xa;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x1c0")
int BPF_KPROBE(do_mov_general_3156)
{
    u64 addr = ctx->ax + 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x1f5")
int BPF_KPROBE(do_mov_general_3157)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x1fd")
int BPF_KPROBE(do_mov_general_3158)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x206")
int BPF_KPROBE(do_mov_general_3159)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x210")
int BPF_KPROBE(do_mov_general_3160)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x22e")
int BPF_KPROBE(do_mov_general_3161)
{
    u64 addr = ctx->bx + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x239")
int BPF_KPROBE(do_mov_general_3162)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x240")
int BPF_KPROBE(do_mov_general_3163)
{
    u64 addr = ctx->bx + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x252")
int BPF_KPROBE(do_mov_general_3164)
{
    u64 addr = ctx->r13 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x2de")
int BPF_KPROBE(do_switch_3984)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_qdisc_enqueue+0x2e3")
int BPF_KPROBE(do_switch_3985)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_change+0x94")
int BPF_KPROBE(do_mov_general_3165)
{
    u64 addr = ctx->bx + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0xa7")
int BPF_KPROBE(do_switch_3990)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_change+0xac")
int BPF_KPROBE(do_switch_3991)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_change+0xac")
int BPF_KPROBE(do_mov_general_3166)
{
    u64 addr = ctx->bx + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0xc2")
int BPF_KPROBE(do_mov_general_3167)
{
    u64 addr = ctx->bx + 0x1cc;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0xc8")
int BPF_KPROBE(do_mov_general_3168)
{
    u64 addr = ctx->bx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0xd7")
int BPF_KPROBE(do_mov_general_3169)
{
    u64 addr = ctx->bx + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0xe9")
int BPF_KPROBE(do_mov_general_3170)
{
    u64 addr = ctx->bx + 0x1d4;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0xfb")
int BPF_KPROBE(do_mov_general_3171)
{
    u64 addr = ctx->bx + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0x10d")
int BPF_KPROBE(do_mov_general_3172)
{
    u64 addr = ctx->bx + 0x1d9;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0x11f")
int BPF_KPROBE(do_mov_general_3173)
{
    u64 addr = ctx->bx + 0x1da;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0x13d")
int BPF_KPROBE(do_mov_general_3174)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0x153")
int BPF_KPROBE(do_switch_3992)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_change+0x158")
int BPF_KPROBE(do_switch_3993)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_change+0x17c")
int BPF_KPROBE(do_mov_general_3175)
{
    u64 addr = ctx->bx + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0x182")
int BPF_KPROBE(do_mov_general_3176)
{
    u64 addr = ctx->bx + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/pie_change+0x18e")
int BPF_KPROBE(do_mov_general_3177)
{
    u64 addr = ctx->bx + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0x1a")
int BPF_KPROBE(do_mov_general_3178)
{
    u64 addr = ctx->di + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0x37")
int BPF_KPROBE(do_switch_4001)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_init+0x3c")
int BPF_KPROBE(do_switch_4002)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_init+0x3c")
int BPF_KPROBE(do_mov_general_3179)
{
    u64 addr = ctx->r12 + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0x4e")
int BPF_KPROBE(do_mov_general_3180)
{
    u64 addr = ctx->r12 + 0x1da;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0x5c")
int BPF_KPROBE(do_mov_general_3181)
{
    u64 addr = ctx->r12 + 0x1cc;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0x74")
int BPF_KPROBE(do_mov_general_3182)
{
    u64 addr = ctx->r12 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0x80")
int BPF_KPROBE(do_mov_general_3183)
{
    u64 addr = ctx->r12 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0x8f")
int BPF_KPROBE(do_mov_general_3184)
{
    u64 addr = ctx->r12 + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0xa1")
int BPF_KPROBE(do_mov_general_3185)
{
    u64 addr = ctx->r12 + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0xab")
int BPF_KPROBE(do_mov_general_3186)
{
    u64 addr = ctx->r12 + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0xb4")
int BPF_KPROBE(do_mov_general_3187)
{
    u64 addr = ctx->r12 + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0xc0")
int BPF_KPROBE(do_mov_general_3188)
{
    u64 addr = ctx->r12 + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0xcc")
int BPF_KPROBE(do_mov_general_3189)
{
    u64 addr = ctx->r12 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0xd8")
int BPF_KPROBE(do_mov_general_3190)
{
    u64 addr = ctx->r12 + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/pie_init+0xe1")
int BPF_KPROBE(do_switch_4003)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/pie_init+0xe6")
int BPF_KPROBE(do_switch_4004)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_reset+0xc")
int BPF_KPROBE(do_mov_general_3191)
{
    u64 addr = ctx->di + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_reset+0x13")
int BPF_KPROBE(do_mov_general_3192)
{
    u64 addr = ctx->di + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_reset+0x21")
int BPF_KPROBE(do_mov_general_3193)
{
    u64 addr = ctx->di + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_reset+0x28")
int BPF_KPROBE(do_mov_general_3194)
{
    u64 addr = ctx->di + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_reset+0x71")
int BPF_KPROBE(do_switch_4007)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_reset+0x76")
int BPF_KPROBE(do_switch_4008)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_reset+0x7a")
int BPF_KPROBE(do_mov_general_3195)
{
    u64 addr = ctx->bx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_reset+0x82")
int BPF_KPROBE(do_mov_general_3196)
{
    u64 addr = ctx->bx + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_reset+0x86")
int BPF_KPROBE(do_mov_general_3197)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_reset+0x8e")
int BPF_KPROBE(do_mov_general_3198)
{
    u64 addr = ctx->bx + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_reset+0x92")
int BPF_KPROBE(do_mov_general_3199)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_reset+0x9a")
int BPF_KPROBE(do_mov_general_3200)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_reset+0xa2")
int BPF_KPROBE(do_mov_general_3201)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_reset+0xaa")
int BPF_KPROBE(do_mov_general_3202)
{
    u64 addr = ctx->bx + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_destroy+0x20")
int BPF_KPROBE(do_mov_general_3203)
{
    u64 addr = ctx->bx + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_destroy+0x2a")
int BPF_KPROBE(do_switch_4010)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_destroy+0x2f")
int BPF_KPROBE(do_switch_4011)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0x53")
int BPF_KPROBE(do_mov_general_3204)
{
    u64 addr = ctx->dx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0x5c")
int BPF_KPROBE(do_mov_general_3205)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0xdf")
int BPF_KPROBE(do_mov_general_3206)
{
    u64 addr = ctx->r8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0xe6")
int BPF_KPROBE(do_mov_general_3207)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0xe9")
int BPF_KPROBE(do_mov_general_3208)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0xec")
int BPF_KPROBE(do_mov_general_3209)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0x129")
int BPF_KPROBE(do_mov_general_3210)
{
    u64 addr = ctx->dx - 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0x12f")
int BPF_KPROBE(do_mov_general_3211)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0x133")
int BPF_KPROBE(do_mov_general_3212)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0x13d")
int BPF_KPROBE(do_mov_general_3213)
{
    u64 addr = ctx->si + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0x144")
int BPF_KPROBE(do_mov_general_3214)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0x147")
int BPF_KPROBE(do_mov_general_3215)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0x14b")
int BPF_KPROBE(do_mov_general_3216)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0x15f")
int BPF_KPROBE(do_mov_general_3217)
{
    u64 addr = ctx->r8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_dequeue+0x163")
int BPF_KPROBE(do_mov_general_3218)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_dump+0xdd")
int BPF_KPROBE(do_switch_4022)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_dump+0xe2")
int BPF_KPROBE(do_switch_4023)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_dump+0x245")
int BPF_KPROBE(do_mov_general_3219)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x8d")
int BPF_KPROBE(do_mov_general_3220)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x91")
int BPF_KPROBE(do_mov_general_3221)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0xff")
int BPF_KPROBE(do_mov_general_3222)
{
    u64 addr = ctx->r12 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x1cd")
int BPF_KPROBE(do_mov_general_3223)
{
    u64 addr = ctx->r13 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x1d8")
int BPF_KPROBE(do_mov_general_3224)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x1e1")
int BPF_KPROBE(do_mov_general_3225)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x203")
int BPF_KPROBE(do_mov_general_3226)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x229")
int BPF_KPROBE(do_mov_general_3227)
{
    u64 addr = ctx->r12 + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x27b")
int BPF_KPROBE(do_mov_general_3228)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x27e")
int BPF_KPROBE(do_mov_general_3229)
{
    u64 addr = ctx->r13 + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x286")
int BPF_KPROBE(do_mov_general_3230)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x2a2")
int BPF_KPROBE(do_mov_general_3231)
{
    u64 addr = ctx->r13 + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x2a8")
int BPF_KPROBE(do_mov_general_3232)
{
    u64 addr = ctx->r13 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x303")
int BPF_KPROBE(do_mov_general_3233)
{
    u64 addr = ctx->r12 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x30d")
int BPF_KPROBE(do_mov_general_3234)
{
    u64 addr = ctx->r13 + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x324")
int BPF_KPROBE(do_mov_general_3235)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x32b")
int BPF_KPROBE(do_mov_general_3236)
{
    u64 addr = ctx->r13 + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x32f")
int BPF_KPROBE(do_mov_general_3237)
{
    u64 addr = ctx->r13 + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x333")
int BPF_KPROBE(do_mov_general_3238)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x343")
int BPF_KPROBE(do_mov_general_3239)
{
    u64 addr = ctx->r13 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x3c4")
int BPF_KPROBE(do_switch_4038)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x3c9")
int BPF_KPROBE(do_switch_4039)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x431")
int BPF_KPROBE(do_mov_general_3240)
{
    u64 addr = ctx->ax + 0xa;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x435")
int BPF_KPROBE(do_mov_general_3241)
{
    u64 addr = ctx->ax + 0x1;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x458")
int BPF_KPROBE(do_switch_4040)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_qdisc_enqueue+0x45d")
int BPF_KPROBE(do_switch_4041)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_dump_stats+0xfe")
int BPF_KPROBE(do_switch_4046)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_dump_stats+0x103")
int BPF_KPROBE(do_switch_4047)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_change+0x9c")
int BPF_KPROBE(do_mov_general_3242)
{
    u64 addr = ctx->bx + 0x1cc;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0xa2")
int BPF_KPROBE(do_mov_general_3243)
{
    u64 addr = ctx->bx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0xbf")
int BPF_KPROBE(do_mov_general_3244)
{
    u64 addr = ctx->bx + 0x1e4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0xea")
int BPF_KPROBE(do_mov_general_3245)
{
    u64 addr = ctx->bx + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0xfd")
int BPF_KPROBE(do_switch_4056)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_change+0x102")
int BPF_KPROBE(do_switch_4057)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_change+0x102")
int BPF_KPROBE(do_mov_general_3246)
{
    u64 addr = ctx->bx + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x114")
int BPF_KPROBE(do_mov_general_3247)
{
    u64 addr = ctx->bx + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x126")
int BPF_KPROBE(do_mov_general_3248)
{
    u64 addr = ctx->bx + 0x1d4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x138")
int BPF_KPROBE(do_mov_general_3249)
{
    u64 addr = ctx->bx + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x14a")
int BPF_KPROBE(do_mov_general_3250)
{
    u64 addr = ctx->bx + 0x1ec;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x15c")
int BPF_KPROBE(do_mov_general_3251)
{
    u64 addr = ctx->bx + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x16e")
int BPF_KPROBE(do_mov_general_3252)
{
    u64 addr = ctx->bx + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x180")
int BPF_KPROBE(do_mov_general_3253)
{
    u64 addr = ctx->bx + 0x1d9;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x192")
int BPF_KPROBE(do_mov_general_3254)
{
    u64 addr = ctx->bx + 0x1da;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x1c3")
int BPF_KPROBE(do_switch_4059)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_change+0x1c8")
int BPF_KPROBE(do_switch_4060)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_change+0x2c5")
int BPF_KPROBE(do_mov_general_3255)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x2cd")
int BPF_KPROBE(do_mov_general_3256)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x2d6")
int BPF_KPROBE(do_mov_general_3257)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x2f1")
int BPF_KPROBE(do_mov_general_3258)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_change+0x337")
int BPF_KPROBE(do_mov_general_3259)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x19")
int BPF_KPROBE(do_mov_general_3260)
{
    u64 addr = ctx->di + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x35")
int BPF_KPROBE(do_switch_4074)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_init+0x3a")
int BPF_KPROBE(do_switch_4075)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_init+0x3a")
int BPF_KPROBE(do_mov_general_3261)
{
    u64 addr = ctx->bx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x50")
int BPF_KPROBE(do_mov_general_3262)
{
    u64 addr = ctx->bx + 0x1da;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x57")
int BPF_KPROBE(do_mov_general_3263)
{
    u64 addr = ctx->bx + 0x1cc;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x6b")
int BPF_KPROBE(do_mov_general_3264)
{
    u64 addr = ctx->bx + 0x1d8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x77")
int BPF_KPROBE(do_mov_general_3265)
{
    u64 addr = ctx->bx + 0x1c8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x87")
int BPF_KPROBE(do_mov_general_3266)
{
    u64 addr = ctx->bx + 0x1d0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0xa4")
int BPF_KPROBE(do_mov_general_3267)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0xab")
int BPF_KPROBE(do_mov_general_3268)
{
    u64 addr = ctx->bx + 0x1e8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0xbb")
int BPF_KPROBE(do_mov_general_3269)
{
    u64 addr = ctx->bx + 0x1e0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0xc9")
int BPF_KPROBE(do_mov_general_3270)
{
    u64 addr = ctx->bx + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0xd0")
int BPF_KPROBE(do_mov_general_3271)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0xde")
int BPF_KPROBE(do_mov_general_3272)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0xe5")
int BPF_KPROBE(do_mov_general_3273)
{
    u64 addr = ctx->bx + 0x1ec;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0xef")
int BPF_KPROBE(do_mov_general_3274)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0xf6")
int BPF_KPROBE(do_switch_4076)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_init+0xfb")
int BPF_KPROBE(do_switch_4077)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_init+0x135")
int BPF_KPROBE(do_mov_general_3275)
{
    u64 addr = ctx->bx + 0x1e4;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x16a")
int BPF_KPROBE(do_switch_4080)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_init+0x16f")
int BPF_KPROBE(do_switch_4081)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fq_pie_init+0x16f")
int BPF_KPROBE(do_mov_general_3276)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x1af")
int BPF_KPROBE(do_mov_general_3277)
{
    u64 addr = ctx->ax + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x1b7")
int BPF_KPROBE(do_mov_general_3278)
{
    u64 addr = ctx->ax + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x1bb")
int BPF_KPROBE(do_mov_general_3279)
{
    u64 addr = ctx->ax + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x1c3")
int BPF_KPROBE(do_mov_general_3280)
{
    u64 addr = ctx->ax + 0x58;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x1c7")
int BPF_KPROBE(do_mov_general_3281)
{
    u64 addr = ctx->ax + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x1cf")
int BPF_KPROBE(do_mov_general_3282)
{
    u64 addr = ctx->ax + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/fq_pie_init+0x1d7")
int BPF_KPROBE(do_mov_general_3283)
{
    u64 addr = ctx->ax + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_dump_class+0x28")
int BPF_KPROBE(do_mov_general_3284)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_set_port_rate+0x42")
int BPF_KPROBE(do_mov_general_3285)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_disable_offload+0x39")
int BPF_KPROBE(do_mov_general_3286)
{
    u64 addr = ctx->si + 0x88;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_disable_offload+0x44")
int BPF_KPROBE(do_mov_general_3287)
{
    u64 addr = ctx->si + 0x90;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_enqueue_soft+0x54")
int BPF_KPROBE(do_mov_general_3288)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_enqueue_soft+0x78")
int BPF_KPROBE(do_mov_general_3289)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_dequeue_soft+0x79")
int BPF_KPROBE(do_mov_general_3290)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_dequeue_soft+0x120")
int BPF_KPROBE(do_mov_general_3291)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_dequeue_soft+0x150")
int BPF_KPROBE(do_mov_general_3292)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_dequeue_soft+0x197")
int BPF_KPROBE(do_mov_general_3293)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_dequeue_soft+0x1b9")
int BPF_KPROBE(do_mov_general_3294)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_destroy+0x65")
int BPF_KPROBE(do_mov_general_3295)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_destroy+0x69")
int BPF_KPROBE(do_mov_general_3296)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_destroy+0x76")
int BPF_KPROBE(do_mov_general_3297)
{
    u64 addr = ctx->bx + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_destroy+0x81")
int BPF_KPROBE(do_mov_general_3298)
{
    u64 addr = ctx->bx + 0x228;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_dump+0xf7")
int BPF_KPROBE(do_mov_general_3299)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_change+0xe1")
int BPF_KPROBE(do_mov_general_3300)
{
    u64 addr = ctx->bx + 0x208;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_change+0xec")
int BPF_KPROBE(do_mov_general_3301)
{
    u64 addr = ctx->bx + 0x210;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_change+0xfb")
int BPF_KPROBE(do_mov_general_3302)
{
    u64 addr = ctx->bx + 0x1a4;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_change+0x105")
int BPF_KPROBE(do_mov_general_3303)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_change+0x11d")
int BPF_KPROBE(do_mov_general_3304)
{
    u64 addr = ctx->bx + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_change+0x136")
int BPF_KPROBE(do_mov_general_3305)
{
    u64 addr = ctx->bx + 0x1a8;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_change+0x1a4")
int BPF_KPROBE(do_mov_general_3306)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_change+0x1c4")
int BPF_KPROBE(do_mov_general_3307)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_change+0x1e2")
int BPF_KPROBE(do_mov_general_3308)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_init+0x3d")
int BPF_KPROBE(do_mov_general_3309)
{
    u64 addr = ctx->r12 + 0x218;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_init+0x77")
int BPF_KPROBE(do_mov_general_3310)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_init+0x7b")
int BPF_KPROBE(do_mov_general_3311)
{
    u64 addr = ctx->r12 + 0x220;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_init+0x83")
int BPF_KPROBE(do_mov_general_3312)
{
    u64 addr = ctx->r12 + 0x228;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_init+0xc0")
int BPF_KPROBE(do_mov_general_3313)
{
    u64 addr = ctx->r12 + 0x208;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_init+0xd4")
int BPF_KPROBE(do_mov_general_3314)
{
    u64 addr = ctx->r12 + 0x210;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_init+0xe4")
int BPF_KPROBE(do_mov_general_3315)
{
    u64 addr = ctx->r12 + 0x184;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_init+0x125")
int BPF_KPROBE(do_mov_general_3316)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_walk+0x31")
int BPF_KPROBE(do_mov_general_3317)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_walk+0x3a")
int BPF_KPROBE(do_mov_general_3318)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_graft+0x54")
int BPF_KPROBE(do_mov_general_3319)
{
    u64 addr = ctx->bx + 0x218;
    check(addr);
    return 0;
}


SEC("kprobe/cbs_graft+0x86")
int BPF_KPROBE(do_switch_4128)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbs_graft+0x8b")
int BPF_KPROBE(do_switch_4129)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/cbs_graft+0xd3")
int BPF_KPROBE(do_mov_general_3320)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/report_sock_error+0x53")
int BPF_KPROBE(do_switch_4143)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/report_sock_error+0x58")
int BPF_KPROBE(do_switch_4144)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/report_sock_error+0x60")
int BPF_KPROBE(do_mov_general_3321)
{
    u64 addr = ctx->ax + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/report_sock_error+0x6f")
int BPF_KPROBE(do_mov_general_3322)
{
    u64 addr = ctx->r13 + 0x44;
    check(addr);
    return 0;
}


SEC("kprobe/report_sock_error+0x74")
int BPF_KPROBE(do_mov_general_3323)
{
    u64 addr = ctx->r13 + 0x46;
    check(addr);
    return 0;
}


SEC("kprobe/report_sock_error+0x78")
int BPF_KPROBE(do_mov_general_3324)
{
    u64 addr = ctx->r13 + 0x47;
    check(addr);
    return 0;
}


SEC("kprobe/report_sock_error+0x7d")
int BPF_KPROBE(do_mov_general_3325)
{
    u64 addr = ctx->r13 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/report_sock_error+0x81")
int BPF_KPROBE(do_switch_4145)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/report_sock_error+0x86")
int BPF_KPROBE(do_switch_4146)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/etf_dump+0xc8")
int BPF_KPROBE(do_mov_general_3326)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/etf_enqueue_timesortedlist+0x60")
int BPF_KPROBE(do_mov_general_3327)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/etf_enqueue_timesortedlist+0x69")
int BPF_KPROBE(do_mov_general_3328)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/etf_enqueue_timesortedlist+0xf0")
int BPF_KPROBE(do_mov_general_3329)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/etf_enqueue_timesortedlist+0xf4")
int BPF_KPROBE(do_mov_general_3330)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/etf_enqueue_timesortedlist+0xfd")
int BPF_KPROBE(do_mov_general_3331)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/etf_enqueue_timesortedlist+0x106")
int BPF_KPROBE(do_mov_general_3332)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/etf_enqueue_timesortedlist+0x10e")
int BPF_KPROBE(do_mov_general_3333)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/etf_enqueue_timesortedlist+0x173")
int BPF_KPROBE(do_mov_general_3334)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/etf_enqueue_timesortedlist+0x17b")
int BPF_KPROBE(do_mov_general_3335)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/etf_enqueue_timesortedlist+0x184")
int BPF_KPROBE(do_mov_general_3336)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/etf_enqueue_timesortedlist+0x18d")
int BPF_KPROBE(do_mov_general_3337)
{
    u64 addr = ctx->bx + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0xb4")
int BPF_KPROBE(do_mov_general_3338)
{
    u64 addr = ctx->r12 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0xcb")
int BPF_KPROBE(do_mov_general_3339)
{
    u64 addr = ctx->r12 + 0x18c;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0xd7")
int BPF_KPROBE(do_mov_general_3340)
{
    u64 addr = ctx->r12 + 0x184;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0xe8")
int BPF_KPROBE(do_mov_general_3341)
{
    u64 addr = ctx->r12 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0xf4")
int BPF_KPROBE(do_mov_general_3342)
{
    u64 addr = ctx->r12 + 0x181;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0x10f")
int BPF_KPROBE(do_mov_general_3343)
{
    u64 addr = ctx->r12 + 0x182;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0x13e")
int BPF_KPROBE(do_mov_general_3344)
{
    u64 addr = ctx->r12 + 0x1f8;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0x1dc")
int BPF_KPROBE(do_mov_general_3345)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0x244")
int BPF_KPROBE(do_mov_general_3346)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0x279")
int BPF_KPROBE(do_mov_general_3347)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0x29b")
int BPF_KPROBE(do_mov_general_3348)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0x2c1")
int BPF_KPROBE(do_mov_general_3349)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0x2e3")
int BPF_KPROBE(do_mov_general_3350)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0x305")
int BPF_KPROBE(do_mov_general_3351)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/etf_init+0x327")
int BPF_KPROBE(do_mov_general_3352)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/timesortedlist_remove+0x2c")
int BPF_KPROBE(do_mov_general_3353)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/timesortedlist_remove+0x3e")
int BPF_KPROBE(do_mov_general_3354)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/timesortedlist_remove+0x4b")
int BPF_KPROBE(do_mov_general_3355)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/timesortedlist_remove+0x5b")
int BPF_KPROBE(do_mov_general_3356)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/timesortedlist_remove+0xa5")
int BPF_KPROBE(do_mov_general_3357)
{
    u64 addr = ctx->bx + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/etf_reset+0x52")
int BPF_KPROBE(do_mov_general_3358)
{
    u64 addr = ctx->r13 + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/etf_reset+0x6a")
int BPF_KPROBE(do_switch_4174)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/etf_reset+0x6f")
int BPF_KPROBE(do_switch_4175)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/etf_reset+0x90")
int BPF_KPROBE(do_mov_general_3359)
{
    u64 addr = ctx->r13 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/etf_reset+0xb2")
int BPF_KPROBE(do_switch_4177)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/etf_reset+0xb7")
int BPF_KPROBE(do_switch_4178)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/etf_reset+0xb7")
int BPF_KPROBE(do_mov_general_3360)
{
    u64 addr = ctx->r13 + 0x98;
    check(addr);
    return 0;
}


SEC("kprobe/etf_reset+0xc2")
int BPF_KPROBE(do_mov_general_3361)
{
    u64 addr = ctx->r13 + 0xa0;
    check(addr);
    return 0;
}


SEC("kprobe/etf_reset+0xcd")
int BPF_KPROBE(do_mov_general_3362)
{
    u64 addr = ctx->r13 + 0xa8;
    check(addr);
    return 0;
}


SEC("kprobe/etf_dequeue_timesortedlist+0xcc")
int BPF_KPROBE(do_mov_general_3363)
{
    u64 addr = ctx->bx + 0x1a0;
    check(addr);
    return 0;
}


SEC("kprobe/etf_dequeue_timesortedlist+0xdf")
int BPF_KPROBE(do_mov_general_3364)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/etf_dequeue_timesortedlist+0xee")
int BPF_KPROBE(do_mov_general_3365)
{
    u64 addr = ctx->r15 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/etf_dequeue_timesortedlist+0x102")
int BPF_KPROBE(do_mov_general_3366)
{
    u64 addr = ctx->r15 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/etf_dequeue_timesortedlist+0x115")
int BPF_KPROBE(do_mov_general_3367)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/etf_dequeue_timesortedlist+0x162")
int BPF_KPROBE(do_mov_general_3368)
{
    u64 addr = ctx->r15 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_dump_class+0x2e")
int BPF_KPROBE(do_mov_general_3369)
{
    u64 addr = ctx->cx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_dump_class+0x43")
int BPF_KPROBE(do_mov_general_3370)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_walk+0x24")
int BPF_KPROBE(do_mov_general_3371)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_walk+0x45")
int BPF_KPROBE(do_mov_general_3372)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_walk+0x6f")
int BPF_KPROBE(do_mov_general_3373)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_free_sched_cb+0x3d")
int BPF_KPROBE(do_mov_general_3374)
{
    u64 addr = ctx->r15 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_free_sched_cb+0x41")
int BPF_KPROBE(do_mov_general_3375)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_free_sched_cb+0x44")
int BPF_KPROBE(do_mov_general_3376)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_free_sched_cb+0x47")
int BPF_KPROBE(do_mov_general_3377)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_set_picos_per_byte+0x46")
int BPF_KPROBE(do_mov_general_3378)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_dequeue+0x1a6")
int BPF_KPROBE(do_switch_4209)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_dequeue+0x1ab")
int BPF_KPROBE(do_switch_4210)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_reset+0x22")
int BPF_KPROBE(do_switch_4211)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_reset+0x27")
int BPF_KPROBE(do_switch_4212)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_graft+0x7c")
int BPF_KPROBE(do_mov_general_3379)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_graft+0x86")
int BPF_KPROBE(do_mov_general_3380)
{
    u64 addr = ctx->ax + ctx->bx * 0x1 - 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_graft+0xe2")
int BPF_KPROBE(do_mov_general_3381)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_parse_tc_entries+0xb3")
int BPF_KPROBE(do_mov_general_3382)
{
    u64 addr = ctx->bx + ctx->ax * 0x1 + 0x258;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_parse_tc_entries+0xc9")
int BPF_KPROBE(do_mov_general_3383)
{
    u64 addr = ctx->bx + ctx->ax * 0x1 + 0x218;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_parse_tc_entries+0x1de")
int BPF_KPROBE(do_mov_stk_11)
{
    u64 addr = ctx->bp + ctx->cx * 0x4 - 0x70;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/taprio_parse_tc_entries+0x201")
int BPF_KPROBE(do_mov_general_3384)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_parse_tc_entries+0x223")
int BPF_KPROBE(do_mov_general_3385)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_parse_tc_entries+0x245")
int BPF_KPROBE(do_mov_general_3386)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_parse_tc_entries+0x26c")
int BPF_KPROBE(do_mov_general_3387)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_parse_tc_entries+0x292")
int BPF_KPROBE(do_mov_general_3388)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_parse_tc_entries+0x29e")
int BPF_KPROBE(do_mov_general_3389)
{
    u64 addr = ctx->r14 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_parse_tc_entries+0x2a2")
int BPF_KPROBE(do_mov_general_3390)
{
    u64 addr = ctx->r14 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_attach+0xcc")
int BPF_KPROBE(do_mov_general_3391)
{
    u64 addr = ctx->r15 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_dump_class_stats+0x4f")
int BPF_KPROBE(do_switch_4232)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_dump_class_stats+0x54")
int BPF_KPROBE(do_switch_4233)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_dump_class_stats+0xb8")
int BPF_KPROBE(do_switch_4235)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_dump_class_stats+0xbd")
int BPF_KPROBE(do_switch_4236)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/find_entry_to_transmit+0x4e")
int BPF_KPROBE(do_mov_general_3392)
{
    u64 addr = ctx->r9;
    check(addr);
    return 0;
}


SEC("kprobe/find_entry_to_transmit+0x71")
int BPF_KPROBE(do_mov_general_3393)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/find_entry_to_transmit+0x188")
int BPF_KPROBE(do_mov_general_3394)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/find_entry_to_transmit+0x193")
int BPF_KPROBE(do_mov_general_3395)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/find_entry_to_transmit+0x201")
int BPF_KPROBE(do_mov_general_3396)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/find_entry_to_transmit+0x208")
int BPF_KPROBE(do_mov_general_3397)
{
    u64 addr = ctx->si;
    check(addr);
    return 0;
}


SEC("kprobe/find_entry_to_transmit+0x21f")
int BPF_KPROBE(do_mov_general_3398)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/find_entry_to_transmit+0x226")
int BPF_KPROBE(do_mov_general_3399)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x57")
int BPF_KPROBE(do_mov_general_3400)
{
    u64 addr = ctx->bx + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x77")
int BPF_KPROBE(do_mov_general_3401)
{
    u64 addr = ctx->bx + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x97")
int BPF_KPROBE(do_mov_general_3402)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x102")
int BPF_KPROBE(do_switch_4240)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x102")
int BPF_KPROBE(do_hotbpf_4240)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/parse_taprio_schedule+0x107")
int BPF_KPROBE(do_switch_4241)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x180")
int BPF_KPROBE(do_mov_general_3403)
{
    u64 addr = ctx->r11 + 0x24;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x1b4")
int BPF_KPROBE(do_mov_general_3404)
{
    u64 addr = ctx->r11 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x1c4")
int BPF_KPROBE(do_mov_general_3405)
{
    u64 addr = ctx->r11 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x1de")
int BPF_KPROBE(do_mov_general_3406)
{
    u64 addr = ctx->r11 + 0x2c;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x1ee")
int BPF_KPROBE(do_mov_general_3407)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x1f2")
int BPF_KPROBE(do_mov_general_3408)
{
    u64 addr = ctx->r11;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x1f5")
int BPF_KPROBE(do_mov_general_3409)
{
    u64 addr = ctx->r11 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x1f9")
int BPF_KPROBE(do_mov_general_3410)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x21a")
int BPF_KPROBE(do_mov_general_3411)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x248")
int BPF_KPROBE(do_mov_general_3412)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x27c")
int BPF_KPROBE(do_mov_general_3413)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x2a2")
int BPF_KPROBE(do_mov_general_3414)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x2c9")
int BPF_KPROBE(do_mov_general_3415)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x2f0")
int BPF_KPROBE(do_mov_general_3416)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x315")
int BPF_KPROBE(do_mov_general_3417)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x34d")
int BPF_KPROBE(do_mov_general_3418)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/parse_taprio_schedule+0x367")
int BPF_KPROBE(do_mov_general_3419)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_offload_alloc+0x2e")
int BPF_KPROBE(do_switch_4251)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_offload_alloc+0x2e")
int BPF_KPROBE(do_hotbpf_4251)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/taprio_offload_alloc+0x33")
int BPF_KPROBE(do_switch_4252)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_offload_alloc+0x38")
int BPF_KPROBE(do_mov_general_3420)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_disable_offload+0x48")
int BPF_KPROBE(do_mov_general_3421)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_disable_offload+0x64")
int BPF_KPROBE(do_mov_general_3422)
{
    u64 addr = ctx->bx + 0x1c;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_disable_offload+0x8f")
int BPF_KPROBE(do_mov_general_3423)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_disable_offload+0xb3")
int BPF_KPROBE(do_mov_general_3424)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_destroy+0x33")
int BPF_KPROBE(do_mov_general_3425)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_destroy+0x37")
int BPF_KPROBE(do_mov_general_3426)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_destroy+0x44")
int BPF_KPROBE(do_mov_general_3427)
{
    u64 addr = ctx->di + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_destroy+0x4c")
int BPF_KPROBE(do_mov_general_3428)
{
    u64 addr = ctx->di + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_destroy+0x50")
int BPF_KPROBE(do_switch_4258)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_destroy+0x55")
int BPF_KPROBE(do_switch_4259)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_destroy+0xa0")
int BPF_KPROBE(do_mov_general_3429)
{
    u64 addr = ctx->r12 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_destroy+0xaf")
int BPF_KPROBE(do_switch_4263)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_destroy+0xb4")
int BPF_KPROBE(do_switch_4264)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0xc7")
int BPF_KPROBE(do_mov_general_3430)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x107")
int BPF_KPROBE(do_mov_general_3431)
{
    u64 addr = ctx->r12 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x21b")
int BPF_KPROBE(do_switch_4272)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0x21b")
int BPF_KPROBE(do_hotbpf_4272)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/taprio_change+0x220")
int BPF_KPROBE(do_switch_4273)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0x237")
int BPF_KPROBE(do_mov_general_3432)
{
    u64 addr = ctx->r15 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x242")
int BPF_KPROBE(do_mov_general_3433)
{
    u64 addr = ctx->r15 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x370")
int BPF_KPROBE(do_mov_general_3434)
{
    u64 addr = ctx->r12 + 0x194;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x378")
int BPF_KPROBE(do_mov_general_3435)
{
    u64 addr = ctx->r12 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x3b3")
int BPF_KPROBE(do_switch_4276)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0x3b8")
int BPF_KPROBE(do_switch_4277)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0x3f6")
int BPF_KPROBE(do_switch_4278)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0x3fb")
int BPF_KPROBE(do_switch_4279)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0x42b")
int BPF_KPROBE(do_mov_general_3436)
{
    u64 addr = ctx->r13 + ctx->ax * 0x1 + 0x8e1;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x4e9")
int BPF_KPROBE(do_mov_general_3437)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x4f0")
int BPF_KPROBE(do_mov_general_3438)
{
    u64 addr = ctx->di + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x4f8")
int BPF_KPROBE(do_mov_general_3439)
{
    u64 addr = ctx->di + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x500")
int BPF_KPROBE(do_mov_general_3440)
{
    u64 addr = ctx->di + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x53b")
int BPF_KPROBE(do_mov_general_3441)
{
    u64 addr = ctx->ax + 0x68;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x541")
int BPF_KPROBE(do_mov_general_3442)
{
    u64 addr = ctx->ax + 0x70;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x5bb")
int BPF_KPROBE(do_mov_general_3443)
{
    u64 addr = ctx->r15 + ctx->ax * 0x4 + 0x6c;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x5e6")
int BPF_KPROBE(do_mov_general_3444)
{
    u64 addr = ctx->cx + 0x60;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x5f2")
int BPF_KPROBE(do_mov_general_3445)
{
    u64 addr = ctx->cx + ctx->ax * 0x1 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x627")
int BPF_KPROBE(do_mov_general_3446)
{
    u64 addr = ctx->r12 + 0x19c;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x68d")
int BPF_KPROBE(do_mov_general_3447)
{
    u64 addr = ctx->r12 + 0x298;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x6c4")
int BPF_KPROBE(do_switch_4286)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0x6c9")
int BPF_KPROBE(do_switch_4287)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0x713")
int BPF_KPROBE(do_mov_general_3448)
{
    u64 addr = ctx->ax + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x743")
int BPF_KPROBE(do_mov_general_3449)
{
    u64 addr = ctx->r12 + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x7c8")
int BPF_KPROBE(do_mov_general_3450)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x7ef")
int BPF_KPROBE(do_mov_general_3451)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x81f")
int BPF_KPROBE(do_mov_general_3452)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x8d5")
int BPF_KPROBE(do_mov_general_3453)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x919")
int BPF_KPROBE(do_mov_general_3454)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x943")
int BPF_KPROBE(do_mov_general_3455)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x994")
int BPF_KPROBE(do_mov_general_3456)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x9b7")
int BPF_KPROBE(do_mov_general_3457)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0x9e8")
int BPF_KPROBE(do_mov_general_3458)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xa2f")
int BPF_KPROBE(do_mov_general_3459)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xa53")
int BPF_KPROBE(do_mov_general_3460)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xa8c")
int BPF_KPROBE(do_mov_general_3461)
{
    u64 addr = ctx->r15 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xa9e")
int BPF_KPROBE(do_mov_general_3462)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xaaf")
int BPF_KPROBE(do_mov_general_3463)
{
    u64 addr = ctx->cx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xab2")
int BPF_KPROBE(do_mov_general_3464)
{
    u64 addr = ctx->r12 + 0x1b0;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xb0b")
int BPF_KPROBE(do_switch_4305)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0xb10")
int BPF_KPROBE(do_switch_4306)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0xb1e")
int BPF_KPROBE(do_mov_general_3465)
{
    u64 addr = ctx->r12 + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xba1")
int BPF_KPROBE(do_mov_general_3466)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xbc5")
int BPF_KPROBE(do_switch_4311)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0xbca")
int BPF_KPROBE(do_switch_4312)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0xbe6")
int BPF_KPROBE(do_switch_4313)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0xbeb")
int BPF_KPROBE(do_switch_4314)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_change+0xbf2")
int BPF_KPROBE(do_mov_general_3467)
{
    u64 addr = ctx->r12 + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xc1a")
int BPF_KPROBE(do_mov_general_3468)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xc51")
int BPF_KPROBE(do_mov_general_3469)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xc78")
int BPF_KPROBE(do_mov_general_3470)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xcc0")
int BPF_KPROBE(do_mov_general_3471)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xcf4")
int BPF_KPROBE(do_mov_general_3472)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xd07")
int BPF_KPROBE(do_mov_general_3473)
{
    u64 addr = ctx->r12 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xd33")
int BPF_KPROBE(do_mov_general_3474)
{
    u64 addr = ctx->r12 + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xd42")
int BPF_KPROBE(do_mov_general_3475)
{
    u64 addr = ctx->r12 + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xd76")
int BPF_KPROBE(do_mov_general_3476)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xd99")
int BPF_KPROBE(do_mov_general_3477)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_change+0xdbc")
int BPF_KPROBE(do_mov_general_3478)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0x38")
int BPF_KPROBE(do_mov_general_3479)
{
    u64 addr = ctx->di - 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0x3f")
int BPF_KPROBE(do_switch_4326)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_init+0x44")
int BPF_KPROBE(do_switch_4327)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_init+0x52")
int BPF_KPROBE(do_mov_general_3480)
{
    u64 addr = ctx->r15 + 0x1f0;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0x5d")
int BPF_KPROBE(do_mov_general_3481)
{
    u64 addr = ctx->r15 + 0x188;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0x64")
int BPF_KPROBE(do_mov_general_3482)
{
    u64 addr = ctx->r15 + 0x198;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0x6f")
int BPF_KPROBE(do_mov_general_3483)
{
    u64 addr = ctx->r15 + 0x190;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0x7a")
int BPF_KPROBE(do_mov_general_3484)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0x83")
int BPF_KPROBE(do_mov_general_3485)
{
    u64 addr = ctx->r15 + 0x208;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0x8a")
int BPF_KPROBE(do_mov_general_3486)
{
    u64 addr = ctx->r15 + 0x210;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0xbb")
int BPF_KPROBE(do_switch_4328)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_init+0xbb")
int BPF_KPROBE(do_hotbpf_4328)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/taprio_init+0xc0")
int BPF_KPROBE(do_switch_4329)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_init+0xc0")
int BPF_KPROBE(do_mov_general_3487)
{
    u64 addr = ctx->r15 + 0x180;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0xf5")
int BPF_KPROBE(do_mov_general_3488)
{
    u64 addr = ctx->dx + ctx->r12 * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0x19d")
int BPF_KPROBE(do_mov_general_3489)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_init+0x1bd")
int BPF_KPROBE(do_mov_general_3490)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x92")
int BPF_KPROBE(do_mov_general_3491)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x9b")
int BPF_KPROBE(do_mov_general_3492)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x1df")
int BPF_KPROBE(do_switch_4341)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x1e4")
int BPF_KPROBE(do_switch_4342)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x2e1")
int BPF_KPROBE(do_mov_general_3493)
{
    u64 addr = ctx->dx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x2f4")
int BPF_KPROBE(do_mov_general_3494)
{
    u64 addr = ctx->r12 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x30a")
int BPF_KPROBE(do_switch_4346)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x30f")
int BPF_KPROBE(do_switch_4347)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x335")
int BPF_KPROBE(do_mov_general_3495)
{
    u64 addr = ctx->dx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x37b")
int BPF_KPROBE(do_mov_general_3496)
{
    u64 addr = ctx->bx + 0x1b8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x382")
int BPF_KPROBE(do_mov_general_3497)
{
    u64 addr = ctx->bx + 0x1c0;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x3d1")
int BPF_KPROBE(do_switch_4349)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x3d6")
int BPF_KPROBE(do_switch_4350)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x407")
int BPF_KPROBE(do_mov_general_3498)
{
    u64 addr = ctx->r12 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x42a")
int BPF_KPROBE(do_switch_4352)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue_one+0x42f")
int BPF_KPROBE(do_switch_4353)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue+0x56")
int BPF_KPROBE(do_switch_4355)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue+0x5b")
int BPF_KPROBE(do_switch_4356)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue+0x73")
int BPF_KPROBE(do_switch_4357)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue+0x78")
int BPF_KPROBE(do_switch_4358)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue+0xa4")
int BPF_KPROBE(do_mov_general_3499)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue+0xb7")
int BPF_KPROBE(do_mov_general_3500)
{
    u64 addr = ctx->di + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue+0x10c")
int BPF_KPROBE(do_switch_4361)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue+0x111")
int BPF_KPROBE(do_switch_4362)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/taprio_enqueue+0x12d")
int BPF_KPROBE(do_mov_general_3501)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_enqueue+0x136")
int BPF_KPROBE(do_mov_general_3502)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/dump_schedule+0x1ad")
int BPF_KPROBE(do_mov_general_3503)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/dump_schedule+0x276")
int BPF_KPROBE(do_mov_general_3504)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/advance_sched+0x92")
int BPF_KPROBE(do_mov_general_3505)
{
    u64 addr = ctx->bx - 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/advance_sched+0x96")
int BPF_KPROBE(do_mov_general_3506)
{
    u64 addr = ctx->bx - 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/advance_sched+0xba")
int BPF_KPROBE(do_mov_general_3507)
{
    u64 addr = ctx->r13 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/advance_sched+0xc7")
int BPF_KPROBE(do_mov_general_3508)
{
    u64 addr = ctx->r13 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/advance_sched+0xcb")
int BPF_KPROBE(do_mov_general_3509)
{
    u64 addr = ctx->bx - 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/advance_sched+0xd7")
int BPF_KPROBE(do_mov_general_3510)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/advance_sched+0xdb")
int BPF_KPROBE(do_mov_general_3511)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/advance_sched+0xe7")
int BPF_KPROBE(do_switch_4380)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/advance_sched+0xec")
int BPF_KPROBE(do_switch_4381)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/advance_sched+0x109")
int BPF_KPROBE(do_mov_general_3512)
{
    u64 addr = ctx->di + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/advance_sched+0x138")
int BPF_KPROBE(do_mov_general_3513)
{
    u64 addr = ctx->bx - 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/advance_sched+0x141")
int BPF_KPROBE(do_mov_general_3514)
{
    u64 addr = ctx->bx - 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_dump+0x9b")
int BPF_KPROBE(do_mov_stk_12)
{
    u64 addr = ctx->sp + ctx->ax * 0x2 + 0x28;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/taprio_dump+0xa8")
int BPF_KPROBE(do_mov_stk_13)
{
    u64 addr = ctx->sp + ctx->ax * 0x2 + 0x48;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/taprio_dump+0x1b7")
int BPF_KPROBE(do_mov_general_3515)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_dump+0x26a")
int BPF_KPROBE(do_mov_general_3516)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/taprio_dump+0x281")
int BPF_KPROBE(do_mov_general_3517)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/route4_walk+0x81")
int BPF_KPROBE(do_mov_general_3518)
{
    u64 addr = ctx->r15 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_walk+0xa5")
int BPF_KPROBE(do_mov_general_3519)
{
    u64 addr = ctx->r15;
    check(addr);
    return 0;
}


SEC("kprobe/route4_reset_fastmap+0x1d")
int BPF_KPROBE(do_mov_general_3520)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/route4_reset_fastmap+0x26")
int BPF_KPROBE(do_mov_general_3521)
{
    u64 addr = ctx->bx + 0xf8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_dump+0x3e")
int BPF_KPROBE(do_mov_general_3522)
{
    u64 addr = ctx->r8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_dump+0xe0")
int BPF_KPROBE(do_mov_general_3523)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/route4_delete_filter_work+0x59")
int BPF_KPROBE(do_switch_4414)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_delete_filter_work+0x5e")
int BPF_KPROBE(do_switch_4415)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_init+0x1e")
int BPF_KPROBE(do_switch_4417)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_init+0x1e")
int BPF_KPROBE(do_hotbpf_4417)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/route4_init+0x23")
int BPF_KPROBE(do_switch_4418)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_init+0x28")
int BPF_KPROBE(do_mov_general_3524)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_destroy+0x7a")
int BPF_KPROBE(do_mov_general_3525)
{
    u64 addr = ctx->r13 + ctx->r12 * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_destroy+0xd3")
int BPF_KPROBE(do_mov_general_3526)
{
    u64 addr = ctx->r15 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/route4_destroy+0x11b")
int BPF_KPROBE(do_mov_general_3527)
{
    u64 addr = ctx->si + ctx->ax * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_destroy+0x132")
int BPF_KPROBE(do_mov_general_3528)
{
    u64 addr = ctx->r15 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/route4_destroy+0x191")
int BPF_KPROBE(do_switch_4425)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_destroy+0x196")
int BPF_KPROBE(do_switch_4426)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_delete+0x82")
int BPF_KPROBE(do_mov_general_3529)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/route4_delete+0xaa")
int BPF_KPROBE(do_mov_general_3530)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/route4_delete+0xe2")
int BPF_KPROBE(do_mov_general_3531)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/route4_delete+0x13b")
int BPF_KPROBE(do_mov_general_3532)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/route4_delete+0x195")
int BPF_KPROBE(do_mov_general_3533)
{
    u64 addr = ctx->r13 + ctx->ax * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0xce")
int BPF_KPROBE(do_switch_4437)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_change+0xce")
int BPF_KPROBE(do_hotbpf_4437)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/route4_change+0xd3")
int BPF_KPROBE(do_switch_4438)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_change+0xdf")
int BPF_KPROBE(do_mov_general_3534)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0xf3")
int BPF_KPROBE(do_mov_general_3535)
{
    u64 addr = ctx->bx + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x107")
int BPF_KPROBE(do_switch_4439)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_change+0x107")
int BPF_KPROBE(do_hotbpf_4439)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/route4_change+0x10c")
int BPF_KPROBE(do_switch_4440)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_change+0x10c")
int BPF_KPROBE(do_mov_general_3536)
{
    u64 addr = ctx->bx + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x129")
int BPF_KPROBE(do_mov_general_3537)
{
    u64 addr = ctx->bx + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x139")
int BPF_KPROBE(do_mov_general_3538)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x140")
int BPF_KPROBE(do_mov_general_3539)
{
    u64 addr = ctx->bx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x14b")
int BPF_KPROBE(do_mov_general_3540)
{
    u64 addr = ctx->bx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x14f")
int BPF_KPROBE(do_mov_general_3541)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x157")
int BPF_KPROBE(do_mov_general_3542)
{
    u64 addr = ctx->bx + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x15e")
int BPF_KPROBE(do_mov_general_3543)
{
    u64 addr = ctx->bx + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x166")
int BPF_KPROBE(do_mov_general_3544)
{
    u64 addr = ctx->bx + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x226")
int BPF_KPROBE(do_mov_general_3545)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x358")
int BPF_KPROBE(do_switch_4445)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_change+0x358")
int BPF_KPROBE(do_hotbpf_4445)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/route4_change+0x35d")
int BPF_KPROBE(do_switch_4446)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/route4_change+0x37f")
int BPF_KPROBE(do_mov_general_3546)
{
    u64 addr = ctx->ax + ctx->r12 * 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x388")
int BPF_KPROBE(do_mov_general_3547)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x39c")
int BPF_KPROBE(do_mov_general_3548)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x3a8")
int BPF_KPROBE(do_mov_general_3549)
{
    u64 addr = ctx->bx + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x3ac")
int BPF_KPROBE(do_mov_general_3550)
{
    u64 addr = ctx->bx + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x3b0")
int BPF_KPROBE(do_mov_general_3551)
{
    u64 addr = ctx->bx + 0x50;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x3c4")
int BPF_KPROBE(do_mov_general_3552)
{
    u64 addr = ctx->bx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x4cf")
int BPF_KPROBE(do_mov_general_3553)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x4d2")
int BPF_KPROBE(do_mov_general_3554)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x566")
int BPF_KPROBE(do_mov_general_3555)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x5c4")
int BPF_KPROBE(do_mov_general_3556)
{
    u64 addr = ctx->r15 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x619")
int BPF_KPROBE(do_mov_general_3557)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x641")
int BPF_KPROBE(do_mov_general_3558)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x654")
int BPF_KPROBE(do_mov_general_3559)
{
    u64 addr = ctx->bx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/route4_change+0x6da")
int BPF_KPROBE(do_mov_general_3560)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x114")
int BPF_KPROBE(do_mov_general_3561)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x118")
int BPF_KPROBE(do_mov_general_3562)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x175")
int BPF_KPROBE(do_mov_general_3563)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x179")
int BPF_KPROBE(do_mov_general_3564)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x1ea")
int BPF_KPROBE(do_mov_general_3565)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x1ee")
int BPF_KPROBE(do_mov_general_3566)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x216")
int BPF_KPROBE(do_mov_general_3567)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x21a")
int BPF_KPROBE(do_mov_general_3568)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x28b")
int BPF_KPROBE(do_mov_general_3569)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x28f")
int BPF_KPROBE(do_mov_general_3570)
{
    u64 addr = ctx->dx + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x298")
int BPF_KPROBE(do_mov_general_3571)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x2f7")
int BPF_KPROBE(do_mov_general_3572)
{
    u64 addr = ctx->ax + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x2fb")
int BPF_KPROBE(do_mov_general_3573)
{
    u64 addr = ctx->ax + 0xc;
    check(addr);
    return 0;
}


SEC("kprobe/route4_classify+0x2ff")
int BPF_KPROBE(do_mov_general_3574)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fw_walk+0x45")
int BPF_KPROBE(do_mov_general_3575)
{
    u64 addr = ctx->bx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fw_walk+0x66")
int BPF_KPROBE(do_mov_general_3576)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/fw_classify+0x65")
int BPF_KPROBE(do_mov_general_3577)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fw_classify+0x69")
int BPF_KPROBE(do_mov_general_3578)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fw_classify+0xd3")
int BPF_KPROBE(do_mov_general_3579)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fw_classify+0xdb")
int BPF_KPROBE(do_mov_general_3580)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fw_dump+0x3e")
int BPF_KPROBE(do_mov_general_3581)
{
    u64 addr = ctx->r8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fw_dump+0xe9")
int BPF_KPROBE(do_mov_general_3582)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/fw_dump+0x160")
int BPF_KPROBE(do_switch_4483)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_dump+0x165")
int BPF_KPROBE(do_switch_4484)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__fw_delete_filter+0x4c")
int BPF_KPROBE(do_switch_4491)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__fw_delete_filter+0x51")
int BPF_KPROBE(do_switch_4492)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_destroy+0x40")
int BPF_KPROBE(do_mov_general_3583)
{
    u64 addr = ctx->r13 + ctx->r12 * 0x8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fw_destroy+0x90")
int BPF_KPROBE(do_mov_general_3584)
{
    u64 addr = ctx->r15 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/fw_destroy+0xe7")
int BPF_KPROBE(do_mov_general_3585)
{
    u64 addr = ctx->r15 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/fw_delete+0x6d")
int BPF_KPROBE(do_mov_general_3586)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fw_delete+0x8d")
int BPF_KPROBE(do_mov_general_3587)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fw_delete+0xa9")
int BPF_KPROBE(do_mov_general_3588)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/fw_delete+0xef")
int BPF_KPROBE(do_mov_general_3589)
{
    u64 addr = ctx->r12 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/fw_set_parms+0x6e")
int BPF_KPROBE(do_mov_general_3590)
{
    u64 addr = ctx->r12 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/fw_set_parms+0x137")
int BPF_KPROBE(do_switch_4515)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_set_parms+0x13c")
int BPF_KPROBE(do_switch_4516)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_set_parms+0x153")
int BPF_KPROBE(do_mov_general_3591)
{
    u64 addr = ctx->r12 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fw_set_parms+0x263")
int BPF_KPROBE(do_mov_general_3592)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/fw_set_parms+0x26a")
int BPF_KPROBE(do_mov_general_3593)
{
    u64 addr = ctx->r14 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fw_set_parms+0x26e")
int BPF_KPROBE(do_mov_general_3594)
{
    u64 addr = ctx->r14 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fw_set_parms+0x299")
int BPF_KPROBE(do_mov_general_3595)
{
    u64 addr = ctx->r14;
    check(addr);
    return 0;
}


SEC("kprobe/fw_set_parms+0x2a0")
int BPF_KPROBE(do_mov_general_3596)
{
    u64 addr = ctx->r14 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fw_set_parms+0x2a4")
int BPF_KPROBE(do_mov_general_3597)
{
    u64 addr = ctx->r14 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0xc6")
int BPF_KPROBE(do_switch_4526)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_change+0xc6")
int BPF_KPROBE(do_hotbpf_4526)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/fw_change+0xcb")
int BPF_KPROBE(do_switch_4527)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_change+0xe7")
int BPF_KPROBE(do_mov_general_3598)
{
    u64 addr = ctx->r13 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0xf3")
int BPF_KPROBE(do_mov_general_3599)
{
    u64 addr = ctx->r13 + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0xf7")
int BPF_KPROBE(do_mov_general_3600)
{
    u64 addr = ctx->r13 + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x104")
int BPF_KPROBE(do_mov_general_3601)
{
    u64 addr = ctx->r13 + 0x20;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x10c")
int BPF_KPROBE(do_mov_general_3602)
{
    u64 addr = ctx->r13 + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x114")
int BPF_KPROBE(do_mov_general_3603)
{
    u64 addr = ctx->r13 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x118")
int BPF_KPROBE(do_mov_general_3604)
{
    u64 addr = ctx->r13 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x11c")
int BPF_KPROBE(do_switch_4528)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_change+0x11c")
int BPF_KPROBE(do_hotbpf_4528)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/fw_change+0x121")
int BPF_KPROBE(do_switch_4529)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_change+0x121")
int BPF_KPROBE(do_mov_general_3605)
{
    u64 addr = ctx->r13 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x14c")
int BPF_KPROBE(do_mov_general_3606)
{
    u64 addr = ctx->r13 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x19d")
int BPF_KPROBE(do_mov_general_3607)
{
    u64 addr = ctx->r13;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x1a1")
int BPF_KPROBE(do_mov_general_3608)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x204")
int BPF_KPROBE(do_mov_general_3609)
{
    u64 addr = ctx->r15 + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x227")
int BPF_KPROBE(do_mov_general_3610)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x29e")
int BPF_KPROBE(do_switch_4533)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_change+0x29e")
int BPF_KPROBE(do_hotbpf_4533)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/fw_change+0x2a3")
int BPF_KPROBE(do_switch_4534)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_change+0x2ac")
int BPF_KPROBE(do_mov_general_3611)
{
    u64 addr = ctx->ax + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x2c1")
int BPF_KPROBE(do_mov_general_3612)
{
    u64 addr = ctx->ax + 0x28;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x2d0")
int BPF_KPROBE(do_switch_4535)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_change+0x2d0")
int BPF_KPROBE(do_hotbpf_4535)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/fw_change+0x2d5")
int BPF_KPROBE(do_switch_4536)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_change+0x2dc")
int BPF_KPROBE(do_mov_general_3613)
{
    u64 addr = ctx->r10 + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x2e9")
int BPF_KPROBE(do_mov_general_3614)
{
    u64 addr = ctx->r10 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x2f7")
int BPF_KPROBE(do_mov_general_3615)
{
    u64 addr = ctx->r10 + 0x48;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x313")
int BPF_KPROBE(do_mov_general_3616)
{
    u64 addr = ctx->r10 + 0x40;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x350")
int BPF_KPROBE(do_mov_general_3617)
{
    u64 addr = ctx->r10;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x353")
int BPF_KPROBE(do_mov_general_3618)
{
    u64 addr = ctx->bx + ctx->ax * 0x8 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x362")
int BPF_KPROBE(do_mov_general_3619)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x3ce")
int BPF_KPROBE(do_switch_4541)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_change+0x3ce")
int BPF_KPROBE(do_hotbpf_4541)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/fw_change+0x3d3")
int BPF_KPROBE(do_switch_4542)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/fw_change+0x3e5")
int BPF_KPROBE(do_mov_general_3620)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/fw_change+0x3e7")
int BPF_KPROBE(do_mov_general_3621)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_register+0x62")
int BPF_KPROBE(do_mov_general_3622)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_register+0x74")
int BPF_KPROBE(do_mov_general_3623)
{
    u64 addr = ctx->bx + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_register+0x78")
int BPF_KPROBE(do_mov_general_3624)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_unregister+0x28")
int BPF_KPROBE(do_mov_general_3625)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_unregister+0x2c")
int BPF_KPROBE(do_mov_general_3626)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_unregister+0x39")
int BPF_KPROBE(do_mov_general_3627)
{
    u64 addr = ctx->bx + 0x30;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_unregister+0x41")
int BPF_KPROBE(do_mov_general_3628)
{
    u64 addr = ctx->bx + 0x38;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_lookup+0x4e")
int BPF_KPROBE(do_switch_4552)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_em_lookup+0x53")
int BPF_KPROBE(do_switch_4553)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x25")
int BPF_KPROBE(do_mov_general_3629)
{
    u64 addr = ctx->dx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x2c")
int BPF_KPROBE(do_mov_general_3630)
{
    u64 addr = ctx->dx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x93")
int BPF_KPROBE(do_mov_general_3631)
{
    u64 addr = ctx->r12;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0xa4")
int BPF_KPROBE(do_switch_4558)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0xa4")
int BPF_KPROBE(do_hotbpf_4558)
{
    if (cache8k == 0) return 0;
	u64 alloc_addr = bpf_cache_alloc(cache8k, ctx->si);
	u64 nxt_ip = (u64)ctx->ip + 4;
    if (alloc_addr == 0 || nxt_ip == 0) return 0;
	struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15;
    x_regs.r14 = ctx->r14;
    x_regs.r13 = ctx->r13;
    x_regs.r12 = ctx->r12;
    x_regs.bp  = ctx->bp;
    x_regs.bx  = ctx->bx;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9;
    x_regs.r8  = ctx->r8;
    x_regs.ax  = alloc_addr;
    x_regs.cx  = ctx->cx;
    x_regs.dx  = ctx->dx;
    x_regs.si  = ctx->si;
    x_regs.di  = ctx->di;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = nxt_ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
	bpf_set_regs(ctx, &x_regs);

	return 0;
}


SEC("kprobe/tcf_em_tree_validate+0xa9")
int BPF_KPROBE(do_switch_4559)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0xad")
int BPF_KPROBE(do_mov_general_3632)
{
    u64 addr = ctx->r12 + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x163")
int BPF_KPROBE(do_mov_general_3633)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x170")
int BPF_KPROBE(do_mov_general_3634)
{
    u64 addr = ctx->cx + 0x14;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x179")
int BPF_KPROBE(do_mov_general_3635)
{
    u64 addr = ctx->cx + 0x18;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x17d")
int BPF_KPROBE(do_mov_general_3636)
{
    u64 addr = ctx->cx + 0x16;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x222")
int BPF_KPROBE(do_mov_general_3637)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x2b1")
int BPF_KPROBE(do_mov_general_3638)
{
    u64 addr = ctx->cx + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x2b5")
int BPF_KPROBE(do_mov_general_3639)
{
    u64 addr = ctx->cx + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x2e2")
int BPF_KPROBE(do_switch_4564)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x2e7")
int BPF_KPROBE(do_switch_4565)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x2fd")
int BPF_KPROBE(do_mov_general_3640)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x312")
int BPF_KPROBE(do_switch_4568)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x317")
int BPF_KPROBE(do_switch_4569)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/tcf_em_tree_validate+0x320")
int BPF_KPROBE(do_mov_general_3641)
{
    u64 addr = ctx->cx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_dump+0x104")
int BPF_KPROBE(do_mov_general_3642)
{
    u64 addr = ctx->bx;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_dump+0x1fe")
int BPF_KPROBE(do_mov_general_3643)
{
    u64 addr = ctx->ax;
    check(addr);
    return 0;
}


SEC("kprobe/tcf_em_tree_dump+0x212")
int BPF_KPROBE(do_mov_general_3644)
{
    u64 addr = ctx->di;
    check(addr);
    return 0;
}


SEC("kprobe/__tcf_em_tree_match+0x12a")
int BPF_KPROBE(do_mov_stk_14)
{
    u64 addr = ctx->bp + ctx->ax * 0x4 - 0xb0;
    if (addr >= ctx->sp && addr <= ctx->bp) {}
    return 0;
}


SEC("kprobe/__tcf_em_tree_match+0x151")
int BPF_KPROBE(do_switch_4581)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/__tcf_em_tree_match+0x156")
int BPF_KPROBE(do_switch_4582)
{
    u32 pid = bpf_get_current_pid_tgid();
    u64 cpu = bpf_get_smp_processor_id();
    u64 *pv = bpf_map_lookup_elem(&private_stk, &cpu);
    struct pt_regs x_regs = {};
    x_regs.r15 = ctx->r15 ;
    x_regs.r14 = ctx->r14 ;
    x_regs.r13 = ctx->r13 ;
    x_regs.r12 = ctx->r12 ;
    x_regs.bp  = ctx->bp  ;
    x_regs.bx  = ctx->bx  ;
    x_regs.r11 = ctx->r11;
    x_regs.r10 = ctx->r10;
    x_regs.r9  = ctx->r9 ;
    x_regs.r8  = ctx->r8 ;
    x_regs.ax  = ctx->ax ;
    x_regs.cx  = ctx->cx ;
    x_regs.dx  = ctx->dx ;
    x_regs.si  = ctx->si ;
    x_regs.di  = ctx->di ;
    x_regs.orig_ax = ctx->orig_ax;
    x_regs.ip = ctx->ip;
    x_regs.cs = ctx->cs;
    x_regs.flags = ctx->flags;
    x_regs.sp = ctx->sp;
    x_regs.ss = ctx->ss;
    bpf_set_regs(ctx, &x_regs);
    return 0;
}


SEC("kprobe/shutdown_scheduler_queue+0xe")
int BPF_KPROBE(do_mov_general_3645)
{
    u64 addr = ctx->si + 0x8;
    check(addr);
    return 0;
}


SEC("kprobe/shutdown_scheduler_queue+0x12")
int BPF_KPROBE(do_mov_general_3646)
{
    u64 addr = ctx->si + 0x10;
    check(addr);
    return 0;
}


SEC("kprobe/attach_one_default_qdisc+0x5e")
int BPF_KPROBE(do_mov_general_3647)
{
    u64 addr = ctx->r12 + 0x10;
    check(addr);
    return 0;
}

call 4585
writestk 14
write 3647
icall 234
allwstk 2427
